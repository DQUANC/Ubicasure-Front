{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/perez/OneDrive/Escritorio/map/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport firebase from 'firebase/compat/app';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nexport class UserRestService {\n  constructor(http, fireAuth) {\n    this.http = http;\n    this.fireAuth = fireAuth;\n    this.httpOptions = new HttpHeaders().set('Content-Type', 'application/json');\n  }\n\n  getToken() {\n    let globalToken = localStorage.getItem('token');\n    let token;\n\n    if (globalToken != undefined) {\n      token = globalToken;\n    } else {\n      token = '';\n    }\n\n    return token;\n  }\n\n  getIdentity() {\n    let globalIdentity = localStorage.getItem('identity');\n    let identity;\n\n    if (globalIdentity != undefined) {\n      identity = JSON.parse(globalIdentity);\n    } else {\n      identity = '';\n    }\n\n    return identity;\n  }\n\n  register(params) {\n    return this.http.post(environment.baseUri + 'user/register', params, {\n      headers: this.httpOptions\n    });\n  }\n\n  login(params) {\n    return this.http.post(environment.baseUri + 'user/login', params, {\n      headers: this.httpOptions\n    });\n  }\n\n  getUsers() {\n    return this.http.get(environment.baseUri + 'user/getUsers', {\n      headers: this.httpOptions.set('Authorization', this.getToken())\n    });\n  }\n\n  getGuests() {\n    return this.http.get(environment.baseUrl + 'user/getGuests', {\n      headers: this.httpOptions.set('Authorization', this.getToken())\n    });\n  }\n\n  getUser(id) {\n    return this.http.get(environment.baseUrl + 'user/getUser/' + id, {\n      headers: this.httpOptions.set('Authorization', this.getToken())\n    });\n  }\n\n  updateUser(id, params) {\n    return this.http.put(environment.baseUrl + 'user/update/' + id, params, {\n      headers: this.httpOptions.set('Authorization', this.getToken())\n    });\n  }\n\n  loginGoogle() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this.fireAuth.setPersistence('none');\n\n        return yield _this.fireAuth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n      } catch (err) {\n        return console.log(err);\n      }\n    })();\n  }\n\n  logOut() {\n    this.fireAuth.signOut();\n  }\n\n}\n\nUserRestService.ɵfac = function UserRestService_Factory(t) {\n  return new (t || UserRestService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AngularFireAuth));\n};\n\nUserRestService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserRestService,\n  factory: UserRestService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","environment","firebase","UserRestService","constructor","http","fireAuth","set","getToken","globalToken","localStorage","getItem","token","undefined","getIdentity","globalIdentity","identity","JSON","parse","register","params","post","baseUri","headers","httpOptions","login","getUsers","get","getGuests","baseUrl","getUser","id","updateUser","put","loginGoogle","setPersistence","signInWithPopup","auth","GoogleAuthProvider","err","console","log","logOut","signOut","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\perez\\OneDrive\\Escritorio\\map\\src\\app\\services\\userRest\\user-rest.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport firebase from 'firebase/compat/app';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserRestService {\n  httpOptions = new HttpHeaders().set('Content-Type', 'application/json');\n\n  getToken(){\n    let globalToken = localStorage.getItem('token');\n    let token;\n    if(globalToken != undefined){\n      token = globalToken;\n    }else{\n      token = '';\n    }\n    return token;\n  }\n\n  getIdentity(){\n    let globalIdentity = localStorage.getItem('identity');\n    let identity;\n    if(globalIdentity != undefined){\n      identity = JSON.parse(globalIdentity);\n    }else{\n      identity = '';\n    }\n    return identity;\n  }\n\n  constructor(\n    private http: HttpClient,\n    private fireAuth: AngularFireAuth\n    ) { }\n\n  register(params:{}){\n    return this.http.post(environment.baseUri + 'user/register', params, {headers: this.httpOptions});\n  }\n\n  login(params:{}){\n    return this.http.post(environment.baseUri +  'user/login', params, {headers: this.httpOptions});\n  }\n\n  getUsers(){\n    return this.http.get(environment.baseUri + 'user/getUsers', {headers: this.httpOptions.set('Authorization', this.getToken())});\n  }\n\n  getGuests(){\n    return this.http.get(environment.baseUrl + 'user/getGuests', {headers: this.httpOptions.set('Authorization', this.getToken())});\n  }\n  \n\n  getUser(id:string){\n    return this.http.get(environment.baseUrl + 'user/getUser/' + id, {headers: this.httpOptions.set('Authorization', this.getToken())});\n  }\n\n  updateUser(id:string, params:{}){\n    return this.http.put(environment.baseUrl + 'user/update/' + id, params, {headers: this.httpOptions.set('Authorization', this.getToken())})\n  }\n\n  async loginGoogle(){\n    try{\n      this.fireAuth.setPersistence('none');\n      return await this.fireAuth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n    }catch(err){\n      return console.log(err);\n    }\n  }\n\n  logOut(){\n    this.fireAuth.signOut();\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}
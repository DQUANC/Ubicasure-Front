{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/perez/OneDrive/Escritorio/map/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport firebase from 'firebase/compat/app';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nimport * as i3 from \"../userRest/user-rest.service\";\nexport class StationRestService {\n  constructor(http, fireAuth, userRest) {\n    this.http = http;\n    this.fireAuth = fireAuth;\n    this.userRest = userRest;\n    this.httpOptions = new HttpHeaders().set('Content-Type', 'application/json');\n  }\n\n  createStation(params) {\n    return this.http.post(environment.baseUri + 'station/createStation', params, {\n      headers: this.httpOptions.set('Authorization', this.userRest.getToken())\n    });\n  }\n\n  getVolunteerStationsF() {\n    return this.http.get(environment.baseUri + 'station/getVolunteerStationsF', {\n      headers: this.httpOptions\n    });\n  }\n\n  getMunicipalStationsF() {\n    return this.http.get(environment.baseUri + 'station/getMunicipalStationsF', {\n      headers: this.httpOptions\n    });\n  }\n\n  getFireStations() {\n    return this.http.get(environment.baseUri + 'station/getFireStations', {\n      headers: this.httpOptions.set('Authorization', this.userRest.getToken())\n    });\n  }\n\n  getPoliceStations() {\n    return this.http.get(environment.baseUri + 'station/getPoliceStations', {\n      headers: this.httpOptions.set('Authorization', this.userRest.getToken())\n    });\n  }\n\n  getNationalStationsP() {\n    return this.http.get(environment.baseUri + 'station/getNationalStationsP', {\n      headers: this.httpOptions.set('Authorization', this.userRest.getToken())\n    });\n  }\n\n  getMunicipalStationsP() {\n    return this.http.get(environment.baseUri + 'station/getMunicipalStationsP', {\n      headers: this.httpOptions.set('Authorization', this.userRest.getToken())\n    });\n  }\n\n  updateStation(id, params) {\n    return this.http.put(environment.baseUri + 'station/updateStation/' + id, params, {\n      headers: this.httpOptions.set('Authorization', this.userRest.getToken())\n    });\n  }\n\n  deleteStation(id) {\n    return this.http.delete(environment.baseUri + 'station/deleteStation/' + id, {\n      headers: this.httpOptions.set('Authorization', this.userRest.getToken())\n    });\n  }\n\n  loginGoogle() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this.fireAuth.setPersistence('none');\n\n        return yield _this.fireAuth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n      } catch (err) {\n        return console.log(err);\n      }\n    })();\n  }\n\n}\n\nStationRestService.ɵfac = function StationRestService_Factory(t) {\n  return new (t || StationRestService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.UserRestService));\n};\n\nStationRestService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StationRestService,\n  factory: StationRestService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","environment","firebase","StationRestService","constructor","http","fireAuth","userRest","set","createStation","params","post","baseUri","headers","httpOptions","getToken","getVolunteerStationsF","get","getMunicipalStationsF","getFireStations","getPoliceStations","getNationalStationsP","getMunicipalStationsP","updateStation","id","put","deleteStation","delete","loginGoogle","setPersistence","signInWithPopup","auth","GoogleAuthProvider","err","console","log","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\perez\\OneDrive\\Escritorio\\map\\src\\app\\services\\stationRest\\station-rest.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport firebase from 'firebase/compat/app';\nimport { UserRestService } from '../userRest/user-rest.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StationRestService {\n  httpOptions = new HttpHeaders().set('Content-Type', 'application/json');\n  \n  constructor(\n    private http: HttpClient,\n    private fireAuth: AngularFireAuth,\n    private userRest:UserRestService\n    ) { }\n\n  createStation(params:{}){\n    return this.http.post(environment.baseUri + 'station/createStation', params, {headers: this.httpOptions.set('Authorization', this.userRest.getToken())});\n  }\n\n  getVolunteerStationsF(){\n    return this.http.get(environment.baseUri + 'station/getVolunteerStationsF', {headers: this.httpOptions})\n  }\n\n  getMunicipalStationsF(){\n    return this.http.get(environment.baseUri + 'station/getMunicipalStationsF', {headers: this.httpOptions})\n  }\n\n  getFireStations(){\n    return this.http.get(environment.baseUri + 'station/getFireStations', {headers: this.httpOptions.set('Authorization', this.userRest.getToken())})\n  }\n  \n  getPoliceStations(){\n    return this.http.get(environment.baseUri + 'station/getPoliceStations', {headers: this.httpOptions.set('Authorization', this.userRest.getToken())})\n  }\n\n  getNationalStationsP(){\n    return this.http.get(environment.baseUri + 'station/getNationalStationsP', {headers: this.httpOptions.set('Authorization', this.userRest.getToken())})\n  }\n\n  getMunicipalStationsP(){\n    return this.http.get(environment.baseUri + 'station/getMunicipalStationsP', {headers: this.httpOptions.set('Authorization', this.userRest.getToken())})\n  }\n\n  updateStation(id:string,params:{}){\n    return this.http.put(environment.baseUri + 'station/updateStation/' + id, params, {headers: this.httpOptions.set('Authorization', this.userRest.getToken())}) \n  }\n\n  deleteStation(id:string){\n    return this.http.delete(environment.baseUri + 'station/deleteStation/' + id, {headers: this.httpOptions.set('Authorization', this.userRest.getToken())});\n  }\n\n  async loginGoogle(){\n    try{\n      this.fireAuth.setPersistence('none');\n      return await this.fireAuth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n    }catch(err){\n      return console.log(err);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
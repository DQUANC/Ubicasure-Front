{"ast":null,"code":"/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n */\n// namespace ?\nvar jsfeat = jsfeat || {\n  REVISION: 'ALPHA'\n};\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n */\n\n(function (global) {\n  \"use strict\"; //\n  // CONSTANTS\n\n  var EPSILON = 0.0000001192092896;\n  var FLT_MIN = 1E-37; // implementation from CCV project\n  // currently working only with u8,s32,f32\n\n  var U8_t = 0x0100,\n      S32_t = 0x0200,\n      F32_t = 0x0400,\n      S64_t = 0x0800,\n      F64_t = 0x1000;\n  var C1_t = 0x01,\n      C2_t = 0x02,\n      C3_t = 0x03,\n      C4_t = 0x04;\n\n  var _data_type_size = new Int32Array([-1, 1, 4, -1, 4, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, 8]);\n\n  var get_data_type = function () {\n    return function (type) {\n      return type & 0xFF00;\n    };\n  }();\n\n  var get_channel = function () {\n    return function (type) {\n      return type & 0xFF;\n    };\n  }();\n\n  var get_data_type_size = function () {\n    return function (type) {\n      return _data_type_size[(type & 0xFF00) >> 8];\n    };\n  }(); // color conversion\n\n\n  var COLOR_RGBA2GRAY = 0;\n  var COLOR_RGB2GRAY = 1;\n  var COLOR_BGRA2GRAY = 2;\n  var COLOR_BGR2GRAY = 3; // box blur option\n\n  var BOX_BLUR_NOSCALE = 0x01; // svd options\n\n  var SVD_U_T = 0x01;\n  var SVD_V_T = 0x02;\n\n  var data_t = function () {\n    function data_t(size_in_bytes, buffer) {\n      // we need align size to multiple of 8\n      this.size = (size_in_bytes + 7 | 0) & -8;\n\n      if (typeof buffer === \"undefined\") {\n        this.buffer = new ArrayBuffer(this.size);\n      } else {\n        this.buffer = buffer;\n        this.size = buffer.length;\n      }\n\n      this.u8 = new Uint8Array(this.buffer);\n      this.i32 = new Int32Array(this.buffer);\n      this.f32 = new Float32Array(this.buffer);\n      this.f64 = new Float64Array(this.buffer);\n    }\n\n    return data_t;\n  }();\n\n  var matrix_t = function () {\n    // columns, rows, data_type\n    function matrix_t(c, r, data_type, data_buffer) {\n      this.type = get_data_type(data_type) | 0;\n      this.channel = get_channel(data_type) | 0;\n      this.cols = c | 0;\n      this.rows = r | 0;\n\n      if (typeof data_buffer === \"undefined\") {\n        this.allocate();\n      } else {\n        this.buffer = data_buffer; // data user asked for\n\n        this.data = this.type & U8_t ? this.buffer.u8 : this.type & S32_t ? this.buffer.i32 : this.type & F32_t ? this.buffer.f32 : this.buffer.f64;\n      }\n    }\n\n    matrix_t.prototype.allocate = function () {\n      // clear references\n      delete this.data;\n      delete this.buffer; //\n\n      this.buffer = new data_t(this.cols * get_data_type_size(this.type) * this.channel * this.rows);\n      this.data = this.type & U8_t ? this.buffer.u8 : this.type & S32_t ? this.buffer.i32 : this.type & F32_t ? this.buffer.f32 : this.buffer.f64;\n    };\n\n    matrix_t.prototype.copy_to = function (other) {\n      var od = other.data,\n          td = this.data;\n      var i = 0,\n          n = this.cols * this.rows * this.channel | 0;\n\n      for (; i < n - 4; i += 4) {\n        od[i] = td[i];\n        od[i + 1] = td[i + 1];\n        od[i + 2] = td[i + 2];\n        od[i + 3] = td[i + 3];\n      }\n\n      for (; i < n; ++i) {\n        od[i] = td[i];\n      }\n    };\n\n    matrix_t.prototype.resize = function (c, r, ch) {\n      if (typeof ch === \"undefined\") {\n        ch = this.channel;\n      } // relocate buffer only if new size doesnt fit\n\n\n      var new_size = c * get_data_type_size(this.type) * ch * r;\n\n      if (new_size > this.buffer.size) {\n        this.cols = c;\n        this.rows = r;\n        this.channel = ch;\n        this.allocate();\n      } else {\n        this.cols = c;\n        this.rows = r;\n        this.channel = ch;\n      }\n    };\n\n    return matrix_t;\n  }();\n\n  var pyramid_t = function () {\n    function pyramid_t(levels) {\n      this.levels = levels | 0;\n      this.data = new Array(levels);\n      this.pyrdown = jsfeat.imgproc.pyrdown;\n    }\n\n    pyramid_t.prototype.allocate = function (start_w, start_h, data_type) {\n      var i = this.levels;\n\n      while (--i >= 0) {\n        this.data[i] = new matrix_t(start_w >> i, start_h >> i, data_type);\n      }\n    };\n\n    pyramid_t.prototype.build = function (input, skip_first_level) {\n      if (typeof skip_first_level === \"undefined\") {\n        skip_first_level = true;\n      } // just copy data to first level\n\n\n      var i = 2,\n          a = input,\n          b = this.data[0];\n\n      if (!skip_first_level) {\n        var j = input.cols * input.rows;\n\n        while (--j >= 0) {\n          b.data[j] = input.data[j];\n        }\n      }\n\n      b = this.data[1];\n      this.pyrdown(a, b);\n\n      for (; i < this.levels; ++i) {\n        a = b;\n        b = this.data[i];\n        this.pyrdown(a, b);\n      }\n    };\n\n    return pyramid_t;\n  }();\n\n  var keypoint_t = function () {\n    function keypoint_t(x, y, score, level, angle) {\n      if (typeof x === \"undefined\") {\n        x = 0;\n      }\n\n      if (typeof y === \"undefined\") {\n        y = 0;\n      }\n\n      if (typeof score === \"undefined\") {\n        score = 0;\n      }\n\n      if (typeof level === \"undefined\") {\n        level = 0;\n      }\n\n      if (typeof angle === \"undefined\") {\n        angle = -1.0;\n      }\n\n      this.x = x;\n      this.y = y;\n      this.score = score;\n      this.level = level;\n      this.angle = angle;\n    }\n\n    return keypoint_t;\n  }(); // data types\n\n\n  global.U8_t = U8_t;\n  global.S32_t = S32_t;\n  global.F32_t = F32_t;\n  global.S64_t = S64_t;\n  global.F64_t = F64_t; // data channels\n\n  global.C1_t = C1_t;\n  global.C2_t = C2_t;\n  global.C3_t = C3_t;\n  global.C4_t = C4_t; // popular formats\n\n  global.U8C1_t = U8_t | C1_t;\n  global.U8C3_t = U8_t | C3_t;\n  global.U8C4_t = U8_t | C4_t;\n  global.F32C1_t = F32_t | C1_t;\n  global.F32C2_t = F32_t | C2_t;\n  global.S32C1_t = S32_t | C1_t;\n  global.S32C2_t = S32_t | C2_t; // constants\n\n  global.EPSILON = EPSILON;\n  global.FLT_MIN = FLT_MIN; // color convert\n\n  global.COLOR_RGBA2GRAY = COLOR_RGBA2GRAY;\n  global.COLOR_RGB2GRAY = COLOR_RGB2GRAY;\n  global.COLOR_BGRA2GRAY = COLOR_BGRA2GRAY;\n  global.COLOR_BGR2GRAY = COLOR_BGR2GRAY; // options\n\n  global.BOX_BLUR_NOSCALE = BOX_BLUR_NOSCALE;\n  global.SVD_U_T = SVD_U_T;\n  global.SVD_V_T = SVD_V_T;\n  global.get_data_type = get_data_type;\n  global.get_channel = get_channel;\n  global.get_data_type_size = get_data_type_size;\n  global.data_t = data_t;\n  global.matrix_t = matrix_t;\n  global.pyramid_t = pyramid_t;\n  global.keypoint_t = keypoint_t;\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n */\n\n\n(function (global) {\n  \"use strict\"; //\n\n  var cache = function () {\n    // very primitive array cache, still need testing if it helps\n    // of course V8 has its own powerful cache sys but i'm not sure\n    // it caches several multichannel 640x480 buffer creations each frame\n    var _pool_node_t = function () {\n      function _pool_node_t(size_in_bytes) {\n        this.next = null;\n        this.data = new jsfeat.data_t(size_in_bytes);\n        this.size = this.data.size;\n        this.buffer = this.data.buffer;\n        this.u8 = this.data.u8;\n        this.i32 = this.data.i32;\n        this.f32 = this.data.f32;\n        this.f64 = this.data.f64;\n      }\n\n      _pool_node_t.prototype.resize = function (size_in_bytes) {\n        delete this.data;\n        this.data = new jsfeat.data_t(size_in_bytes);\n        this.size = this.data.size;\n        this.buffer = this.data.buffer;\n        this.u8 = this.data.u8;\n        this.i32 = this.data.i32;\n        this.f32 = this.data.f32;\n        this.f64 = this.data.f64;\n      };\n\n      return _pool_node_t;\n    }();\n\n    var _pool_head, _pool_tail;\n\n    var _pool_size = 0;\n    return {\n      allocate: function (capacity, data_size) {\n        _pool_head = _pool_tail = new _pool_node_t(data_size);\n\n        for (var i = 0; i < capacity; ++i) {\n          var node = new _pool_node_t(data_size);\n          _pool_tail = _pool_tail.next = node;\n          _pool_size++;\n        }\n      },\n      get_buffer: function (size_in_bytes) {\n        // assume we have enough free nodes\n        var node = _pool_head;\n        _pool_head = _pool_head.next;\n        _pool_size--;\n\n        if (size_in_bytes > node.size) {\n          node.resize(size_in_bytes);\n        }\n\n        return node;\n      },\n      put_buffer: function (node) {\n        _pool_tail = _pool_tail.next = node;\n        _pool_size++;\n      }\n    };\n  }();\n\n  global.cache = cache; // for now we dont need more than 30 buffers\n  // if having cache sys really helps we can add auto extending sys\n\n  cache.allocate(30, 640 * 4);\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n */\n\n\n(function (global) {\n  \"use strict\"; //\n\n  var math = function () {\n    var qsort_stack = new Int32Array(48 * 2);\n    return {\n      get_gaussian_kernel: function (size, sigma, kernel, data_type) {\n        var i = 0,\n            x = 0.0,\n            t = 0.0,\n            sigma_x = 0.0,\n            scale_2x = 0.0;\n        var sum = 0.0;\n        var kern_node = jsfeat.cache.get_buffer(size << 2);\n        var _kernel = kern_node.f32; //new Float32Array(size);\n\n        if ((size & 1) == 1 && size <= 7 && sigma <= 0) {\n          switch (size >> 1) {\n            case 0:\n              _kernel[0] = 1.0;\n              sum = 1.0;\n              break;\n\n            case 1:\n              _kernel[0] = 0.25, _kernel[1] = 0.5, _kernel[2] = 0.25;\n              sum = 0.25 + 0.5 + 0.25;\n              break;\n\n            case 2:\n              _kernel[0] = 0.0625, _kernel[1] = 0.25, _kernel[2] = 0.375, _kernel[3] = 0.25, _kernel[4] = 0.0625;\n              sum = 0.0625 + 0.25 + 0.375 + 0.25 + 0.0625;\n              break;\n\n            case 3:\n              _kernel[0] = 0.03125, _kernel[1] = 0.109375, _kernel[2] = 0.21875, _kernel[3] = 0.28125, _kernel[4] = 0.21875, _kernel[5] = 0.109375, _kernel[6] = 0.03125;\n              sum = 0.03125 + 0.109375 + 0.21875 + 0.28125 + 0.21875 + 0.109375 + 0.03125;\n              break;\n          }\n        } else {\n          sigma_x = sigma > 0 ? sigma : ((size - 1) * 0.5 - 1.0) * 0.3 + 0.8;\n          scale_2x = -0.5 / (sigma_x * sigma_x);\n\n          for (; i < size; ++i) {\n            x = i - (size - 1) * 0.5;\n            t = Math.exp(scale_2x * x * x);\n            _kernel[i] = t;\n            sum += t;\n          }\n        }\n\n        if (data_type & jsfeat.U8_t) {\n          // int based kernel\n          sum = 256.0 / sum;\n\n          for (i = 0; i < size; ++i) {\n            kernel[i] = _kernel[i] * sum + 0.5 | 0;\n          }\n        } else {\n          // classic kernel\n          sum = 1.0 / sum;\n\n          for (i = 0; i < size; ++i) {\n            kernel[i] = _kernel[i] * sum;\n          }\n        }\n\n        jsfeat.cache.put_buffer(kern_node);\n      },\n      // model is 3x3 matrix_t\n      perspective_4point_transform: function (model, src_x0, src_y0, dst_x0, dst_y0, src_x1, src_y1, dst_x1, dst_y1, src_x2, src_y2, dst_x2, dst_y2, src_x3, src_y3, dst_x3, dst_y3) {\n        var t1 = src_x0;\n        var t2 = src_x2;\n        var t4 = src_y1;\n        var t5 = t1 * t2 * t4;\n        var t6 = src_y3;\n        var t7 = t1 * t6;\n        var t8 = t2 * t7;\n        var t9 = src_y2;\n        var t10 = t1 * t9;\n        var t11 = src_x1;\n        var t14 = src_y0;\n        var t15 = src_x3;\n        var t16 = t14 * t15;\n        var t18 = t16 * t11;\n        var t20 = t15 * t11 * t9;\n        var t21 = t15 * t4;\n        var t24 = t15 * t9;\n        var t25 = t2 * t4;\n        var t26 = t6 * t2;\n        var t27 = t6 * t11;\n        var t28 = t9 * t11;\n        var t30 = 1.0 / (t21 - t24 - t25 + t26 - t27 + t28);\n        var t32 = t1 * t15;\n        var t35 = t14 * t11;\n        var t41 = t4 * t1;\n        var t42 = t6 * t41;\n        var t43 = t14 * t2;\n        var t46 = t16 * t9;\n        var t48 = t14 * t9 * t11;\n        var t51 = t4 * t6 * t2;\n        var t55 = t6 * t14;\n        var Hr0 = -(t8 - t5 + t10 * t11 - t11 * t7 - t16 * t2 + t18 - t20 + t21 * t2) * t30;\n        var Hr1 = (t5 - t8 - t32 * t4 + t32 * t9 + t18 - t2 * t35 + t27 * t2 - t20) * t30;\n        var Hr2 = t1;\n        var Hr3 = (-t9 * t7 + t42 + t43 * t4 - t16 * t4 + t46 - t48 + t27 * t9 - t51) * t30;\n        var Hr4 = (-t42 + t41 * t9 - t55 * t2 + t46 - t48 + t55 * t11 + t51 - t21 * t9) * t30;\n        var Hr5 = t14;\n        var Hr6 = (-t10 + t41 + t43 - t35 + t24 - t21 - t26 + t27) * t30;\n        var Hr7 = (-t7 + t10 + t16 - t43 + t27 - t28 - t21 + t25) * t30;\n        t1 = dst_x0;\n        t2 = dst_x2;\n        t4 = dst_y1;\n        t5 = t1 * t2 * t4;\n        t6 = dst_y3;\n        t7 = t1 * t6;\n        t8 = t2 * t7;\n        t9 = dst_y2;\n        t10 = t1 * t9;\n        t11 = dst_x1;\n        t14 = dst_y0;\n        t15 = dst_x3;\n        t16 = t14 * t15;\n        t18 = t16 * t11;\n        t20 = t15 * t11 * t9;\n        t21 = t15 * t4;\n        t24 = t15 * t9;\n        t25 = t2 * t4;\n        t26 = t6 * t2;\n        t27 = t6 * t11;\n        t28 = t9 * t11;\n        t30 = 1.0 / (t21 - t24 - t25 + t26 - t27 + t28);\n        t32 = t1 * t15;\n        t35 = t14 * t11;\n        t41 = t4 * t1;\n        t42 = t6 * t41;\n        t43 = t14 * t2;\n        t46 = t16 * t9;\n        t48 = t14 * t9 * t11;\n        t51 = t4 * t6 * t2;\n        t55 = t6 * t14;\n        var Hl0 = -(t8 - t5 + t10 * t11 - t11 * t7 - t16 * t2 + t18 - t20 + t21 * t2) * t30;\n        var Hl1 = (t5 - t8 - t32 * t4 + t32 * t9 + t18 - t2 * t35 + t27 * t2 - t20) * t30;\n        var Hl2 = t1;\n        var Hl3 = (-t9 * t7 + t42 + t43 * t4 - t16 * t4 + t46 - t48 + t27 * t9 - t51) * t30;\n        var Hl4 = (-t42 + t41 * t9 - t55 * t2 + t46 - t48 + t55 * t11 + t51 - t21 * t9) * t30;\n        var Hl5 = t14;\n        var Hl6 = (-t10 + t41 + t43 - t35 + t24 - t21 - t26 + t27) * t30;\n        var Hl7 = (-t7 + t10 + t16 - t43 + t27 - t28 - t21 + t25) * t30; // the following code computes R = Hl * inverse Hr\n\n        t2 = Hr4 - Hr7 * Hr5;\n        t4 = Hr0 * Hr4;\n        t5 = Hr0 * Hr5;\n        t7 = Hr3 * Hr1;\n        t8 = Hr2 * Hr3;\n        t10 = Hr1 * Hr6;\n        var t12 = Hr2 * Hr6;\n        t15 = 1.0 / (t4 - t5 * Hr7 - t7 + t8 * Hr7 + t10 * Hr5 - t12 * Hr4);\n        t18 = -Hr3 + Hr5 * Hr6;\n        var t23 = -Hr3 * Hr7 + Hr4 * Hr6;\n        t28 = -Hr1 + Hr2 * Hr7;\n        var t31 = Hr0 - t12;\n        t35 = Hr0 * Hr7 - t10;\n        t41 = -Hr1 * Hr5 + Hr2 * Hr4;\n        var t44 = t5 - t8;\n        var t47 = t4 - t7;\n        t48 = t2 * t15;\n        var t49 = t28 * t15;\n        var t50 = t41 * t15;\n        var mat = model.data;\n        mat[0] = Hl0 * t48 + Hl1 * (t18 * t15) - Hl2 * (t23 * t15);\n        mat[1] = Hl0 * t49 + Hl1 * (t31 * t15) - Hl2 * (t35 * t15);\n        mat[2] = -Hl0 * t50 - Hl1 * (t44 * t15) + Hl2 * (t47 * t15);\n        mat[3] = Hl3 * t48 + Hl4 * (t18 * t15) - Hl5 * (t23 * t15);\n        mat[4] = Hl3 * t49 + Hl4 * (t31 * t15) - Hl5 * (t35 * t15);\n        mat[5] = -Hl3 * t50 - Hl4 * (t44 * t15) + Hl5 * (t47 * t15);\n        mat[6] = Hl6 * t48 + Hl7 * (t18 * t15) - t23 * t15;\n        mat[7] = Hl6 * t49 + Hl7 * (t31 * t15) - t35 * t15;\n        mat[8] = -Hl6 * t50 - Hl7 * (t44 * t15) + t47 * t15;\n      },\n      // The current implementation was derived from *BSD system qsort():\n      // Copyright (c) 1992, 1993\n      // The Regents of the University of California.  All rights reserved.\n      qsort: function (array, low, high, cmp) {\n        var isort_thresh = 7;\n        var t, ta, tb, tc;\n        var sp = 0,\n            left = 0,\n            right = 0,\n            i = 0,\n            n = 0,\n            m = 0,\n            ptr = 0,\n            ptr2 = 0,\n            d = 0;\n        var left0 = 0,\n            left1 = 0,\n            right0 = 0,\n            right1 = 0,\n            pivot = 0,\n            a = 0,\n            b = 0,\n            c = 0,\n            swap_cnt = 0;\n        var stack = qsort_stack;\n        if (high - low + 1 <= 1) return;\n        stack[0] = low;\n        stack[1] = high;\n\n        while (sp >= 0) {\n          left = stack[sp << 1];\n          right = stack[(sp << 1) + 1];\n          sp--;\n\n          for (;;) {\n            n = right - left + 1;\n\n            if (n <= isort_thresh) {\n              //insert_sort:\n              for (ptr = left + 1; ptr <= right; ptr++) {\n                for (ptr2 = ptr; ptr2 > left && cmp(array[ptr2], array[ptr2 - 1]); ptr2--) {\n                  t = array[ptr2];\n                  array[ptr2] = array[ptr2 - 1];\n                  array[ptr2 - 1] = t;\n                }\n              }\n\n              break;\n            } else {\n              swap_cnt = 0;\n              left0 = left;\n              right0 = right;\n              pivot = left + (n >> 1);\n\n              if (n > 40) {\n                d = n >> 3;\n                a = left, b = left + d, c = left + (d << 1);\n                ta = array[a], tb = array[b], tc = array[c];\n                left = cmp(ta, tb) ? cmp(tb, tc) ? b : cmp(ta, tc) ? c : a : cmp(tc, tb) ? b : cmp(ta, tc) ? a : c;\n                a = pivot - d, b = pivot, c = pivot + d;\n                ta = array[a], tb = array[b], tc = array[c];\n                pivot = cmp(ta, tb) ? cmp(tb, tc) ? b : cmp(ta, tc) ? c : a : cmp(tc, tb) ? b : cmp(ta, tc) ? a : c;\n                a = right - (d << 1), b = right - d, c = right;\n                ta = array[a], tb = array[b], tc = array[c];\n                right = cmp(ta, tb) ? cmp(tb, tc) ? b : cmp(ta, tc) ? c : a : cmp(tc, tb) ? b : cmp(ta, tc) ? a : c;\n              }\n\n              a = left, b = pivot, c = right;\n              ta = array[a], tb = array[b], tc = array[c];\n              pivot = cmp(ta, tb) ? cmp(tb, tc) ? b : cmp(ta, tc) ? c : a : cmp(tc, tb) ? b : cmp(ta, tc) ? a : c;\n\n              if (pivot != left0) {\n                t = array[pivot];\n                array[pivot] = array[left0];\n                array[left0] = t;\n                pivot = left0;\n              }\n\n              left = left1 = left0 + 1;\n              right = right1 = right0;\n              ta = array[pivot];\n\n              for (;;) {\n                while (left <= right && !cmp(ta, array[left])) {\n                  if (!cmp(array[left], ta)) {\n                    if (left > left1) {\n                      t = array[left1];\n                      array[left1] = array[left];\n                      array[left] = t;\n                    }\n\n                    swap_cnt = 1;\n                    left1++;\n                  }\n\n                  left++;\n                }\n\n                while (left <= right && !cmp(array[right], ta)) {\n                  if (!cmp(ta, array[right])) {\n                    if (right < right1) {\n                      t = array[right1];\n                      array[right1] = array[right];\n                      array[right] = t;\n                    }\n\n                    swap_cnt = 1;\n                    right1--;\n                  }\n\n                  right--;\n                }\n\n                if (left > right) break;\n                t = array[left];\n                array[left] = array[right];\n                array[right] = t;\n                swap_cnt = 1;\n                left++;\n                right--;\n              }\n\n              if (swap_cnt == 0) {\n                left = left0, right = right0; //goto insert_sort;\n\n                for (ptr = left + 1; ptr <= right; ptr++) {\n                  for (ptr2 = ptr; ptr2 > left && cmp(array[ptr2], array[ptr2 - 1]); ptr2--) {\n                    t = array[ptr2];\n                    array[ptr2] = array[ptr2 - 1];\n                    array[ptr2 - 1] = t;\n                  }\n                }\n\n                break;\n              }\n\n              n = Math.min(left1 - left0, left - left1);\n              m = left - n | 0;\n\n              for (i = 0; i < n; ++i, ++m) {\n                t = array[left0 + i];\n                array[left0 + i] = array[m];\n                array[m] = t;\n              }\n\n              n = Math.min(right0 - right1, right1 - right);\n              m = right0 - n + 1 | 0;\n\n              for (i = 0; i < n; ++i, ++m) {\n                t = array[left + i];\n                array[left + i] = array[m];\n                array[m] = t;\n              }\n\n              n = left - left1;\n              m = right1 - right;\n\n              if (n > 1) {\n                if (m > 1) {\n                  if (n > m) {\n                    ++sp;\n                    stack[sp << 1] = left0;\n                    stack[(sp << 1) + 1] = left0 + n - 1;\n                    left = right0 - m + 1, right = right0;\n                  } else {\n                    ++sp;\n                    stack[sp << 1] = right0 - m + 1;\n                    stack[(sp << 1) + 1] = right0;\n                    left = left0, right = left0 + n - 1;\n                  }\n                } else {\n                  left = left0, right = left0 + n - 1;\n                }\n              } else if (m > 1) left = right0 - m + 1, right = right0;else break;\n            }\n          }\n        }\n      },\n      median: function (array, low, high) {\n        var w;\n        var middle = 0,\n            ll = 0,\n            hh = 0,\n            median = low + high >> 1;\n\n        for (;;) {\n          if (high <= low) return array[median];\n\n          if (high == low + 1) {\n            if (array[low] > array[high]) {\n              w = array[low];\n              array[low] = array[high];\n              array[high] = w;\n            }\n\n            return array[median];\n          }\n\n          middle = low + high >> 1;\n\n          if (array[middle] > array[high]) {\n            w = array[middle];\n            array[middle] = array[high];\n            array[high] = w;\n          }\n\n          if (array[low] > array[high]) {\n            w = array[low];\n            array[low] = array[high];\n            array[high] = w;\n          }\n\n          if (array[middle] > array[low]) {\n            w = array[middle];\n            array[middle] = array[low];\n            array[low] = w;\n          }\n\n          ll = low + 1;\n          w = array[middle];\n          array[middle] = array[ll];\n          array[ll] = w;\n          hh = high;\n\n          for (;;) {\n            do ++ll; while (array[low] > array[ll]);\n\n            do --hh; while (array[hh] > array[low]);\n\n            if (hh < ll) break;\n            w = array[ll];\n            array[ll] = array[hh];\n            array[hh] = w;\n          }\n\n          w = array[low];\n          array[low] = array[hh];\n          array[hh] = w;\n          if (hh <= median) low = ll;else if (hh >= median) high = hh - 1;\n        }\n\n        return 0;\n      }\n    };\n  }();\n\n  global.math = math;\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n */\n\n\n(function (global) {\n  \"use strict\"; //\n\n  var matmath = function () {\n    return {\n      identity: function (M, value) {\n        if (typeof value === \"undefined\") {\n          value = 1;\n        }\n\n        var src = M.data;\n        var rows = M.rows,\n            cols = M.cols,\n            cols_1 = cols + 1 | 0;\n        var len = rows * cols;\n        var k = len;\n\n        while (--len >= 0) src[len] = 0.0;\n\n        len = k;\n        k = 0;\n\n        while (k < len) {\n          src[k] = value;\n          k = k + cols_1;\n        }\n      },\n      transpose: function (At, A) {\n        var i = 0,\n            j = 0,\n            nrows = A.rows,\n            ncols = A.cols;\n        var Ai = 0,\n            Ati = 0,\n            pAt = 0;\n        var ad = A.data,\n            atd = At.data;\n\n        for (; i < nrows; Ati += 1, Ai += ncols, i++) {\n          pAt = Ati;\n\n          for (j = 0; j < ncols; pAt += nrows, j++) atd[pAt] = ad[Ai + j];\n        }\n      },\n      // C = A * B\n      multiply: function (C, A, B) {\n        var i = 0,\n            j = 0,\n            k = 0;\n        var Ap = 0,\n            pA = 0,\n            pB = 0,\n            p_B = 0,\n            Cp = 0;\n        var ncols = A.cols,\n            nrows = A.rows,\n            mcols = B.cols;\n        var ad = A.data,\n            bd = B.data,\n            cd = C.data;\n        var sum = 0.0;\n\n        for (; i < nrows; Ap += ncols, i++) {\n          for (p_B = 0, j = 0; j < mcols; Cp++, p_B++, j++) {\n            pB = p_B;\n            pA = Ap;\n            sum = 0.0;\n\n            for (k = 0; k < ncols; pA++, pB += mcols, k++) {\n              sum += ad[pA] * bd[pB];\n            }\n\n            cd[Cp] = sum;\n          }\n        }\n      },\n      // C = A * B'\n      multiply_ABt: function (C, A, B) {\n        var i = 0,\n            j = 0,\n            k = 0;\n        var Ap = 0,\n            pA = 0,\n            pB = 0,\n            Cp = 0;\n        var ncols = A.cols,\n            nrows = A.rows,\n            mrows = B.rows;\n        var ad = A.data,\n            bd = B.data,\n            cd = C.data;\n        var sum = 0.0;\n\n        for (; i < nrows; Ap += ncols, i++) {\n          for (pB = 0, j = 0; j < mrows; Cp++, j++) {\n            pA = Ap;\n            sum = 0.0;\n\n            for (k = 0; k < ncols; pA++, pB++, k++) {\n              sum += ad[pA] * bd[pB];\n            }\n\n            cd[Cp] = sum;\n          }\n        }\n      },\n      // C = A' * B\n      multiply_AtB: function (C, A, B) {\n        var i = 0,\n            j = 0,\n            k = 0;\n        var Ap = 0,\n            pA = 0,\n            pB = 0,\n            p_B = 0,\n            Cp = 0;\n        var ncols = A.cols,\n            nrows = A.rows,\n            mcols = B.cols;\n        var ad = A.data,\n            bd = B.data,\n            cd = C.data;\n        var sum = 0.0;\n\n        for (; i < ncols; Ap++, i++) {\n          for (p_B = 0, j = 0; j < mcols; Cp++, p_B++, j++) {\n            pB = p_B;\n            pA = Ap;\n            sum = 0.0;\n\n            for (k = 0; k < nrows; pA += ncols, pB += mcols, k++) {\n              sum += ad[pA] * bd[pB];\n            }\n\n            cd[Cp] = sum;\n          }\n        }\n      },\n      // C = A * A'\n      multiply_AAt: function (C, A) {\n        var i = 0,\n            j = 0,\n            k = 0;\n        var pCdiag = 0,\n            p_A = 0,\n            pA = 0,\n            pB = 0,\n            pC = 0,\n            pCt = 0;\n        var ncols = A.cols,\n            nrows = A.rows;\n        var ad = A.data,\n            cd = C.data;\n        var sum = 0.0;\n\n        for (; i < nrows; pCdiag += nrows + 1, p_A = pA, i++) {\n          pC = pCdiag;\n          pCt = pCdiag;\n          pB = p_A;\n\n          for (j = i; j < nrows; pC++, pCt += nrows, j++) {\n            pA = p_A;\n            sum = 0.0;\n\n            for (k = 0; k < ncols; k++) {\n              sum += ad[pA++] * ad[pB++];\n            }\n\n            cd[pC] = sum;\n            cd[pCt] = sum;\n          }\n        }\n      },\n      // C = A' * A\n      multiply_AtA: function (C, A) {\n        var i = 0,\n            j = 0,\n            k = 0;\n        var p_A = 0,\n            pA = 0,\n            pB = 0,\n            p_C = 0,\n            pC = 0,\n            p_CC = 0;\n        var ncols = A.cols,\n            nrows = A.rows;\n        var ad = A.data,\n            cd = C.data;\n        var sum = 0.0;\n\n        for (; i < ncols; p_C += ncols, i++) {\n          p_A = i;\n          p_CC = p_C + i;\n          pC = p_CC;\n\n          for (j = i; j < ncols; pC++, p_CC += ncols, j++) {\n            pA = p_A;\n            pB = j;\n            sum = 0.0;\n\n            for (k = 0; k < nrows; pA += ncols, pB += ncols, k++) {\n              sum += ad[pA] * ad[pB];\n            }\n\n            cd[pC] = sum;\n            cd[p_CC] = sum;\n          }\n        }\n      },\n      // various small matrix operations\n      identity_3x3: function (M, value) {\n        if (typeof value === \"undefined\") {\n          value = 1;\n        }\n\n        var dt = M.data;\n        dt[0] = dt[4] = dt[8] = value;\n        dt[1] = dt[2] = dt[3] = 0;\n        dt[5] = dt[6] = dt[7] = 0;\n      },\n      invert_3x3: function (from, to) {\n        var A = from.data,\n            invA = to.data;\n        var t1 = A[4];\n        var t2 = A[8];\n        var t4 = A[5];\n        var t5 = A[7];\n        var t8 = A[0];\n        var t9 = t8 * t1;\n        var t11 = t8 * t4;\n        var t13 = A[3];\n        var t14 = A[1];\n        var t15 = t13 * t14;\n        var t17 = A[2];\n        var t18 = t13 * t17;\n        var t20 = A[6];\n        var t21 = t20 * t14;\n        var t23 = t20 * t17;\n        var t26 = 1.0 / (t9 * t2 - t11 * t5 - t15 * t2 + t18 * t5 + t21 * t4 - t23 * t1);\n        invA[0] = (t1 * t2 - t4 * t5) * t26;\n        invA[1] = -(t14 * t2 - t17 * t5) * t26;\n        invA[2] = -(-t14 * t4 + t17 * t1) * t26;\n        invA[3] = -(t13 * t2 - t4 * t20) * t26;\n        invA[4] = (t8 * t2 - t23) * t26;\n        invA[5] = -(t11 - t18) * t26;\n        invA[6] = -(-t13 * t5 + t1 * t20) * t26;\n        invA[7] = -(t8 * t5 - t21) * t26;\n        invA[8] = (t9 - t15) * t26;\n      },\n      // C = A * B\n      multiply_3x3: function (C, A, B) {\n        var Cd = C.data,\n            Ad = A.data,\n            Bd = B.data;\n        var m1_0 = Ad[0],\n            m1_1 = Ad[1],\n            m1_2 = Ad[2];\n        var m1_3 = Ad[3],\n            m1_4 = Ad[4],\n            m1_5 = Ad[5];\n        var m1_6 = Ad[6],\n            m1_7 = Ad[7],\n            m1_8 = Ad[8];\n        var m2_0 = Bd[0],\n            m2_1 = Bd[1],\n            m2_2 = Bd[2];\n        var m2_3 = Bd[3],\n            m2_4 = Bd[4],\n            m2_5 = Bd[5];\n        var m2_6 = Bd[6],\n            m2_7 = Bd[7],\n            m2_8 = Bd[8];\n        Cd[0] = m1_0 * m2_0 + m1_1 * m2_3 + m1_2 * m2_6;\n        Cd[1] = m1_0 * m2_1 + m1_1 * m2_4 + m1_2 * m2_7;\n        Cd[2] = m1_0 * m2_2 + m1_1 * m2_5 + m1_2 * m2_8;\n        Cd[3] = m1_3 * m2_0 + m1_4 * m2_3 + m1_5 * m2_6;\n        Cd[4] = m1_3 * m2_1 + m1_4 * m2_4 + m1_5 * m2_7;\n        Cd[5] = m1_3 * m2_2 + m1_4 * m2_5 + m1_5 * m2_8;\n        Cd[6] = m1_6 * m2_0 + m1_7 * m2_3 + m1_8 * m2_6;\n        Cd[7] = m1_6 * m2_1 + m1_7 * m2_4 + m1_8 * m2_7;\n        Cd[8] = m1_6 * m2_2 + m1_7 * m2_5 + m1_8 * m2_8;\n      },\n      mat3x3_determinant: function (M) {\n        var md = M.data;\n        return md[0] * md[4] * md[8] - md[0] * md[5] * md[7] - md[3] * md[1] * md[8] + md[3] * md[2] * md[7] + md[6] * md[1] * md[5] - md[6] * md[2] * md[4];\n      },\n      determinant_3x3: function (M11, M12, M13, M21, M22, M23, M31, M32, M33) {\n        return M11 * M22 * M33 - M11 * M23 * M32 - M21 * M12 * M33 + M21 * M13 * M32 + M31 * M12 * M23 - M31 * M13 * M22;\n      }\n    };\n  }();\n\n  global.matmath = matmath;\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n */\n\n\n(function (global) {\n  \"use strict\"; //\n\n  var linalg = function () {\n    var swap = function (A, i0, i1, t) {\n      t = A[i0];\n      A[i0] = A[i1];\n      A[i1] = t;\n    };\n\n    var hypot = function (a, b) {\n      a = Math.abs(a);\n      b = Math.abs(b);\n\n      if (a > b) {\n        b /= a;\n        return a * Math.sqrt(1.0 + b * b);\n      }\n\n      if (b > 0) {\n        a /= b;\n        return b * Math.sqrt(1.0 + a * a);\n      }\n\n      return 0.0;\n    };\n\n    var JacobiImpl = function (A, astep, W, V, vstep, n) {\n      var eps = jsfeat.EPSILON;\n      var i = 0,\n          j = 0,\n          k = 0,\n          m = 0,\n          l = 0,\n          idx = 0,\n          _in = 0,\n          _in2 = 0;\n      var iters = 0,\n          max_iter = n * n * 30;\n      var mv = 0.0,\n          val = 0.0,\n          p = 0.0,\n          y = 0.0,\n          t = 0.0,\n          s = 0.0,\n          c = 0.0,\n          a0 = 0.0,\n          b0 = 0.0;\n      var indR_buff = jsfeat.cache.get_buffer(n << 2);\n      var indC_buff = jsfeat.cache.get_buffer(n << 2);\n      var indR = indR_buff.i32;\n      var indC = indC_buff.i32;\n\n      if (V) {\n        for (; i < n; i++) {\n          k = i * vstep;\n\n          for (j = 0; j < n; j++) {\n            V[k + j] = 0.0;\n          }\n\n          V[k + i] = 1.0;\n        }\n      }\n\n      for (k = 0; k < n; k++) {\n        W[k] = A[(astep + 1) * k];\n\n        if (k < n - 1) {\n          for (m = k + 1, mv = Math.abs(A[astep * k + m]), i = k + 2; i < n; i++) {\n            val = Math.abs(A[astep * k + i]);\n            if (mv < val) mv = val, m = i;\n          }\n\n          indR[k] = m;\n        }\n\n        if (k > 0) {\n          for (m = 0, mv = Math.abs(A[k]), i = 1; i < k; i++) {\n            val = Math.abs(A[astep * i + k]);\n            if (mv < val) mv = val, m = i;\n          }\n\n          indC[k] = m;\n        }\n      }\n\n      if (n > 1) for (; iters < max_iter; iters++) {\n        // find index (k,l) of pivot p\n        for (k = 0, mv = Math.abs(A[indR[0]]), i = 1; i < n - 1; i++) {\n          val = Math.abs(A[astep * i + indR[i]]);\n          if (mv < val) mv = val, k = i;\n        }\n\n        l = indR[k];\n\n        for (i = 1; i < n; i++) {\n          val = Math.abs(A[astep * indC[i] + i]);\n          if (mv < val) mv = val, k = indC[i], l = i;\n        }\n\n        p = A[astep * k + l];\n        if (Math.abs(p) <= eps) break;\n        y = (W[l] - W[k]) * 0.5;\n        t = Math.abs(y) + hypot(p, y);\n        s = hypot(p, t);\n        c = t / s;\n        s = p / s;\n        t = p / t * p;\n        if (y < 0) s = -s, t = -t;\n        A[astep * k + l] = 0;\n        W[k] -= t;\n        W[l] += t; // rotate rows and columns k and l\n\n        for (i = 0; i < k; i++) {\n          _in = astep * i + k;\n          _in2 = astep * i + l;\n          a0 = A[_in];\n          b0 = A[_in2];\n          A[_in] = a0 * c - b0 * s;\n          A[_in2] = a0 * s + b0 * c;\n        }\n\n        for (i = k + 1; i < l; i++) {\n          _in = astep * k + i;\n          _in2 = astep * i + l;\n          a0 = A[_in];\n          b0 = A[_in2];\n          A[_in] = a0 * c - b0 * s;\n          A[_in2] = a0 * s + b0 * c;\n        }\n\n        i = l + 1;\n        _in = astep * k + i;\n        _in2 = astep * l + i;\n\n        for (; i < n; i++, _in++, _in2++) {\n          a0 = A[_in];\n          b0 = A[_in2];\n          A[_in] = a0 * c - b0 * s;\n          A[_in2] = a0 * s + b0 * c;\n        } // rotate eigenvectors\n\n\n        if (V) {\n          _in = vstep * k;\n          _in2 = vstep * l;\n\n          for (i = 0; i < n; i++, _in++, _in2++) {\n            a0 = V[_in];\n            b0 = V[_in2];\n            V[_in] = a0 * c - b0 * s;\n            V[_in2] = a0 * s + b0 * c;\n          }\n        }\n\n        for (j = 0; j < 2; j++) {\n          idx = j == 0 ? k : l;\n\n          if (idx < n - 1) {\n            for (m = idx + 1, mv = Math.abs(A[astep * idx + m]), i = idx + 2; i < n; i++) {\n              val = Math.abs(A[astep * idx + i]);\n              if (mv < val) mv = val, m = i;\n            }\n\n            indR[idx] = m;\n          }\n\n          if (idx > 0) {\n            for (m = 0, mv = Math.abs(A[idx]), i = 1; i < idx; i++) {\n              val = Math.abs(A[astep * i + idx]);\n              if (mv < val) mv = val, m = i;\n            }\n\n            indC[idx] = m;\n          }\n        }\n      } // sort eigenvalues & eigenvectors\n\n      for (k = 0; k < n - 1; k++) {\n        m = k;\n\n        for (i = k + 1; i < n; i++) {\n          if (W[m] < W[i]) m = i;\n        }\n\n        if (k != m) {\n          swap(W, m, k, mv);\n\n          if (V) {\n            for (i = 0; i < n; i++) {\n              swap(V, vstep * m + i, vstep * k + i, mv);\n            }\n          }\n        }\n      }\n\n      jsfeat.cache.put_buffer(indR_buff);\n      jsfeat.cache.put_buffer(indC_buff);\n    };\n\n    var JacobiSVDImpl = function (At, astep, _W, Vt, vstep, m, n, n1) {\n      var eps = jsfeat.EPSILON * 2.0;\n      var minval = jsfeat.FLT_MIN;\n      var i = 0,\n          j = 0,\n          k = 0,\n          iter = 0,\n          max_iter = Math.max(m, 30);\n      var Ai = 0,\n          Aj = 0,\n          Vi = 0,\n          Vj = 0,\n          changed = 0;\n      var c = 0.0,\n          s = 0.0,\n          t = 0.0;\n      var t0 = 0.0,\n          t1 = 0.0,\n          sd = 0.0,\n          beta = 0.0,\n          gamma = 0.0,\n          delta = 0.0,\n          a = 0.0,\n          p = 0.0,\n          b = 0.0;\n      var seed = 0x1234;\n      var val = 0.0,\n          val0 = 0.0,\n          asum = 0.0;\n      var W_buff = jsfeat.cache.get_buffer(n << 3);\n      var W = W_buff.f64;\n\n      for (; i < n; i++) {\n        for (k = 0, sd = 0; k < m; k++) {\n          t = At[i * astep + k];\n          sd += t * t;\n        }\n\n        W[i] = sd;\n\n        if (Vt) {\n          for (k = 0; k < n; k++) {\n            Vt[i * vstep + k] = 0;\n          }\n\n          Vt[i * vstep + i] = 1;\n        }\n      }\n\n      for (; iter < max_iter; iter++) {\n        changed = 0;\n\n        for (i = 0; i < n - 1; i++) {\n          for (j = i + 1; j < n; j++) {\n            Ai = i * astep | 0, Aj = j * astep | 0;\n            a = W[i], p = 0, b = W[j];\n            k = 2;\n            p += At[Ai] * At[Aj];\n            p += At[Ai + 1] * At[Aj + 1];\n\n            for (; k < m; k++) p += At[Ai + k] * At[Aj + k];\n\n            if (Math.abs(p) <= eps * Math.sqrt(a * b)) continue;\n            p *= 2.0;\n            beta = a - b, gamma = hypot(p, beta);\n\n            if (beta < 0) {\n              delta = (gamma - beta) * 0.5;\n              s = Math.sqrt(delta / gamma);\n              c = p / (gamma * s * 2.0);\n            } else {\n              c = Math.sqrt((gamma + beta) / (gamma * 2.0));\n              s = p / (gamma * c * 2.0);\n            }\n\n            a = 0.0, b = 0.0;\n            k = 2; // unroll\n\n            t0 = c * At[Ai] + s * At[Aj];\n            t1 = -s * At[Ai] + c * At[Aj];\n            At[Ai] = t0;\n            At[Aj] = t1;\n            a += t0 * t0;\n            b += t1 * t1;\n            t0 = c * At[Ai + 1] + s * At[Aj + 1];\n            t1 = -s * At[Ai + 1] + c * At[Aj + 1];\n            At[Ai + 1] = t0;\n            At[Aj + 1] = t1;\n            a += t0 * t0;\n            b += t1 * t1;\n\n            for (; k < m; k++) {\n              t0 = c * At[Ai + k] + s * At[Aj + k];\n              t1 = -s * At[Ai + k] + c * At[Aj + k];\n              At[Ai + k] = t0;\n              At[Aj + k] = t1;\n              a += t0 * t0;\n              b += t1 * t1;\n            }\n\n            W[i] = a;\n            W[j] = b;\n            changed = 1;\n\n            if (Vt) {\n              Vi = i * vstep | 0, Vj = j * vstep | 0;\n              k = 2;\n              t0 = c * Vt[Vi] + s * Vt[Vj];\n              t1 = -s * Vt[Vi] + c * Vt[Vj];\n              Vt[Vi] = t0;\n              Vt[Vj] = t1;\n              t0 = c * Vt[Vi + 1] + s * Vt[Vj + 1];\n              t1 = -s * Vt[Vi + 1] + c * Vt[Vj + 1];\n              Vt[Vi + 1] = t0;\n              Vt[Vj + 1] = t1;\n\n              for (; k < n; k++) {\n                t0 = c * Vt[Vi + k] + s * Vt[Vj + k];\n                t1 = -s * Vt[Vi + k] + c * Vt[Vj + k];\n                Vt[Vi + k] = t0;\n                Vt[Vj + k] = t1;\n              }\n            }\n          }\n        }\n\n        if (changed == 0) break;\n      }\n\n      for (i = 0; i < n; i++) {\n        for (k = 0, sd = 0; k < m; k++) {\n          t = At[i * astep + k];\n          sd += t * t;\n        }\n\n        W[i] = Math.sqrt(sd);\n      }\n\n      for (i = 0; i < n - 1; i++) {\n        j = i;\n\n        for (k = i + 1; k < n; k++) {\n          if (W[j] < W[k]) j = k;\n        }\n\n        if (i != j) {\n          swap(W, i, j, sd);\n\n          if (Vt) {\n            for (k = 0; k < m; k++) {\n              swap(At, i * astep + k, j * astep + k, t);\n            }\n\n            for (k = 0; k < n; k++) {\n              swap(Vt, i * vstep + k, j * vstep + k, t);\n            }\n          }\n        }\n      }\n\n      for (i = 0; i < n; i++) {\n        _W[i] = W[i];\n      }\n\n      if (!Vt) {\n        jsfeat.cache.put_buffer(W_buff);\n        return;\n      }\n\n      for (i = 0; i < n1; i++) {\n        sd = i < n ? W[i] : 0;\n\n        while (sd <= minval) {\n          // if we got a zero singular value, then in order to get the corresponding left singular vector\n          // we generate a random vector, project it to the previously computed left singular vectors,\n          // subtract the projection and normalize the difference.\n          val0 = 1.0 / m;\n\n          for (k = 0; k < m; k++) {\n            seed = seed * 214013 + 2531011;\n            val = (seed >> 16 & 0x7fff & 256) != 0 ? val0 : -val0;\n            At[i * astep + k] = val;\n          }\n\n          for (iter = 0; iter < 2; iter++) {\n            for (j = 0; j < i; j++) {\n              sd = 0;\n\n              for (k = 0; k < m; k++) {\n                sd += At[i * astep + k] * At[j * astep + k];\n              }\n\n              asum = 0.0;\n\n              for (k = 0; k < m; k++) {\n                t = At[i * astep + k] - sd * At[j * astep + k];\n                At[i * astep + k] = t;\n                asum += Math.abs(t);\n              }\n\n              asum = asum ? 1.0 / asum : 0;\n\n              for (k = 0; k < m; k++) {\n                At[i * astep + k] *= asum;\n              }\n            }\n          }\n\n          sd = 0;\n\n          for (k = 0; k < m; k++) {\n            t = At[i * astep + k];\n            sd += t * t;\n          }\n\n          sd = Math.sqrt(sd);\n        }\n\n        s = 1.0 / sd;\n\n        for (k = 0; k < m; k++) {\n          At[i * astep + k] *= s;\n        }\n      }\n\n      jsfeat.cache.put_buffer(W_buff);\n    };\n\n    return {\n      lu_solve: function (A, B) {\n        var i = 0,\n            j = 0,\n            k = 0,\n            p = 1,\n            astep = A.cols;\n        var ad = A.data,\n            bd = B.data;\n        var t, alpha, d, s;\n\n        for (i = 0; i < astep; i++) {\n          k = i;\n\n          for (j = i + 1; j < astep; j++) {\n            if (Math.abs(ad[j * astep + i]) > Math.abs(ad[k * astep + i])) {\n              k = j;\n            }\n          }\n\n          if (Math.abs(ad[k * astep + i]) < jsfeat.EPSILON) {\n            return 0; // FAILED\n          }\n\n          if (k != i) {\n            for (j = i; j < astep; j++) {\n              swap(ad, i * astep + j, k * astep + j, t);\n            }\n\n            swap(bd, i, k, t);\n            p = -p;\n          }\n\n          d = -1.0 / ad[i * astep + i];\n\n          for (j = i + 1; j < astep; j++) {\n            alpha = ad[j * astep + i] * d;\n\n            for (k = i + 1; k < astep; k++) {\n              ad[j * astep + k] += alpha * ad[i * astep + k];\n            }\n\n            bd[j] += alpha * bd[i];\n          }\n\n          ad[i * astep + i] = -d;\n        }\n\n        for (i = astep - 1; i >= 0; i--) {\n          s = bd[i];\n\n          for (k = i + 1; k < astep; k++) {\n            s -= ad[i * astep + k] * bd[k];\n          }\n\n          bd[i] = s * ad[i * astep + i];\n        }\n\n        return 1; // OK\n      },\n      cholesky_solve: function (A, B) {\n        var col = 0,\n            row = 0,\n            col2 = 0,\n            cs = 0,\n            rs = 0,\n            i = 0,\n            j = 0;\n        var size = A.cols;\n        var ad = A.data,\n            bd = B.data;\n        var val, inv_diag;\n\n        for (col = 0; col < size; col++) {\n          inv_diag = 1.0;\n          cs = col * size;\n          rs = cs;\n\n          for (row = col; row < size; row++) {\n            // correct for the parts of cholesky already computed\n            val = ad[rs + col];\n\n            for (col2 = 0; col2 < col; col2++) {\n              val -= ad[col2 * size + col] * ad[rs + col2];\n            }\n\n            if (row == col) {\n              // this is the diagonal element so don't divide\n              ad[rs + col] = val;\n\n              if (val == 0) {\n                return 0;\n              }\n\n              inv_diag = 1.0 / val;\n            } else {\n              // cache the value without division in the upper half\n              ad[cs + row] = val; // divide my the diagonal element for all others\n\n              ad[rs + col] = val * inv_diag;\n            }\n\n            rs = rs + size;\n          }\n        } // first backsub through L\n\n\n        cs = 0;\n\n        for (i = 0; i < size; i++) {\n          val = bd[i];\n\n          for (j = 0; j < i; j++) {\n            val -= ad[cs + j] * bd[j];\n          }\n\n          bd[i] = val;\n          cs = cs + size;\n        } // backsub through diagonal\n\n\n        cs = 0;\n\n        for (i = 0; i < size; i++) {\n          bd[i] /= ad[cs + i];\n          cs = cs + size;\n        } // backsub through L Transpose\n\n\n        i = size - 1;\n\n        for (; i >= 0; i--) {\n          val = bd[i];\n          j = i + 1;\n          cs = j * size;\n\n          for (; j < size; j++) {\n            val -= ad[cs + i] * bd[j];\n            cs = cs + size;\n          }\n\n          bd[i] = val;\n        }\n\n        return 1;\n      },\n      svd_decompose: function (A, W, U, V, options) {\n        if (typeof options === \"undefined\") {\n          options = 0;\n        }\n\n        ;\n        var at = 0,\n            i = 0,\n            j = 0,\n            _m = A.rows,\n            _n = A.cols,\n            m = _m,\n            n = _n;\n        var dt = A.type | jsfeat.C1_t; // we only work with single channel\n\n        if (m < n) {\n          at = 1;\n          i = m;\n          m = n;\n          n = i;\n        }\n\n        var a_buff = jsfeat.cache.get_buffer(m * m << 3);\n        var w_buff = jsfeat.cache.get_buffer(n << 3);\n        var v_buff = jsfeat.cache.get_buffer(n * n << 3);\n        var a_mt = new jsfeat.matrix_t(m, m, dt, a_buff.data);\n        var w_mt = new jsfeat.matrix_t(1, n, dt, w_buff.data);\n        var v_mt = new jsfeat.matrix_t(n, n, dt, v_buff.data);\n\n        if (at == 0) {\n          // transpose\n          jsfeat.matmath.transpose(a_mt, A);\n        } else {\n          for (i = 0; i < _n * _m; i++) {\n            a_mt.data[i] = A.data[i];\n          }\n\n          for (; i < n * m; i++) {\n            a_mt.data[i] = 0;\n          }\n        }\n\n        JacobiSVDImpl(a_mt.data, m, w_mt.data, v_mt.data, n, m, n, m);\n\n        if (W) {\n          for (i = 0; i < n; i++) {\n            W.data[i] = w_mt.data[i];\n          }\n\n          for (; i < _n; i++) {\n            W.data[i] = 0;\n          }\n        }\n\n        if (at == 0) {\n          if (U && options & jsfeat.SVD_U_T) {\n            i = m * m;\n\n            while (--i >= 0) {\n              U.data[i] = a_mt.data[i];\n            }\n          } else if (U) {\n            jsfeat.matmath.transpose(U, a_mt);\n          }\n\n          if (V && options & jsfeat.SVD_V_T) {\n            i = n * n;\n\n            while (--i >= 0) {\n              V.data[i] = v_mt.data[i];\n            }\n          } else if (V) {\n            jsfeat.matmath.transpose(V, v_mt);\n          }\n        } else {\n          if (U && options & jsfeat.SVD_U_T) {\n            i = n * n;\n\n            while (--i >= 0) {\n              U.data[i] = v_mt.data[i];\n            }\n          } else if (U) {\n            jsfeat.matmath.transpose(U, v_mt);\n          }\n\n          if (V && options & jsfeat.SVD_V_T) {\n            i = m * m;\n\n            while (--i >= 0) {\n              V.data[i] = a_mt.data[i];\n            }\n          } else if (V) {\n            jsfeat.matmath.transpose(V, a_mt);\n          }\n        }\n\n        jsfeat.cache.put_buffer(a_buff);\n        jsfeat.cache.put_buffer(w_buff);\n        jsfeat.cache.put_buffer(v_buff);\n      },\n      svd_solve: function (A, X, B) {\n        var i = 0,\n            j = 0,\n            k = 0;\n        var pu = 0,\n            pv = 0;\n        var nrows = A.rows,\n            ncols = A.cols;\n        var sum = 0.0,\n            xsum = 0.0,\n            tol = 0.0;\n        var dt = A.type | jsfeat.C1_t;\n        var u_buff = jsfeat.cache.get_buffer(nrows * nrows << 3);\n        var w_buff = jsfeat.cache.get_buffer(ncols << 3);\n        var v_buff = jsfeat.cache.get_buffer(ncols * ncols << 3);\n        var u_mt = new jsfeat.matrix_t(nrows, nrows, dt, u_buff.data);\n        var w_mt = new jsfeat.matrix_t(1, ncols, dt, w_buff.data);\n        var v_mt = new jsfeat.matrix_t(ncols, ncols, dt, v_buff.data);\n        var bd = B.data,\n            ud = u_mt.data,\n            wd = w_mt.data,\n            vd = v_mt.data;\n        this.svd_decompose(A, w_mt, u_mt, v_mt, 0);\n        tol = jsfeat.EPSILON * wd[0] * ncols;\n\n        for (; i < ncols; i++, pv += ncols) {\n          xsum = 0.0;\n\n          for (j = 0; j < ncols; j++) {\n            if (wd[j] > tol) {\n              for (k = 0, sum = 0.0, pu = 0; k < nrows; k++, pu += ncols) {\n                sum += ud[pu + j] * bd[k];\n              }\n\n              xsum += sum * vd[pv + j] / wd[j];\n            }\n          }\n\n          X.data[i] = xsum;\n        }\n\n        jsfeat.cache.put_buffer(u_buff);\n        jsfeat.cache.put_buffer(w_buff);\n        jsfeat.cache.put_buffer(v_buff);\n      },\n      svd_invert: function (Ai, A) {\n        var i = 0,\n            j = 0,\n            k = 0;\n        var pu = 0,\n            pv = 0,\n            pa = 0;\n        var nrows = A.rows,\n            ncols = A.cols;\n        var sum = 0.0,\n            tol = 0.0;\n        var dt = A.type | jsfeat.C1_t;\n        var u_buff = jsfeat.cache.get_buffer(nrows * nrows << 3);\n        var w_buff = jsfeat.cache.get_buffer(ncols << 3);\n        var v_buff = jsfeat.cache.get_buffer(ncols * ncols << 3);\n        var u_mt = new jsfeat.matrix_t(nrows, nrows, dt, u_buff.data);\n        var w_mt = new jsfeat.matrix_t(1, ncols, dt, w_buff.data);\n        var v_mt = new jsfeat.matrix_t(ncols, ncols, dt, v_buff.data);\n        var id = Ai.data,\n            ud = u_mt.data,\n            wd = w_mt.data,\n            vd = v_mt.data;\n        this.svd_decompose(A, w_mt, u_mt, v_mt, 0);\n        tol = jsfeat.EPSILON * wd[0] * ncols;\n\n        for (; i < ncols; i++, pv += ncols) {\n          for (j = 0, pu = 0; j < nrows; j++, pa++) {\n            for (k = 0, sum = 0.0; k < ncols; k++, pu++) {\n              if (wd[k] > tol) sum += vd[pv + k] * ud[pu] / wd[k];\n            }\n\n            id[pa] = sum;\n          }\n        }\n\n        jsfeat.cache.put_buffer(u_buff);\n        jsfeat.cache.put_buffer(w_buff);\n        jsfeat.cache.put_buffer(v_buff);\n      },\n      eigenVV: function (A, vects, vals) {\n        var n = A.cols,\n            i = n * n;\n        var dt = A.type | jsfeat.C1_t;\n        var a_buff = jsfeat.cache.get_buffer(n * n << 3);\n        var w_buff = jsfeat.cache.get_buffer(n << 3);\n        var a_mt = new jsfeat.matrix_t(n, n, dt, a_buff.data);\n        var w_mt = new jsfeat.matrix_t(1, n, dt, w_buff.data);\n\n        while (--i >= 0) {\n          a_mt.data[i] = A.data[i];\n        }\n\n        JacobiImpl(a_mt.data, n, w_mt.data, vects ? vects.data : null, n, n);\n\n        if (vals) {\n          while (--n >= 0) {\n            vals.data[n] = w_mt.data[n];\n          }\n        }\n\n        jsfeat.cache.put_buffer(a_buff);\n        jsfeat.cache.put_buffer(w_buff);\n      }\n    };\n  }();\n\n  global.linalg = linalg;\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n */\n\n\n(function (global) {\n  \"use strict\"; //\n\n  var motion_model = function () {\n    var sqr = function (x) {\n      return x * x;\n    }; // does isotropic normalization\n\n\n    var iso_normalize_points = function (from, to, T0, T1, count) {\n      var i = 0;\n      var cx0 = 0.0,\n          cy0 = 0.0,\n          d0 = 0.0,\n          s0 = 0.0;\n      var cx1 = 0.0,\n          cy1 = 0.0,\n          d1 = 0.0,\n          s1 = 0.0;\n      var dx = 0.0,\n          dy = 0.0;\n\n      for (; i < count; ++i) {\n        cx0 += from[i].x;\n        cy0 += from[i].y;\n        cx1 += to[i].x;\n        cy1 += to[i].y;\n      }\n\n      cx0 /= count;\n      cy0 /= count;\n      cx1 /= count;\n      cy1 /= count;\n\n      for (i = 0; i < count; ++i) {\n        dx = from[i].x - cx0;\n        dy = from[i].y - cy0;\n        d0 += Math.sqrt(dx * dx + dy * dy);\n        dx = to[i].x - cx1;\n        dy = to[i].y - cy1;\n        d1 += Math.sqrt(dx * dx + dy * dy);\n      }\n\n      d0 /= count;\n      d1 /= count;\n      s0 = Math.SQRT2 / d0;\n      s1 = Math.SQRT2 / d1;\n      T0[0] = T0[4] = s0;\n      T0[2] = -cx0 * s0;\n      T0[5] = -cy0 * s0;\n      T0[1] = T0[3] = T0[6] = T0[7] = 0.0;\n      T0[8] = 1.0;\n      T1[0] = T1[4] = s1;\n      T1[2] = -cx1 * s1;\n      T1[5] = -cy1 * s1;\n      T1[1] = T1[3] = T1[6] = T1[7] = 0.0;\n      T1[8] = 1.0;\n    };\n\n    var have_collinear_points = function (points, count) {\n      var j = 0,\n          k = 0,\n          i = count - 1 | 0;\n      var dx1 = 0.0,\n          dy1 = 0.0,\n          dx2 = 0.0,\n          dy2 = 0.0; // check that the i-th selected point does not belong\n      // to a line connecting some previously selected points\n\n      for (; j < i; ++j) {\n        dx1 = points[j].x - points[i].x;\n        dy1 = points[j].y - points[i].y;\n\n        for (k = 0; k < j; ++k) {\n          dx2 = points[k].x - points[i].x;\n          dy2 = points[k].y - points[i].y;\n          if (Math.abs(dx2 * dy1 - dy2 * dx1) <= jsfeat.EPSILON * (Math.abs(dx1) + Math.abs(dy1) + Math.abs(dx2) + Math.abs(dy2))) return true;\n        }\n      }\n\n      return false;\n    };\n\n    var T0 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t | jsfeat.C1_t);\n    var T1 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t | jsfeat.C1_t);\n    var AtA = new jsfeat.matrix_t(6, 6, jsfeat.F32_t | jsfeat.C1_t);\n    var AtB = new jsfeat.matrix_t(6, 1, jsfeat.F32_t | jsfeat.C1_t);\n\n    var affine2d = function () {\n      function affine2d() {// empty constructor\n      }\n\n      affine2d.prototype.run = function (from, to, model, count) {\n        var i = 0,\n            j = 0;\n        var dt = model.type | jsfeat.C1_t;\n        var md = model.data,\n            t0d = T0.data,\n            t1d = T1.data;\n        var pt0,\n            pt1,\n            px = 0.0,\n            py = 0.0;\n        iso_normalize_points(from, to, t0d, t1d, count);\n        var a_buff = jsfeat.cache.get_buffer(2 * count * 6 << 3);\n        var b_buff = jsfeat.cache.get_buffer(2 * count << 3);\n        var a_mt = new jsfeat.matrix_t(6, 2 * count, dt, a_buff.data);\n        var b_mt = new jsfeat.matrix_t(1, 2 * count, dt, b_buff.data);\n        var ad = a_mt.data,\n            bd = b_mt.data;\n\n        for (; i < count; ++i) {\n          pt0 = from[i];\n          pt1 = to[i];\n          px = t0d[0] * pt0.x + t0d[1] * pt0.y + t0d[2];\n          py = t0d[3] * pt0.x + t0d[4] * pt0.y + t0d[5];\n          j = i * 2 * 6;\n          ad[j] = px, ad[j + 1] = py, ad[j + 2] = 1.0, ad[j + 3] = 0.0, ad[j + 4] = 0.0, ad[j + 5] = 0.0;\n          j += 6;\n          ad[j] = 0.0, ad[j + 1] = 0.0, ad[j + 2] = 0.0, ad[j + 3] = px, ad[j + 4] = py, ad[j + 5] = 1.0;\n          bd[i << 1] = t1d[0] * pt1.x + t1d[1] * pt1.y + t1d[2];\n          bd[(i << 1) + 1] = t1d[3] * pt1.x + t1d[4] * pt1.y + t1d[5];\n        }\n\n        jsfeat.matmath.multiply_AtA(AtA, a_mt);\n        jsfeat.matmath.multiply_AtB(AtB, a_mt, b_mt);\n        jsfeat.linalg.lu_solve(AtA, AtB);\n        md[0] = AtB.data[0], md[1] = AtB.data[1], md[2] = AtB.data[2];\n        md[3] = AtB.data[3], md[4] = AtB.data[4], md[5] = AtB.data[5];\n        md[6] = 0.0, md[7] = 0.0, md[8] = 1.0; // fill last row\n        // denormalize\n\n        jsfeat.matmath.invert_3x3(T1, T1);\n        jsfeat.matmath.multiply_3x3(model, T1, model);\n        jsfeat.matmath.multiply_3x3(model, model, T0); // free buffer\n\n        jsfeat.cache.put_buffer(a_buff);\n        jsfeat.cache.put_buffer(b_buff);\n        return 1;\n      };\n\n      affine2d.prototype.error = function (from, to, model, err, count) {\n        var i = 0;\n        var pt0, pt1;\n        var m = model.data;\n\n        for (; i < count; ++i) {\n          pt0 = from[i];\n          pt1 = to[i];\n          err[i] = sqr(pt1.x - m[0] * pt0.x - m[1] * pt0.y - m[2]) + sqr(pt1.y - m[3] * pt0.x - m[4] * pt0.y - m[5]);\n        }\n      };\n\n      affine2d.prototype.check_subset = function (from, to, count) {\n        return true; // all good\n      };\n\n      return affine2d;\n    }();\n\n    var mLtL = new jsfeat.matrix_t(9, 9, jsfeat.F32_t | jsfeat.C1_t);\n    var Evec = new jsfeat.matrix_t(9, 9, jsfeat.F32_t | jsfeat.C1_t);\n\n    var homography2d = function () {\n      function homography2d() {// empty constructor\n        //this.T0 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n        //this.T1 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n        //this.mLtL = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\n        //this.Evec = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\n      }\n\n      homography2d.prototype.run = function (from, to, model, count) {\n        var i = 0,\n            j = 0;\n        var md = model.data,\n            t0d = T0.data,\n            t1d = T1.data;\n        var LtL = mLtL.data,\n            evd = Evec.data;\n        var x = 0.0,\n            y = 0.0,\n            X = 0.0,\n            Y = 0.0; // norm\n\n        var smx = 0.0,\n            smy = 0.0,\n            cmx = 0.0,\n            cmy = 0.0,\n            sMx = 0.0,\n            sMy = 0.0,\n            cMx = 0.0,\n            cMy = 0.0;\n\n        for (; i < count; ++i) {\n          cmx += to[i].x;\n          cmy += to[i].y;\n          cMx += from[i].x;\n          cMy += from[i].y;\n        }\n\n        cmx /= count;\n        cmy /= count;\n        cMx /= count;\n        cMy /= count;\n\n        for (i = 0; i < count; ++i) {\n          smx += Math.abs(to[i].x - cmx);\n          smy += Math.abs(to[i].y - cmy);\n          sMx += Math.abs(from[i].x - cMx);\n          sMy += Math.abs(from[i].y - cMy);\n        }\n\n        if (Math.abs(smx) < jsfeat.EPSILON || Math.abs(smy) < jsfeat.EPSILON || Math.abs(sMx) < jsfeat.EPSILON || Math.abs(sMy) < jsfeat.EPSILON) return 0;\n        smx = count / smx;\n        smy = count / smy;\n        sMx = count / sMx;\n        sMy = count / sMy;\n        t0d[0] = sMx;\n        t0d[1] = 0;\n        t0d[2] = -cMx * sMx;\n        t0d[3] = 0;\n        t0d[4] = sMy;\n        t0d[5] = -cMy * sMy;\n        t0d[6] = 0;\n        t0d[7] = 0;\n        t0d[8] = 1;\n        t1d[0] = 1.0 / smx;\n        t1d[1] = 0;\n        t1d[2] = cmx;\n        t1d[3] = 0;\n        t1d[4] = 1.0 / smy;\n        t1d[5] = cmy;\n        t1d[6] = 0;\n        t1d[7] = 0;\n        t1d[8] = 1; //\n        // construct system\n\n        i = 81;\n\n        while (--i >= 0) {\n          LtL[i] = 0.0;\n        }\n\n        for (i = 0; i < count; ++i) {\n          x = (to[i].x - cmx) * smx;\n          y = (to[i].y - cmy) * smy;\n          X = (from[i].x - cMx) * sMx;\n          Y = (from[i].y - cMy) * sMy;\n          LtL[0] += X * X;\n          LtL[1] += X * Y;\n          LtL[2] += X;\n          LtL[6] += X * -x * X;\n          LtL[7] += X * -x * Y;\n          LtL[8] += X * -x;\n          LtL[10] += Y * Y;\n          LtL[11] += Y;\n          LtL[15] += Y * -x * X;\n          LtL[16] += Y * -x * Y;\n          LtL[17] += Y * -x;\n          LtL[20] += 1.0;\n          LtL[24] += -x * X;\n          LtL[25] += -x * Y;\n          LtL[26] += -x;\n          LtL[30] += X * X;\n          LtL[31] += X * Y;\n          LtL[32] += X;\n          LtL[33] += X * -y * X;\n          LtL[34] += X * -y * Y;\n          LtL[35] += X * -y;\n          LtL[40] += Y * Y;\n          LtL[41] += Y;\n          LtL[42] += Y * -y * X;\n          LtL[43] += Y * -y * Y;\n          LtL[44] += Y * -y;\n          LtL[50] += 1.0;\n          LtL[51] += -y * X;\n          LtL[52] += -y * Y;\n          LtL[53] += -y;\n          LtL[60] += -x * X * -x * X + -y * X * -y * X;\n          LtL[61] += -x * X * -x * Y + -y * X * -y * Y;\n          LtL[62] += -x * X * -x + -y * X * -y;\n          LtL[70] += -x * Y * -x * Y + -y * Y * -y * Y;\n          LtL[71] += -x * Y * -x + -y * Y * -y;\n          LtL[80] += -x * -x + -y * -y;\n        } //\n        // symmetry\n\n\n        for (i = 0; i < 9; ++i) {\n          for (j = 0; j < i; ++j) LtL[i * 9 + j] = LtL[j * 9 + i];\n        }\n\n        jsfeat.linalg.eigenVV(mLtL, Evec);\n        md[0] = evd[72], md[1] = evd[73], md[2] = evd[74];\n        md[3] = evd[75], md[4] = evd[76], md[5] = evd[77];\n        md[6] = evd[78], md[7] = evd[79], md[8] = evd[80]; // denormalize\n\n        jsfeat.matmath.multiply_3x3(model, T1, model);\n        jsfeat.matmath.multiply_3x3(model, model, T0); // set bottom right to 1.0\n\n        x = 1.0 / md[8];\n        md[0] *= x;\n        md[1] *= x;\n        md[2] *= x;\n        md[3] *= x;\n        md[4] *= x;\n        md[5] *= x;\n        md[6] *= x;\n        md[7] *= x;\n        md[8] = 1.0;\n        return 1;\n      };\n\n      homography2d.prototype.error = function (from, to, model, err, count) {\n        var i = 0;\n        var pt0,\n            pt1,\n            ww = 0.0,\n            dx = 0.0,\n            dy = 0.0;\n        var m = model.data;\n\n        for (; i < count; ++i) {\n          pt0 = from[i];\n          pt1 = to[i];\n          ww = 1.0 / (m[6] * pt0.x + m[7] * pt0.y + 1.0);\n          dx = (m[0] * pt0.x + m[1] * pt0.y + m[2]) * ww - pt1.x;\n          dy = (m[3] * pt0.x + m[4] * pt0.y + m[5]) * ww - pt1.y;\n          err[i] = dx * dx + dy * dy;\n        }\n      };\n\n      homography2d.prototype.check_subset = function (from, to, count) {\n        // seems to reject good subsets actually\n        //if( have_collinear_points(from, count) || have_collinear_points(to, count) ) {\n        //return false;\n        //}\n        if (count == 4) {\n          var negative = 0;\n          var fp0 = from[0],\n              fp1 = from[1],\n              fp2 = from[2],\n              fp3 = from[3];\n          var tp0 = to[0],\n              tp1 = to[1],\n              tp2 = to[2],\n              tp3 = to[3]; // set1\n\n          var A11 = fp0.x,\n              A12 = fp0.y,\n              A13 = 1.0;\n          var A21 = fp1.x,\n              A22 = fp1.y,\n              A23 = 1.0;\n          var A31 = fp2.x,\n              A32 = fp2.y,\n              A33 = 1.0;\n          var B11 = tp0.x,\n              B12 = tp0.y,\n              B13 = 1.0;\n          var B21 = tp1.x,\n              B22 = tp1.y,\n              B23 = 1.0;\n          var B31 = tp2.x,\n              B32 = tp2.y,\n              B33 = 1.0;\n          var detA = jsfeat.matmath.determinant_3x3(A11, A12, A13, A21, A22, A23, A31, A32, A33);\n          var detB = jsfeat.matmath.determinant_3x3(B11, B12, B13, B21, B22, B23, B31, B32, B33);\n          if (detA * detB < 0) negative++; // set2\n\n          A11 = fp1.x, A12 = fp1.y;\n          A21 = fp2.x, A22 = fp2.y;\n          A31 = fp3.x, A32 = fp3.y;\n          B11 = tp1.x, B12 = tp1.y;\n          B21 = tp2.x, B22 = tp2.y;\n          B31 = tp3.x, B32 = tp3.y;\n          detA = jsfeat.matmath.determinant_3x3(A11, A12, A13, A21, A22, A23, A31, A32, A33);\n          detB = jsfeat.matmath.determinant_3x3(B11, B12, B13, B21, B22, B23, B31, B32, B33);\n          if (detA * detB < 0) negative++; // set3\n\n          A11 = fp0.x, A12 = fp0.y;\n          A21 = fp2.x, A22 = fp2.y;\n          A31 = fp3.x, A32 = fp3.y;\n          B11 = tp0.x, B12 = tp0.y;\n          B21 = tp2.x, B22 = tp2.y;\n          B31 = tp3.x, B32 = tp3.y;\n          detA = jsfeat.matmath.determinant_3x3(A11, A12, A13, A21, A22, A23, A31, A32, A33);\n          detB = jsfeat.matmath.determinant_3x3(B11, B12, B13, B21, B22, B23, B31, B32, B33);\n          if (detA * detB < 0) negative++; // set4\n\n          A11 = fp0.x, A12 = fp0.y;\n          A21 = fp1.x, A22 = fp1.y;\n          A31 = fp3.x, A32 = fp3.y;\n          B11 = tp0.x, B12 = tp0.y;\n          B21 = tp1.x, B22 = tp1.y;\n          B31 = tp3.x, B32 = tp3.y;\n          detA = jsfeat.matmath.determinant_3x3(A11, A12, A13, A21, A22, A23, A31, A32, A33);\n          detB = jsfeat.matmath.determinant_3x3(B11, B12, B13, B21, B22, B23, B31, B32, B33);\n          if (detA * detB < 0) negative++;\n\n          if (negative != 0 && negative != 4) {\n            return false;\n          }\n        }\n\n        return true; // all good\n      };\n\n      return homography2d;\n    }();\n\n    return {\n      affine2d: affine2d,\n      homography2d: homography2d\n    };\n  }();\n\n  var ransac_params_t = function () {\n    function ransac_params_t(size, thresh, eps, prob) {\n      if (typeof size === \"undefined\") {\n        size = 0;\n      }\n\n      if (typeof thresh === \"undefined\") {\n        thresh = 0.5;\n      }\n\n      if (typeof eps === \"undefined\") {\n        eps = 0.5;\n      }\n\n      if (typeof prob === \"undefined\") {\n        prob = 0.99;\n      }\n\n      this.size = size;\n      this.thresh = thresh;\n      this.eps = eps;\n      this.prob = prob;\n    }\n\n    ;\n\n    ransac_params_t.prototype.update_iters = function (_eps, max_iters) {\n      var num = Math.log(1 - this.prob);\n      var denom = Math.log(1 - Math.pow(1 - _eps, this.size));\n      return (denom >= 0 || -num >= max_iters * -denom ? max_iters : Math.round(num / denom)) | 0;\n    };\n\n    return ransac_params_t;\n  }();\n\n  var motion_estimator = function () {\n    var get_subset = function (kernel, from, to, need_cnt, max_cnt, from_sub, to_sub) {\n      var max_try = 1000;\n      var indices = [];\n      var i = 0,\n          j = 0,\n          ssiter = 0,\n          idx_i = 0,\n          ok = false;\n\n      for (; ssiter < max_try; ++ssiter) {\n        i = 0;\n\n        for (; i < need_cnt && ssiter < max_try;) {\n          ok = false;\n          idx_i = 0;\n\n          while (!ok) {\n            ok = true;\n            idx_i = indices[i] = Math.floor(Math.random() * max_cnt) | 0;\n\n            for (j = 0; j < i; ++j) {\n              if (idx_i == indices[j]) {\n                ok = false;\n                break;\n              }\n            }\n          }\n\n          from_sub[i] = from[idx_i];\n          to_sub[i] = to[idx_i];\n\n          if (!kernel.check_subset(from_sub, to_sub, i + 1)) {\n            ssiter++;\n            continue;\n          }\n\n          ++i;\n        }\n\n        break;\n      }\n\n      return i == need_cnt && ssiter < max_try;\n    };\n\n    var find_inliers = function (kernel, model, from, to, count, thresh, err, mask) {\n      var numinliers = 0,\n          i = 0,\n          f = 0;\n      var t = thresh * thresh;\n      kernel.error(from, to, model, err, count);\n\n      for (; i < count; ++i) {\n        f = err[i] <= t;\n        mask[i] = f;\n        numinliers += f;\n      }\n\n      return numinliers;\n    };\n\n    return {\n      ransac: function (params, kernel, from, to, count, model, mask, max_iters) {\n        if (typeof max_iters === \"undefined\") {\n          max_iters = 1000;\n        }\n\n        if (count < params.size) return false;\n        var model_points = params.size;\n        var niters = max_iters,\n            iter = 0;\n        var result = false;\n        var subset0 = [];\n        var subset1 = [];\n        var found = false;\n        var mc = model.cols,\n            mr = model.rows;\n        var dt = model.type | jsfeat.C1_t;\n        var m_buff = jsfeat.cache.get_buffer(mc * mr << 3);\n        var ms_buff = jsfeat.cache.get_buffer(count);\n        var err_buff = jsfeat.cache.get_buffer(count << 2);\n        var M = new jsfeat.matrix_t(mc, mr, dt, m_buff.data);\n        var curr_mask = new jsfeat.matrix_t(count, 1, jsfeat.U8C1_t, ms_buff.data);\n        var inliers_max = -1,\n            numinliers = 0;\n        var nmodels = 0;\n        var err = err_buff.f32; // special case\n\n        if (count == model_points) {\n          if (kernel.run(from, to, M, count) <= 0) {\n            jsfeat.cache.put_buffer(m_buff);\n            jsfeat.cache.put_buffer(ms_buff);\n            jsfeat.cache.put_buffer(err_buff);\n            return false;\n          }\n\n          M.copy_to(model);\n\n          if (mask) {\n            while (--count >= 0) {\n              mask.data[count] = 1;\n            }\n          }\n\n          jsfeat.cache.put_buffer(m_buff);\n          jsfeat.cache.put_buffer(ms_buff);\n          jsfeat.cache.put_buffer(err_buff);\n          return true;\n        }\n\n        for (; iter < niters; ++iter) {\n          // generate subset\n          found = get_subset(kernel, from, to, model_points, count, subset0, subset1);\n\n          if (!found) {\n            if (iter == 0) {\n              jsfeat.cache.put_buffer(m_buff);\n              jsfeat.cache.put_buffer(ms_buff);\n              jsfeat.cache.put_buffer(err_buff);\n              return false;\n            }\n\n            break;\n          }\n\n          nmodels = kernel.run(subset0, subset1, M, model_points);\n          if (nmodels <= 0) continue; // TODO handle multimodel output\n\n          numinliers = find_inliers(kernel, M, from, to, count, params.thresh, err, curr_mask.data);\n\n          if (numinliers > Math.max(inliers_max, model_points - 1)) {\n            M.copy_to(model);\n            inliers_max = numinliers;\n            if (mask) curr_mask.copy_to(mask);\n            niters = params.update_iters((count - numinliers) / count, niters);\n            result = true;\n          }\n        }\n\n        jsfeat.cache.put_buffer(m_buff);\n        jsfeat.cache.put_buffer(ms_buff);\n        jsfeat.cache.put_buffer(err_buff);\n        return result;\n      },\n      lmeds: function (params, kernel, from, to, count, model, mask, max_iters) {\n        if (typeof max_iters === \"undefined\") {\n          max_iters = 1000;\n        }\n\n        if (count < params.size) return false;\n        var model_points = params.size;\n        var niters = max_iters,\n            iter = 0;\n        var result = false;\n        var subset0 = [];\n        var subset1 = [];\n        var found = false;\n        var mc = model.cols,\n            mr = model.rows;\n        var dt = model.type | jsfeat.C1_t;\n        var m_buff = jsfeat.cache.get_buffer(mc * mr << 3);\n        var ms_buff = jsfeat.cache.get_buffer(count);\n        var err_buff = jsfeat.cache.get_buffer(count << 2);\n        var M = new jsfeat.matrix_t(mc, mr, dt, m_buff.data);\n        var curr_mask = new jsfeat.matrix_t(count, 1, jsfeat.U8_t | jsfeat.C1_t, ms_buff.data);\n        var numinliers = 0;\n        var nmodels = 0;\n        var err = err_buff.f32;\n        var min_median = 1000000000.0,\n            sigma = 0.0,\n            median = 0.0;\n        params.eps = 0.45;\n        niters = params.update_iters(params.eps, niters); // special case\n\n        if (count == model_points) {\n          if (kernel.run(from, to, M, count) <= 0) {\n            jsfeat.cache.put_buffer(m_buff);\n            jsfeat.cache.put_buffer(ms_buff);\n            jsfeat.cache.put_buffer(err_buff);\n            return false;\n          }\n\n          M.copy_to(model);\n\n          if (mask) {\n            while (--count >= 0) {\n              mask.data[count] = 1;\n            }\n          }\n\n          jsfeat.cache.put_buffer(m_buff);\n          jsfeat.cache.put_buffer(ms_buff);\n          jsfeat.cache.put_buffer(err_buff);\n          return true;\n        }\n\n        for (; iter < niters; ++iter) {\n          // generate subset\n          found = get_subset(kernel, from, to, model_points, count, subset0, subset1);\n\n          if (!found) {\n            if (iter == 0) {\n              jsfeat.cache.put_buffer(m_buff);\n              jsfeat.cache.put_buffer(ms_buff);\n              jsfeat.cache.put_buffer(err_buff);\n              return false;\n            }\n\n            break;\n          }\n\n          nmodels = kernel.run(subset0, subset1, M, model_points);\n          if (nmodels <= 0) continue; // TODO handle multimodel output\n\n          kernel.error(from, to, M, err, count);\n          median = jsfeat.math.median(err, 0, count - 1);\n\n          if (median < min_median) {\n            min_median = median;\n            M.copy_to(model);\n            result = true;\n          }\n        }\n\n        if (result) {\n          sigma = 2.5 * 1.4826 * (1 + 5.0 / (count - model_points)) * Math.sqrt(min_median);\n          sigma = Math.max(sigma, 0.001);\n          numinliers = find_inliers(kernel, model, from, to, count, sigma, err, curr_mask.data);\n          if (mask) curr_mask.copy_to(mask);\n          result = numinliers >= model_points;\n        }\n\n        jsfeat.cache.put_buffer(m_buff);\n        jsfeat.cache.put_buffer(ms_buff);\n        jsfeat.cache.put_buffer(err_buff);\n        return result;\n      }\n    };\n  }();\n\n  global.ransac_params_t = ransac_params_t;\n  global.motion_model = motion_model;\n  global.motion_estimator = motion_estimator;\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n */\n\n\n(function (global) {\n  \"use strict\"; //\n\n  var imgproc = function () {\n    var _resample_u8 = function (src, dst, nw, nh) {\n      var xofs_count = 0;\n      var ch = src.channel,\n          w = src.cols,\n          h = src.rows;\n      var src_d = src.data,\n          dst_d = dst.data;\n      var scale_x = w / nw,\n          scale_y = h / nh;\n      var inv_scale_256 = scale_x * scale_y * 0x10000 | 0;\n      var dx = 0,\n          dy = 0,\n          sx = 0,\n          sy = 0,\n          sx1 = 0,\n          sx2 = 0,\n          i = 0,\n          k = 0,\n          fsx1 = 0.0,\n          fsx2 = 0.0;\n      var a = 0,\n          b = 0,\n          dxn = 0,\n          alpha = 0,\n          beta = 0,\n          beta1 = 0;\n      var buf_node = jsfeat.cache.get_buffer(nw * ch << 2);\n      var sum_node = jsfeat.cache.get_buffer(nw * ch << 2);\n      var xofs_node = jsfeat.cache.get_buffer(w * 2 * 3 << 2);\n      var buf = buf_node.i32;\n      var sum = sum_node.i32;\n      var xofs = xofs_node.i32;\n\n      for (; dx < nw; dx++) {\n        fsx1 = dx * scale_x, fsx2 = fsx1 + scale_x;\n        sx1 = fsx1 + 1.0 - 1e-6 | 0, sx2 = fsx2 | 0;\n        sx1 = Math.min(sx1, w - 1);\n        sx2 = Math.min(sx2, w - 1);\n\n        if (sx1 > fsx1) {\n          xofs[k++] = dx * ch | 0;\n          xofs[k++] = (sx1 - 1) * ch | 0;\n          xofs[k++] = (sx1 - fsx1) * 0x100 | 0;\n          xofs_count++;\n        }\n\n        for (sx = sx1; sx < sx2; sx++) {\n          xofs_count++;\n          xofs[k++] = dx * ch | 0;\n          xofs[k++] = sx * ch | 0;\n          xofs[k++] = 256;\n        }\n\n        if (fsx2 - sx2 > 1e-3) {\n          xofs_count++;\n          xofs[k++] = dx * ch | 0;\n          xofs[k++] = sx2 * ch | 0;\n          xofs[k++] = (fsx2 - sx2) * 256 | 0;\n        }\n      }\n\n      for (dx = 0; dx < nw * ch; dx++) {\n        buf[dx] = sum[dx] = 0;\n      }\n\n      dy = 0;\n\n      for (sy = 0; sy < h; sy++) {\n        a = w * sy;\n\n        for (k = 0; k < xofs_count; k++) {\n          dxn = xofs[k * 3];\n          sx1 = xofs[k * 3 + 1];\n          alpha = xofs[k * 3 + 2];\n\n          for (i = 0; i < ch; i++) {\n            buf[dxn + i] += src_d[a + sx1 + i] * alpha;\n          }\n        }\n\n        if ((dy + 1) * scale_y <= sy + 1 || sy == h - 1) {\n          beta = Math.max(sy + 1 - (dy + 1) * scale_y, 0.0) * 256 | 0;\n          beta1 = 256 - beta;\n          b = nw * dy;\n\n          if (beta <= 0) {\n            for (dx = 0; dx < nw * ch; dx++) {\n              dst_d[b + dx] = Math.min(Math.max((sum[dx] + buf[dx] * 256) / inv_scale_256, 0), 255);\n              sum[dx] = buf[dx] = 0;\n            }\n          } else {\n            for (dx = 0; dx < nw * ch; dx++) {\n              dst_d[b + dx] = Math.min(Math.max((sum[dx] + buf[dx] * beta1) / inv_scale_256, 0), 255);\n              sum[dx] = buf[dx] * beta;\n              buf[dx] = 0;\n            }\n          }\n\n          dy++;\n        } else {\n          for (dx = 0; dx < nw * ch; dx++) {\n            sum[dx] += buf[dx] * 256;\n            buf[dx] = 0;\n          }\n        }\n      }\n\n      jsfeat.cache.put_buffer(sum_node);\n      jsfeat.cache.put_buffer(buf_node);\n      jsfeat.cache.put_buffer(xofs_node);\n    };\n\n    var _resample = function (src, dst, nw, nh) {\n      var xofs_count = 0;\n      var ch = src.channel,\n          w = src.cols,\n          h = src.rows;\n      var src_d = src.data,\n          dst_d = dst.data;\n      var scale_x = w / nw,\n          scale_y = h / nh;\n      var scale = 1.0 / (scale_x * scale_y);\n      var dx = 0,\n          dy = 0,\n          sx = 0,\n          sy = 0,\n          sx1 = 0,\n          sx2 = 0,\n          i = 0,\n          k = 0,\n          fsx1 = 0.0,\n          fsx2 = 0.0;\n      var a = 0,\n          b = 0,\n          dxn = 0,\n          alpha = 0.0,\n          beta = 0.0,\n          beta1 = 0.0;\n      var buf_node = jsfeat.cache.get_buffer(nw * ch << 2);\n      var sum_node = jsfeat.cache.get_buffer(nw * ch << 2);\n      var xofs_node = jsfeat.cache.get_buffer(w * 2 * 3 << 2);\n      var buf = buf_node.f32;\n      var sum = sum_node.f32;\n      var xofs = xofs_node.f32;\n\n      for (; dx < nw; dx++) {\n        fsx1 = dx * scale_x, fsx2 = fsx1 + scale_x;\n        sx1 = fsx1 + 1.0 - 1e-6 | 0, sx2 = fsx2 | 0;\n        sx1 = Math.min(sx1, w - 1);\n        sx2 = Math.min(sx2, w - 1);\n\n        if (sx1 > fsx1) {\n          xofs_count++;\n          xofs[k++] = (sx1 - 1) * ch | 0;\n          xofs[k++] = dx * ch | 0;\n          xofs[k++] = (sx1 - fsx1) * scale;\n        }\n\n        for (sx = sx1; sx < sx2; sx++) {\n          xofs_count++;\n          xofs[k++] = sx * ch | 0;\n          xofs[k++] = dx * ch | 0;\n          xofs[k++] = scale;\n        }\n\n        if (fsx2 - sx2 > 1e-3) {\n          xofs_count++;\n          xofs[k++] = sx2 * ch | 0;\n          xofs[k++] = dx * ch | 0;\n          xofs[k++] = (fsx2 - sx2) * scale;\n        }\n      }\n\n      for (dx = 0; dx < nw * ch; dx++) {\n        buf[dx] = sum[dx] = 0;\n      }\n\n      dy = 0;\n\n      for (sy = 0; sy < h; sy++) {\n        a = w * sy;\n\n        for (k = 0; k < xofs_count; k++) {\n          sx1 = xofs[k * 3] | 0;\n          dxn = xofs[k * 3 + 1] | 0;\n          alpha = xofs[k * 3 + 2];\n\n          for (i = 0; i < ch; i++) {\n            buf[dxn + i] += src_d[a + sx1 + i] * alpha;\n          }\n        }\n\n        if ((dy + 1) * scale_y <= sy + 1 || sy == h - 1) {\n          beta = Math.max(sy + 1 - (dy + 1) * scale_y, 0.0);\n          beta1 = 1.0 - beta;\n          b = nw * dy;\n\n          if (Math.abs(beta) < 1e-3) {\n            for (dx = 0; dx < nw * ch; dx++) {\n              dst_d[b + dx] = sum[dx] + buf[dx];\n              sum[dx] = buf[dx] = 0;\n            }\n          } else {\n            for (dx = 0; dx < nw * ch; dx++) {\n              dst_d[b + dx] = sum[dx] + buf[dx] * beta1;\n              sum[dx] = buf[dx] * beta;\n              buf[dx] = 0;\n            }\n          }\n\n          dy++;\n        } else {\n          for (dx = 0; dx < nw * ch; dx++) {\n            sum[dx] += buf[dx];\n            buf[dx] = 0;\n          }\n        }\n      }\n\n      jsfeat.cache.put_buffer(sum_node);\n      jsfeat.cache.put_buffer(buf_node);\n      jsfeat.cache.put_buffer(xofs_node);\n    };\n\n    var _convol_u8 = function (buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel) {\n      var i = 0,\n          j = 0,\n          k = 0,\n          sp = 0,\n          dp = 0,\n          sum = 0,\n          sum1 = 0,\n          sum2 = 0,\n          sum3 = 0,\n          f0 = filter[0],\n          fk = 0;\n      var w2 = w << 1,\n          w3 = w * 3,\n          w4 = w << 2; // hor pass\n\n      for (; i < h; ++i) {\n        sum = src_d[sp];\n\n        for (j = 0; j < half_kernel; ++j) {\n          buf[j] = sum;\n        }\n\n        for (j = 0; j <= w - 2; j += 2) {\n          buf[j + half_kernel] = src_d[sp + j];\n          buf[j + half_kernel + 1] = src_d[sp + j + 1];\n        }\n\n        for (; j < w; ++j) {\n          buf[j + half_kernel] = src_d[sp + j];\n        }\n\n        sum = src_d[sp + w - 1];\n\n        for (j = w; j < half_kernel + w; ++j) {\n          buf[j + half_kernel] = sum;\n        }\n\n        for (j = 0; j <= w - 4; j += 4) {\n          sum = buf[j] * f0, sum1 = buf[j + 1] * f0, sum2 = buf[j + 2] * f0, sum3 = buf[j + 3] * f0;\n\n          for (k = 1; k < kernel_size; ++k) {\n            fk = filter[k];\n            sum += buf[k + j] * fk;\n            sum1 += buf[k + j + 1] * fk;\n            sum2 += buf[k + j + 2] * fk;\n            sum3 += buf[k + j + 3] * fk;\n          }\n\n          dst_d[dp + j] = Math.min(sum >> 8, 255);\n          dst_d[dp + j + 1] = Math.min(sum1 >> 8, 255);\n          dst_d[dp + j + 2] = Math.min(sum2 >> 8, 255);\n          dst_d[dp + j + 3] = Math.min(sum3 >> 8, 255);\n        }\n\n        for (; j < w; ++j) {\n          sum = buf[j] * f0;\n\n          for (k = 1; k < kernel_size; ++k) {\n            sum += buf[k + j] * filter[k];\n          }\n\n          dst_d[dp + j] = Math.min(sum >> 8, 255);\n        }\n\n        sp += w;\n        dp += w;\n      } // vert pass\n\n\n      for (i = 0; i < w; ++i) {\n        sum = dst_d[i];\n\n        for (j = 0; j < half_kernel; ++j) {\n          buf[j] = sum;\n        }\n\n        k = i;\n\n        for (j = 0; j <= h - 2; j += 2, k += w2) {\n          buf[j + half_kernel] = dst_d[k];\n          buf[j + half_kernel + 1] = dst_d[k + w];\n        }\n\n        for (; j < h; ++j, k += w) {\n          buf[j + half_kernel] = dst_d[k];\n        }\n\n        sum = dst_d[(h - 1) * w + i];\n\n        for (j = h; j < half_kernel + h; ++j) {\n          buf[j + half_kernel] = sum;\n        }\n\n        dp = i;\n\n        for (j = 0; j <= h - 4; j += 4, dp += w4) {\n          sum = buf[j] * f0, sum1 = buf[j + 1] * f0, sum2 = buf[j + 2] * f0, sum3 = buf[j + 3] * f0;\n\n          for (k = 1; k < kernel_size; ++k) {\n            fk = filter[k];\n            sum += buf[k + j] * fk;\n            sum1 += buf[k + j + 1] * fk;\n            sum2 += buf[k + j + 2] * fk;\n            sum3 += buf[k + j + 3] * fk;\n          }\n\n          dst_d[dp] = Math.min(sum >> 8, 255);\n          dst_d[dp + w] = Math.min(sum1 >> 8, 255);\n          dst_d[dp + w2] = Math.min(sum2 >> 8, 255);\n          dst_d[dp + w3] = Math.min(sum3 >> 8, 255);\n        }\n\n        for (; j < h; ++j, dp += w) {\n          sum = buf[j] * f0;\n\n          for (k = 1; k < kernel_size; ++k) {\n            sum += buf[k + j] * filter[k];\n          }\n\n          dst_d[dp] = Math.min(sum >> 8, 255);\n        }\n      }\n    };\n\n    var _convol = function (buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel) {\n      var i = 0,\n          j = 0,\n          k = 0,\n          sp = 0,\n          dp = 0,\n          sum = 0.0,\n          sum1 = 0.0,\n          sum2 = 0.0,\n          sum3 = 0.0,\n          f0 = filter[0],\n          fk = 0.0;\n      var w2 = w << 1,\n          w3 = w * 3,\n          w4 = w << 2; // hor pass\n\n      for (; i < h; ++i) {\n        sum = src_d[sp];\n\n        for (j = 0; j < half_kernel; ++j) {\n          buf[j] = sum;\n        }\n\n        for (j = 0; j <= w - 2; j += 2) {\n          buf[j + half_kernel] = src_d[sp + j];\n          buf[j + half_kernel + 1] = src_d[sp + j + 1];\n        }\n\n        for (; j < w; ++j) {\n          buf[j + half_kernel] = src_d[sp + j];\n        }\n\n        sum = src_d[sp + w - 1];\n\n        for (j = w; j < half_kernel + w; ++j) {\n          buf[j + half_kernel] = sum;\n        }\n\n        for (j = 0; j <= w - 4; j += 4) {\n          sum = buf[j] * f0, sum1 = buf[j + 1] * f0, sum2 = buf[j + 2] * f0, sum3 = buf[j + 3] * f0;\n\n          for (k = 1; k < kernel_size; ++k) {\n            fk = filter[k];\n            sum += buf[k + j] * fk;\n            sum1 += buf[k + j + 1] * fk;\n            sum2 += buf[k + j + 2] * fk;\n            sum3 += buf[k + j + 3] * fk;\n          }\n\n          dst_d[dp + j] = sum;\n          dst_d[dp + j + 1] = sum1;\n          dst_d[dp + j + 2] = sum2;\n          dst_d[dp + j + 3] = sum3;\n        }\n\n        for (; j < w; ++j) {\n          sum = buf[j] * f0;\n\n          for (k = 1; k < kernel_size; ++k) {\n            sum += buf[k + j] * filter[k];\n          }\n\n          dst_d[dp + j] = sum;\n        }\n\n        sp += w;\n        dp += w;\n      } // vert pass\n\n\n      for (i = 0; i < w; ++i) {\n        sum = dst_d[i];\n\n        for (j = 0; j < half_kernel; ++j) {\n          buf[j] = sum;\n        }\n\n        k = i;\n\n        for (j = 0; j <= h - 2; j += 2, k += w2) {\n          buf[j + half_kernel] = dst_d[k];\n          buf[j + half_kernel + 1] = dst_d[k + w];\n        }\n\n        for (; j < h; ++j, k += w) {\n          buf[j + half_kernel] = dst_d[k];\n        }\n\n        sum = dst_d[(h - 1) * w + i];\n\n        for (j = h; j < half_kernel + h; ++j) {\n          buf[j + half_kernel] = sum;\n        }\n\n        dp = i;\n\n        for (j = 0; j <= h - 4; j += 4, dp += w4) {\n          sum = buf[j] * f0, sum1 = buf[j + 1] * f0, sum2 = buf[j + 2] * f0, sum3 = buf[j + 3] * f0;\n\n          for (k = 1; k < kernel_size; ++k) {\n            fk = filter[k];\n            sum += buf[k + j] * fk;\n            sum1 += buf[k + j + 1] * fk;\n            sum2 += buf[k + j + 2] * fk;\n            sum3 += buf[k + j + 3] * fk;\n          }\n\n          dst_d[dp] = sum;\n          dst_d[dp + w] = sum1;\n          dst_d[dp + w2] = sum2;\n          dst_d[dp + w3] = sum3;\n        }\n\n        for (; j < h; ++j, dp += w) {\n          sum = buf[j] * f0;\n\n          for (k = 1; k < kernel_size; ++k) {\n            sum += buf[k + j] * filter[k];\n          }\n\n          dst_d[dp] = sum;\n        }\n      }\n    };\n\n    return {\n      // TODO: add support for RGB/BGR order\n      // for raw arrays\n      grayscale: function (src, w, h, dst, code) {\n        // this is default image data representation in browser\n        if (typeof code === \"undefined\") {\n          code = jsfeat.COLOR_RGBA2GRAY;\n        }\n\n        var x = 0,\n            y = 0,\n            i = 0,\n            j = 0,\n            ir = 0,\n            jr = 0;\n        var coeff_r = 4899,\n            coeff_g = 9617,\n            coeff_b = 1868,\n            cn = 4;\n\n        if (code == jsfeat.COLOR_BGRA2GRAY || code == jsfeat.COLOR_BGR2GRAY) {\n          coeff_r = 1868;\n          coeff_b = 4899;\n        }\n\n        if (code == jsfeat.COLOR_RGB2GRAY || code == jsfeat.COLOR_BGR2GRAY) {\n          cn = 3;\n        }\n\n        var cn2 = cn << 1,\n            cn3 = cn * 3 | 0;\n        dst.resize(w, h, 1);\n        var dst_u8 = dst.data;\n\n        for (y = 0; y < h; ++y, j += w, i += w * cn) {\n          for (x = 0, ir = i, jr = j; x <= w - 4; x += 4, ir += cn << 2, jr += 4) {\n            dst_u8[jr] = src[ir] * coeff_r + src[ir + 1] * coeff_g + src[ir + 2] * coeff_b + 8192 >> 14;\n            dst_u8[jr + 1] = src[ir + cn] * coeff_r + src[ir + cn + 1] * coeff_g + src[ir + cn + 2] * coeff_b + 8192 >> 14;\n            dst_u8[jr + 2] = src[ir + cn2] * coeff_r + src[ir + cn2 + 1] * coeff_g + src[ir + cn2 + 2] * coeff_b + 8192 >> 14;\n            dst_u8[jr + 3] = src[ir + cn3] * coeff_r + src[ir + cn3 + 1] * coeff_g + src[ir + cn3 + 2] * coeff_b + 8192 >> 14;\n          }\n\n          for (; x < w; ++x, ++jr, ir += cn) {\n            dst_u8[jr] = src[ir] * coeff_r + src[ir + 1] * coeff_g + src[ir + 2] * coeff_b + 8192 >> 14;\n          }\n        }\n      },\n      // derived from CCV library\n      resample: function (src, dst, nw, nh) {\n        var h = src.rows,\n            w = src.cols;\n\n        if (h > nh && w > nw) {\n          dst.resize(nw, nh, src.channel); // using the fast alternative (fix point scale, 0x100 to avoid overflow)\n\n          if (src.type & jsfeat.U8_t && dst.type & jsfeat.U8_t && h * w / (nh * nw) < 0x100) {\n            _resample_u8(src, dst, nw, nh);\n          } else {\n            _resample(src, dst, nw, nh);\n          }\n        }\n      },\n      box_blur_gray: function (src, dst, radius, options) {\n        if (typeof options === \"undefined\") {\n          options = 0;\n        }\n\n        var w = src.cols,\n            h = src.rows,\n            h2 = h << 1,\n            w2 = w << 1;\n        var i = 0,\n            x = 0,\n            y = 0,\n            end = 0;\n        var windowSize = (radius << 1) + 1 | 0;\n        var radiusPlusOne = radius + 1 | 0,\n            radiusPlus2 = radiusPlusOne + 1 | 0;\n        var scale = options & jsfeat.BOX_BLUR_NOSCALE ? 1 : 1.0 / (windowSize * windowSize);\n        var tmp_buff = jsfeat.cache.get_buffer(w * h << 2);\n        var sum = 0,\n            dstIndex = 0,\n            srcIndex = 0,\n            nextPixelIndex = 0,\n            previousPixelIndex = 0;\n        var data_i32 = tmp_buff.i32; // to prevent overflow\n\n        var data_u8 = src.data;\n        var hold = 0;\n        dst.resize(w, h, src.channel); // first pass\n        // no need to scale \n        //data_u8 = src.data;\n        //data_i32 = tmp;\n\n        for (y = 0; y < h; ++y) {\n          dstIndex = y;\n          sum = radiusPlusOne * data_u8[srcIndex];\n\n          for (i = srcIndex + 1 | 0, end = srcIndex + radius | 0; i <= end; ++i) {\n            sum += data_u8[i];\n          }\n\n          nextPixelIndex = srcIndex + radiusPlusOne | 0;\n          previousPixelIndex = srcIndex;\n          hold = data_u8[previousPixelIndex];\n\n          for (x = 0; x < radius; ++x, dstIndex += h) {\n            data_i32[dstIndex] = sum;\n            sum += data_u8[nextPixelIndex] - hold;\n            nextPixelIndex++;\n          }\n\n          for (; x < w - radiusPlus2; x += 2, dstIndex += h2) {\n            data_i32[dstIndex] = sum;\n            sum += data_u8[nextPixelIndex] - data_u8[previousPixelIndex];\n            data_i32[dstIndex + h] = sum;\n            sum += data_u8[nextPixelIndex + 1] - data_u8[previousPixelIndex + 1];\n            nextPixelIndex += 2;\n            previousPixelIndex += 2;\n          }\n\n          for (; x < w - radiusPlusOne; ++x, dstIndex += h) {\n            data_i32[dstIndex] = sum;\n            sum += data_u8[nextPixelIndex] - data_u8[previousPixelIndex];\n            nextPixelIndex++;\n            previousPixelIndex++;\n          }\n\n          hold = data_u8[nextPixelIndex - 1];\n\n          for (; x < w; ++x, dstIndex += h) {\n            data_i32[dstIndex] = sum;\n            sum += hold - data_u8[previousPixelIndex];\n            previousPixelIndex++;\n          }\n\n          srcIndex += w;\n        } //\n        // second pass\n\n\n        srcIndex = 0; //data_i32 = tmp; // this is a transpose\n\n        data_u8 = dst.data; // dont scale result\n\n        if (scale == 1) {\n          for (y = 0; y < w; ++y) {\n            dstIndex = y;\n            sum = radiusPlusOne * data_i32[srcIndex];\n\n            for (i = srcIndex + 1 | 0, end = srcIndex + radius | 0; i <= end; ++i) {\n              sum += data_i32[i];\n            }\n\n            nextPixelIndex = srcIndex + radiusPlusOne;\n            previousPixelIndex = srcIndex;\n            hold = data_i32[previousPixelIndex];\n\n            for (x = 0; x < radius; ++x, dstIndex += w) {\n              data_u8[dstIndex] = sum;\n              sum += data_i32[nextPixelIndex] - hold;\n              nextPixelIndex++;\n            }\n\n            for (; x < h - radiusPlus2; x += 2, dstIndex += w2) {\n              data_u8[dstIndex] = sum;\n              sum += data_i32[nextPixelIndex] - data_i32[previousPixelIndex];\n              data_u8[dstIndex + w] = sum;\n              sum += data_i32[nextPixelIndex + 1] - data_i32[previousPixelIndex + 1];\n              nextPixelIndex += 2;\n              previousPixelIndex += 2;\n            }\n\n            for (; x < h - radiusPlusOne; ++x, dstIndex += w) {\n              data_u8[dstIndex] = sum;\n              sum += data_i32[nextPixelIndex] - data_i32[previousPixelIndex];\n              nextPixelIndex++;\n              previousPixelIndex++;\n            }\n\n            hold = data_i32[nextPixelIndex - 1];\n\n            for (; x < h; ++x, dstIndex += w) {\n              data_u8[dstIndex] = sum;\n              sum += hold - data_i32[previousPixelIndex];\n              previousPixelIndex++;\n            }\n\n            srcIndex += h;\n          }\n        } else {\n          for (y = 0; y < w; ++y) {\n            dstIndex = y;\n            sum = radiusPlusOne * data_i32[srcIndex];\n\n            for (i = srcIndex + 1 | 0, end = srcIndex + radius | 0; i <= end; ++i) {\n              sum += data_i32[i];\n            }\n\n            nextPixelIndex = srcIndex + radiusPlusOne;\n            previousPixelIndex = srcIndex;\n            hold = data_i32[previousPixelIndex];\n\n            for (x = 0; x < radius; ++x, dstIndex += w) {\n              data_u8[dstIndex] = sum * scale;\n              sum += data_i32[nextPixelIndex] - hold;\n              nextPixelIndex++;\n            }\n\n            for (; x < h - radiusPlus2; x += 2, dstIndex += w2) {\n              data_u8[dstIndex] = sum * scale;\n              sum += data_i32[nextPixelIndex] - data_i32[previousPixelIndex];\n              data_u8[dstIndex + w] = sum * scale;\n              sum += data_i32[nextPixelIndex + 1] - data_i32[previousPixelIndex + 1];\n              nextPixelIndex += 2;\n              previousPixelIndex += 2;\n            }\n\n            for (; x < h - radiusPlusOne; ++x, dstIndex += w) {\n              data_u8[dstIndex] = sum * scale;\n              sum += data_i32[nextPixelIndex] - data_i32[previousPixelIndex];\n              nextPixelIndex++;\n              previousPixelIndex++;\n            }\n\n            hold = data_i32[nextPixelIndex - 1];\n\n            for (; x < h; ++x, dstIndex += w) {\n              data_u8[dstIndex] = sum * scale;\n              sum += hold - data_i32[previousPixelIndex];\n              previousPixelIndex++;\n            }\n\n            srcIndex += h;\n          }\n        }\n\n        jsfeat.cache.put_buffer(tmp_buff);\n      },\n      gaussian_blur: function (src, dst, kernel_size, sigma) {\n        if (typeof sigma === \"undefined\") {\n          sigma = 0.0;\n        }\n\n        if (typeof kernel_size === \"undefined\") {\n          kernel_size = 0;\n        }\n\n        kernel_size = kernel_size == 0 ? Math.max(1, 4.0 * sigma + 1.0 - 1e-8) * 2 + 1 | 0 : kernel_size;\n        var half_kernel = kernel_size >> 1;\n        var w = src.cols,\n            h = src.rows;\n        var data_type = src.type,\n            is_u8 = data_type & jsfeat.U8_t;\n        dst.resize(w, h, src.channel);\n        var src_d = src.data,\n            dst_d = dst.data;\n        var buf,\n            filter,\n            buf_sz = kernel_size + Math.max(h, w) | 0;\n        var buf_node = jsfeat.cache.get_buffer(buf_sz << 2);\n        var filt_node = jsfeat.cache.get_buffer(kernel_size << 2);\n\n        if (is_u8) {\n          buf = buf_node.i32;\n          filter = filt_node.i32;\n        } else if (data_type & jsfeat.S32_t) {\n          buf = buf_node.i32;\n          filter = filt_node.f32;\n        } else {\n          buf = buf_node.f32;\n          filter = filt_node.f32;\n        }\n\n        jsfeat.math.get_gaussian_kernel(kernel_size, sigma, filter, data_type);\n\n        if (is_u8) {\n          _convol_u8(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel);\n        } else {\n          _convol(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel);\n        }\n\n        jsfeat.cache.put_buffer(buf_node);\n        jsfeat.cache.put_buffer(filt_node);\n      },\n      // assume we always need it for u8 image\n      pyrdown: function (src, dst, sx, sy) {\n        // this is needed for bbf\n        if (typeof sx === \"undefined\") {\n          sx = 0;\n        }\n\n        if (typeof sy === \"undefined\") {\n          sy = 0;\n        }\n\n        var w = src.cols,\n            h = src.rows;\n        var w2 = w >> 1,\n            h2 = h >> 1;\n\n        var _w2 = w2 - (sx << 1),\n            _h2 = h2 - (sy << 1);\n\n        var x = 0,\n            y = 0,\n            sptr = sx + sy * w,\n            sline = 0,\n            dptr = 0,\n            dline = 0;\n        dst.resize(w2, h2, src.channel);\n        var src_d = src.data,\n            dst_d = dst.data;\n\n        for (y = 0; y < _h2; ++y) {\n          sline = sptr;\n          dline = dptr;\n\n          for (x = 0; x <= _w2 - 2; x += 2, dline += 2, sline += 4) {\n            dst_d[dline] = src_d[sline] + src_d[sline + 1] + src_d[sline + w] + src_d[sline + w + 1] + 2 >> 2;\n            dst_d[dline + 1] = src_d[sline + 2] + src_d[sline + 3] + src_d[sline + w + 2] + src_d[sline + w + 3] + 2 >> 2;\n          }\n\n          for (; x < _w2; ++x, ++dline, sline += 2) {\n            dst_d[dline] = src_d[sline] + src_d[sline + 1] + src_d[sline + w] + src_d[sline + w + 1] + 2 >> 2;\n          }\n\n          sptr += w << 1;\n          dptr += w2;\n        }\n      },\n      // dst: [gx,gy,...]\n      scharr_derivatives: function (src, dst) {\n        var w = src.cols,\n            h = src.rows;\n        var dstep = w << 1,\n            x = 0,\n            y = 0,\n            x1 = 0,\n            a,\n            b,\n            c,\n            d,\n            e,\n            f;\n        var srow0 = 0,\n            srow1 = 0,\n            srow2 = 0,\n            drow = 0;\n        var trow0, trow1;\n        dst.resize(w, h, 2); // 2 channel output gx, gy\n\n        var img = src.data,\n            gxgy = dst.data;\n        var buf0_node = jsfeat.cache.get_buffer(w + 2 << 2);\n        var buf1_node = jsfeat.cache.get_buffer(w + 2 << 2);\n\n        if (src.type & jsfeat.U8_t || src.type & jsfeat.S32_t) {\n          trow0 = buf0_node.i32;\n          trow1 = buf1_node.i32;\n        } else {\n          trow0 = buf0_node.f32;\n          trow1 = buf1_node.f32;\n        }\n\n        for (; y < h; ++y, srow1 += w) {\n          srow0 = (y > 0 ? y - 1 : 1) * w | 0;\n          srow2 = (y < h - 1 ? y + 1 : h - 2) * w | 0;\n          drow = y * dstep | 0; // do vertical convolution\n\n          for (x = 0, x1 = 1; x <= w - 2; x += 2, x1 += 2) {\n            a = img[srow0 + x], b = img[srow2 + x];\n            trow0[x1] = (a + b) * 3 + img[srow1 + x] * 10;\n            trow1[x1] = b - a; //\n\n            a = img[srow0 + x + 1], b = img[srow2 + x + 1];\n            trow0[x1 + 1] = (a + b) * 3 + img[srow1 + x + 1] * 10;\n            trow1[x1 + 1] = b - a;\n          }\n\n          for (; x < w; ++x, ++x1) {\n            a = img[srow0 + x], b = img[srow2 + x];\n            trow0[x1] = (a + b) * 3 + img[srow1 + x] * 10;\n            trow1[x1] = b - a;\n          } // make border\n\n\n          x = w + 1 | 0;\n          trow0[0] = trow0[1];\n          trow0[x] = trow0[w];\n          trow1[0] = trow1[1];\n          trow1[x] = trow1[w]; // do horizontal convolution, interleave the results and store them\n\n          for (x = 0; x <= w - 4; x += 4) {\n            a = trow1[x + 2], b = trow1[x + 1], c = trow1[x + 3], d = trow1[x + 4], e = trow0[x + 2], f = trow0[x + 3];\n            gxgy[drow++] = e - trow0[x];\n            gxgy[drow++] = (a + trow1[x]) * 3 + b * 10;\n            gxgy[drow++] = f - trow0[x + 1];\n            gxgy[drow++] = (c + b) * 3 + a * 10;\n            gxgy[drow++] = trow0[x + 4] - e;\n            gxgy[drow++] = (d + a) * 3 + c * 10;\n            gxgy[drow++] = trow0[x + 5] - f;\n            gxgy[drow++] = (trow1[x + 5] + c) * 3 + d * 10;\n          }\n\n          for (; x < w; ++x) {\n            gxgy[drow++] = trow0[x + 2] - trow0[x];\n            gxgy[drow++] = (trow1[x + 2] + trow1[x]) * 3 + trow1[x + 1] * 10;\n          }\n        }\n\n        jsfeat.cache.put_buffer(buf0_node);\n        jsfeat.cache.put_buffer(buf1_node);\n      },\n      // compute gradient using Sobel kernel [1 2 1] * [-1 0 1]^T\n      // dst: [gx,gy,...]\n      sobel_derivatives: function (src, dst) {\n        var w = src.cols,\n            h = src.rows;\n        var dstep = w << 1,\n            x = 0,\n            y = 0,\n            x1 = 0,\n            a,\n            b,\n            c,\n            d,\n            e,\n            f;\n        var srow0 = 0,\n            srow1 = 0,\n            srow2 = 0,\n            drow = 0;\n        var trow0, trow1;\n        dst.resize(w, h, 2); // 2 channel output gx, gy\n\n        var img = src.data,\n            gxgy = dst.data;\n        var buf0_node = jsfeat.cache.get_buffer(w + 2 << 2);\n        var buf1_node = jsfeat.cache.get_buffer(w + 2 << 2);\n\n        if (src.type & jsfeat.U8_t || src.type & jsfeat.S32_t) {\n          trow0 = buf0_node.i32;\n          trow1 = buf1_node.i32;\n        } else {\n          trow0 = buf0_node.f32;\n          trow1 = buf1_node.f32;\n        }\n\n        for (; y < h; ++y, srow1 += w) {\n          srow0 = (y > 0 ? y - 1 : 1) * w | 0;\n          srow2 = (y < h - 1 ? y + 1 : h - 2) * w | 0;\n          drow = y * dstep | 0; // do vertical convolution\n\n          for (x = 0, x1 = 1; x <= w - 2; x += 2, x1 += 2) {\n            a = img[srow0 + x], b = img[srow2 + x];\n            trow0[x1] = a + b + img[srow1 + x] * 2;\n            trow1[x1] = b - a; //\n\n            a = img[srow0 + x + 1], b = img[srow2 + x + 1];\n            trow0[x1 + 1] = a + b + img[srow1 + x + 1] * 2;\n            trow1[x1 + 1] = b - a;\n          }\n\n          for (; x < w; ++x, ++x1) {\n            a = img[srow0 + x], b = img[srow2 + x];\n            trow0[x1] = a + b + img[srow1 + x] * 2;\n            trow1[x1] = b - a;\n          } // make border\n\n\n          x = w + 1 | 0;\n          trow0[0] = trow0[1];\n          trow0[x] = trow0[w];\n          trow1[0] = trow1[1];\n          trow1[x] = trow1[w]; // do horizontal convolution, interleave the results and store them\n\n          for (x = 0; x <= w - 4; x += 4) {\n            a = trow1[x + 2], b = trow1[x + 1], c = trow1[x + 3], d = trow1[x + 4], e = trow0[x + 2], f = trow0[x + 3];\n            gxgy[drow++] = e - trow0[x];\n            gxgy[drow++] = a + trow1[x] + b * 2;\n            gxgy[drow++] = f - trow0[x + 1];\n            gxgy[drow++] = c + b + a * 2;\n            gxgy[drow++] = trow0[x + 4] - e;\n            gxgy[drow++] = d + a + c * 2;\n            gxgy[drow++] = trow0[x + 5] - f;\n            gxgy[drow++] = trow1[x + 5] + c + d * 2;\n          }\n\n          for (; x < w; ++x) {\n            gxgy[drow++] = trow0[x + 2] - trow0[x];\n            gxgy[drow++] = trow1[x + 2] + trow1[x] + trow1[x + 1] * 2;\n          }\n        }\n\n        jsfeat.cache.put_buffer(buf0_node);\n        jsfeat.cache.put_buffer(buf1_node);\n      },\n      // please note: \n      // dst_(type) size should be cols = src.cols+1, rows = src.rows+1\n      compute_integral_image: function (src, dst_sum, dst_sqsum, dst_tilted) {\n        var w0 = src.cols | 0,\n            h0 = src.rows | 0,\n            src_d = src.data;\n        var w1 = w0 + 1 | 0;\n        var s = 0,\n            s2 = 0,\n            p = 0,\n            pup = 0,\n            i = 0,\n            j = 0,\n            v = 0,\n            k = 0;\n\n        if (dst_sum && dst_sqsum) {\n          // fill first row with zeros\n          for (; i < w1; ++i) {\n            dst_sum[i] = 0, dst_sqsum[i] = 0;\n          }\n\n          p = w1 + 1 | 0, pup = 1;\n\n          for (i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n            s = s2 = 0;\n\n            for (j = 0; j <= w0 - 2; j += 2, k += 2, p += 2, pup += 2) {\n              v = src_d[k];\n              s += v, s2 += v * v;\n              dst_sum[p] = dst_sum[pup] + s;\n              dst_sqsum[p] = dst_sqsum[pup] + s2;\n              v = src_d[k + 1];\n              s += v, s2 += v * v;\n              dst_sum[p + 1] = dst_sum[pup + 1] + s;\n              dst_sqsum[p + 1] = dst_sqsum[pup + 1] + s2;\n            }\n\n            for (; j < w0; ++j, ++k, ++p, ++pup) {\n              v = src_d[k];\n              s += v, s2 += v * v;\n              dst_sum[p] = dst_sum[pup] + s;\n              dst_sqsum[p] = dst_sqsum[pup] + s2;\n            }\n          }\n        } else if (dst_sum) {\n          // fill first row with zeros\n          for (; i < w1; ++i) {\n            dst_sum[i] = 0;\n          }\n\n          p = w1 + 1 | 0, pup = 1;\n\n          for (i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n            s = 0;\n\n            for (j = 0; j <= w0 - 2; j += 2, k += 2, p += 2, pup += 2) {\n              s += src_d[k];\n              dst_sum[p] = dst_sum[pup] + s;\n              s += src_d[k + 1];\n              dst_sum[p + 1] = dst_sum[pup + 1] + s;\n            }\n\n            for (; j < w0; ++j, ++k, ++p, ++pup) {\n              s += src_d[k];\n              dst_sum[p] = dst_sum[pup] + s;\n            }\n          }\n        } else if (dst_sqsum) {\n          // fill first row with zeros\n          for (; i < w1; ++i) {\n            dst_sqsum[i] = 0;\n          }\n\n          p = w1 + 1 | 0, pup = 1;\n\n          for (i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n            s2 = 0;\n\n            for (j = 0; j <= w0 - 2; j += 2, k += 2, p += 2, pup += 2) {\n              v = src_d[k];\n              s2 += v * v;\n              dst_sqsum[p] = dst_sqsum[pup] + s2;\n              v = src_d[k + 1];\n              s2 += v * v;\n              dst_sqsum[p + 1] = dst_sqsum[pup + 1] + s2;\n            }\n\n            for (; j < w0; ++j, ++k, ++p, ++pup) {\n              v = src_d[k];\n              s2 += v * v;\n              dst_sqsum[p] = dst_sqsum[pup] + s2;\n            }\n          }\n        }\n\n        if (dst_tilted) {\n          // fill first row with zeros\n          for (i = 0; i < w1; ++i) {\n            dst_tilted[i] = 0;\n          } // diagonal\n\n\n          p = w1 + 1 | 0, pup = 0;\n\n          for (i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n            for (j = 0; j <= w0 - 2; j += 2, k += 2, p += 2, pup += 2) {\n              dst_tilted[p] = src_d[k] + dst_tilted[pup];\n              dst_tilted[p + 1] = src_d[k + 1] + dst_tilted[pup + 1];\n            }\n\n            for (; j < w0; ++j, ++k, ++p, ++pup) {\n              dst_tilted[p] = src_d[k] + dst_tilted[pup];\n            }\n          } // diagonal\n\n\n          p = w1 + w0 | 0, pup = w0;\n\n          for (i = 0; i < h0; ++i, p += w1, pup += w1) {\n            dst_tilted[p] += dst_tilted[pup];\n          }\n\n          for (j = w0 - 1; j > 0; --j) {\n            p = j + h0 * w1, pup = p - w1;\n\n            for (i = h0; i > 0; --i, p -= w1, pup -= w1) {\n              dst_tilted[p] += dst_tilted[pup] + dst_tilted[pup + 1];\n            }\n          }\n        }\n      },\n      equalize_histogram: function (src, dst) {\n        var w = src.cols,\n            h = src.rows,\n            src_d = src.data;\n        dst.resize(w, h, src.channel);\n        var dst_d = dst.data,\n            size = w * h;\n        var i = 0,\n            prev = 0,\n            hist0,\n            norm;\n        var hist0_node = jsfeat.cache.get_buffer(256 << 2);\n        hist0 = hist0_node.i32;\n\n        for (; i < 256; ++i) hist0[i] = 0;\n\n        for (i = 0; i < size; ++i) {\n          ++hist0[src_d[i]];\n        }\n\n        prev = hist0[0];\n\n        for (i = 1; i < 256; ++i) {\n          prev = hist0[i] += prev;\n        }\n\n        norm = 255 / size;\n\n        for (i = 0; i < size; ++i) {\n          dst_d[i] = hist0[src_d[i]] * norm + 0.5 | 0;\n        }\n\n        jsfeat.cache.put_buffer(hist0_node);\n      },\n      canny: function (src, dst, low_thresh, high_thresh) {\n        var w = src.cols,\n            h = src.rows,\n            src_d = src.data;\n        dst.resize(w, h, src.channel);\n        var dst_d = dst.data;\n        var i = 0,\n            j = 0,\n            grad = 0,\n            w2 = w << 1,\n            _grad = 0,\n            suppress = 0,\n            f = 0,\n            x = 0,\n            y = 0,\n            s = 0;\n        var tg22x = 0,\n            tg67x = 0; // cache buffers\n\n        var dxdy_node = jsfeat.cache.get_buffer(h * w2 << 2);\n        var buf_node = jsfeat.cache.get_buffer(3 * (w + 2) << 2);\n        var map_node = jsfeat.cache.get_buffer((h + 2) * (w + 2) << 2);\n        var stack_node = jsfeat.cache.get_buffer(h * w << 2);\n        var buf = buf_node.i32;\n        var map = map_node.i32;\n        var stack = stack_node.i32;\n        var dxdy = dxdy_node.i32;\n        var dxdy_m = new jsfeat.matrix_t(w, h, jsfeat.S32C2_t, dxdy_node.data);\n        var row0 = 1,\n            row1 = w + 2 + 1 | 0,\n            row2 = 2 * (w + 2) + 1 | 0,\n            map_w = w + 2 | 0,\n            map_i = map_w + 1 | 0,\n            stack_i = 0;\n        this.sobel_derivatives(src, dxdy_m);\n\n        if (low_thresh > high_thresh) {\n          i = low_thresh;\n          low_thresh = high_thresh;\n          high_thresh = i;\n        }\n\n        i = 3 * (w + 2) | 0;\n\n        while (--i >= 0) {\n          buf[i] = 0;\n        }\n\n        i = (h + 2) * (w + 2) | 0;\n\n        while (--i >= 0) {\n          map[i] = 0;\n        }\n\n        for (; j < w; ++j, grad += 2) {\n          //buf[row1+j] = Math.abs(dxdy[grad]) + Math.abs(dxdy[grad+1]);\n          x = dxdy[grad], y = dxdy[grad + 1]; //buf[row1+j] = x*x + y*y;\n\n          buf[row1 + j] = (x ^ x >> 31) - (x >> 31) + ((y ^ y >> 31) - (y >> 31));\n        }\n\n        for (i = 1; i <= h; ++i, grad += w2) {\n          if (i == h) {\n            j = row2 + w;\n\n            while (--j >= row2) {\n              buf[j] = 0;\n            }\n          } else {\n            for (j = 0; j < w; j++) {\n              //buf[row2+j] =  Math.abs(dxdy[grad+(j<<1)]) + Math.abs(dxdy[grad+(j<<1)+1]);\n              x = dxdy[grad + (j << 1)], y = dxdy[grad + (j << 1) + 1]; //buf[row2+j] = x*x + y*y;\n\n              buf[row2 + j] = (x ^ x >> 31) - (x >> 31) + ((y ^ y >> 31) - (y >> 31));\n            }\n          }\n\n          _grad = grad - w2 | 0;\n          map[map_i - 1] = 0;\n          suppress = 0;\n\n          for (j = 0; j < w; ++j, _grad += 2) {\n            f = buf[row1 + j];\n\n            if (f > low_thresh) {\n              x = dxdy[_grad];\n              y = dxdy[_grad + 1];\n              s = x ^ y; // seems ot be faster than Math.abs\n\n              x = (x ^ x >> 31) - (x >> 31) | 0;\n              y = (y ^ y >> 31) - (y >> 31) | 0; //x * tan(22.5) x * tan(67.5) == 2 * x + x * tan(22.5)\n\n              tg22x = x * 13573;\n              tg67x = tg22x + (x + x << 15);\n              y <<= 15;\n\n              if (y < tg22x) {\n                if (f > buf[row1 + j - 1] && f >= buf[row1 + j + 1]) {\n                  if (f > high_thresh && !suppress && map[map_i + j - map_w] != 2) {\n                    map[map_i + j] = 2;\n                    suppress = 1;\n                    stack[stack_i++] = map_i + j;\n                  } else {\n                    map[map_i + j] = 1;\n                  }\n\n                  continue;\n                }\n              } else if (y > tg67x) {\n                if (f > buf[row0 + j] && f >= buf[row2 + j]) {\n                  if (f > high_thresh && !suppress && map[map_i + j - map_w] != 2) {\n                    map[map_i + j] = 2;\n                    suppress = 1;\n                    stack[stack_i++] = map_i + j;\n                  } else {\n                    map[map_i + j] = 1;\n                  }\n\n                  continue;\n                }\n              } else {\n                s = s < 0 ? -1 : 1;\n\n                if (f > buf[row0 + j - s] && f > buf[row2 + j + s]) {\n                  if (f > high_thresh && !suppress && map[map_i + j - map_w] != 2) {\n                    map[map_i + j] = 2;\n                    suppress = 1;\n                    stack[stack_i++] = map_i + j;\n                  } else {\n                    map[map_i + j] = 1;\n                  }\n\n                  continue;\n                }\n              }\n            }\n\n            map[map_i + j] = 0;\n            suppress = 0;\n          }\n\n          map[map_i + w] = 0;\n          map_i += map_w;\n          j = row0;\n          row0 = row1;\n          row1 = row2;\n          row2 = j;\n        }\n\n        j = map_i - map_w - 1;\n\n        for (i = 0; i < map_w; ++i, ++j) {\n          map[j] = 0;\n        } // path following\n\n\n        while (stack_i > 0) {\n          map_i = stack[--stack_i];\n          map_i -= map_w + 1;\n          if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n          map_i += 1;\n          if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n          map_i += 1;\n          if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n          map_i += map_w;\n          if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n          map_i -= 2;\n          if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n          map_i += map_w;\n          if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n          map_i += 1;\n          if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n          map_i += 1;\n          if (map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n        }\n\n        map_i = map_w + 1;\n        row0 = 0;\n\n        for (i = 0; i < h; ++i, map_i += map_w) {\n          for (j = 0; j < w; ++j) {\n            dst_d[row0++] = (map[map_i + j] == 2) * 0xff;\n          }\n        } // free buffers\n\n\n        jsfeat.cache.put_buffer(dxdy_node);\n        jsfeat.cache.put_buffer(buf_node);\n        jsfeat.cache.put_buffer(map_node);\n        jsfeat.cache.put_buffer(stack_node);\n      },\n      // transform is 3x3 matrix_t\n      warp_perspective: function (src, dst, transform, fill_value) {\n        if (typeof fill_value === \"undefined\") {\n          fill_value = 0;\n        }\n\n        var src_width = src.cols | 0,\n            src_height = src.rows | 0,\n            dst_width = dst.cols | 0,\n            dst_height = dst.rows | 0;\n        var src_d = src.data,\n            dst_d = dst.data;\n        var x = 0,\n            y = 0,\n            off = 0,\n            ixs = 0,\n            iys = 0,\n            xs = 0.0,\n            ys = 0.0,\n            xs0 = 0.0,\n            ys0 = 0.0,\n            ws = 0.0,\n            sc = 0.0,\n            a = 0.0,\n            b = 0.0,\n            p0 = 0.0,\n            p1 = 0.0;\n        var td = transform.data;\n        var m00 = td[0],\n            m01 = td[1],\n            m02 = td[2],\n            m10 = td[3],\n            m11 = td[4],\n            m12 = td[5],\n            m20 = td[6],\n            m21 = td[7],\n            m22 = td[8];\n\n        for (var dptr = 0; y < dst_height; ++y) {\n          xs0 = m01 * y + m02, ys0 = m11 * y + m12, ws = m21 * y + m22;\n\n          for (x = 0; x < dst_width; ++x, ++dptr, xs0 += m00, ys0 += m10, ws += m20) {\n            sc = 1.0 / ws;\n            xs = xs0 * sc, ys = ys0 * sc;\n            ixs = xs | 0, iys = ys | 0;\n\n            if (xs > 0 && ys > 0 && ixs < src_width - 1 && iys < src_height - 1) {\n              a = Math.max(xs - ixs, 0.0);\n              b = Math.max(ys - iys, 0.0);\n              off = src_width * iys + ixs | 0;\n              p0 = src_d[off] + a * (src_d[off + 1] - src_d[off]);\n              p1 = src_d[off + src_width] + a * (src_d[off + src_width + 1] - src_d[off + src_width]);\n              dst_d[dptr] = p0 + b * (p1 - p0);\n            } else dst_d[dptr] = fill_value;\n          }\n        }\n      },\n      // transform is 3x3 or 2x3 matrix_t only first 6 values referenced\n      warp_affine: function (src, dst, transform, fill_value) {\n        if (typeof fill_value === \"undefined\") {\n          fill_value = 0;\n        }\n\n        var src_width = src.cols,\n            src_height = src.rows,\n            dst_width = dst.cols,\n            dst_height = dst.rows;\n        var src_d = src.data,\n            dst_d = dst.data;\n        var x = 0,\n            y = 0,\n            off = 0,\n            ixs = 0,\n            iys = 0,\n            xs = 0.0,\n            ys = 0.0,\n            a = 0.0,\n            b = 0.0,\n            p0 = 0.0,\n            p1 = 0.0;\n        var td = transform.data;\n        var m00 = td[0],\n            m01 = td[1],\n            m02 = td[2],\n            m10 = td[3],\n            m11 = td[4],\n            m12 = td[5];\n\n        for (var dptr = 0; y < dst_height; ++y) {\n          xs = m01 * y + m02;\n          ys = m11 * y + m12;\n\n          for (x = 0; x < dst_width; ++x, ++dptr, xs += m00, ys += m10) {\n            ixs = xs | 0;\n            iys = ys | 0;\n\n            if (ixs >= 0 && iys >= 0 && ixs < src_width - 1 && iys < src_height - 1) {\n              a = xs - ixs;\n              b = ys - iys;\n              off = src_width * iys + ixs;\n              p0 = src_d[off] + a * (src_d[off + 1] - src_d[off]);\n              p1 = src_d[off + src_width] + a * (src_d[off + src_width + 1] - src_d[off + src_width]);\n              dst_d[dptr] = p0 + b * (p1 - p0);\n            } else dst_d[dptr] = fill_value;\n          }\n        }\n      },\n      // Basic RGB Skin detection filter\n      // from http://popscan.blogspot.fr/2012/08/skin-detection-in-digital-images.html\n      skindetector: function (src, dst) {\n        var r, g, b, j;\n        var i = src.width * src.height;\n\n        while (i--) {\n          j = i * 4;\n          r = src.data[j];\n          g = src.data[j + 1];\n          b = src.data[j + 2];\n\n          if (r > 95 && g > 40 && b > 20 && r > g && r > b && r - Math.min(g, b) > 15 && Math.abs(r - g) > 15) {\n            dst[i] = 255;\n          } else {\n            dst[i] = 0;\n          }\n        }\n      }\n    };\n  }();\n\n  global.imgproc = imgproc;\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * This is FAST corner detector, contributed to OpenCV by the author, Edward Rosten.\r\n */\n\n/*\r\nThe references are:\r\n * Machine learning for high-speed corner detection,\r\n   E. Rosten and T. Drummond, ECCV 2006\r\n * Faster and better: A machine learning approach to corner detection\r\n   E. Rosten, R. Porter and T. Drummond, PAMI, 2009  \r\n*/\n\n\n(function (global) {\n  \"use strict\"; //\n\n  var fast_corners = function () {\n    var offsets16 = new Int32Array([0, 3, 1, 3, 2, 2, 3, 1, 3, 0, 3, -1, 2, -2, 1, -3, 0, -3, -1, -3, -2, -2, -3, -1, -3, 0, -3, 1, -2, 2, -1, 3]);\n    var threshold_tab = new Uint8Array(512);\n    var pixel_off = new Int32Array(25);\n    var score_diff = new Int32Array(25); // private functions\n\n    var _cmp_offsets = function (pixel, step, pattern_size) {\n      var k = 0;\n      var offsets = offsets16;\n\n      for (; k < pattern_size; ++k) {\n        pixel[k] = offsets[k << 1] + offsets[(k << 1) + 1] * step;\n      }\n\n      for (; k < 25; ++k) {\n        pixel[k] = pixel[k - pattern_size];\n      }\n    },\n        _cmp_score_16 = function (src, off, pixel, d, threshold) {\n      var N = 25,\n          k = 0,\n          v = src[off];\n      var a0 = threshold,\n          a = 0,\n          b0 = 0,\n          b = 0;\n\n      for (; k < N; ++k) {\n        d[k] = v - src[off + pixel[k]];\n      }\n\n      for (k = 0; k < 16; k += 2) {\n        a = Math.min(d[k + 1], d[k + 2]);\n        a = Math.min(a, d[k + 3]);\n        if (a <= a0) continue;\n        a = Math.min(a, d[k + 4]);\n        a = Math.min(a, d[k + 5]);\n        a = Math.min(a, d[k + 6]);\n        a = Math.min(a, d[k + 7]);\n        a = Math.min(a, d[k + 8]);\n        a0 = Math.max(a0, Math.min(a, d[k]));\n        a0 = Math.max(a0, Math.min(a, d[k + 9]));\n      }\n\n      b0 = -a0;\n\n      for (k = 0; k < 16; k += 2) {\n        b = Math.max(d[k + 1], d[k + 2]);\n        b = Math.max(b, d[k + 3]);\n        b = Math.max(b, d[k + 4]);\n        b = Math.max(b, d[k + 5]);\n        if (b >= b0) continue;\n        b = Math.max(b, d[k + 6]);\n        b = Math.max(b, d[k + 7]);\n        b = Math.max(b, d[k + 8]);\n        b0 = Math.min(b0, Math.max(b, d[k]));\n        b0 = Math.min(b0, Math.max(b, d[k + 9]));\n      }\n\n      return -b0 - 1;\n    };\n\n    var _threshold = 20;\n    return {\n      set_threshold: function (threshold) {\n        _threshold = Math.min(Math.max(threshold, 0), 255);\n\n        for (var i = -255; i <= 255; ++i) {\n          threshold_tab[i + 255] = i < -_threshold ? 1 : i > _threshold ? 2 : 0;\n        }\n\n        return _threshold;\n      },\n      detect: function (src, corners, border) {\n        if (typeof border === \"undefined\") {\n          border = 3;\n        }\n\n        var K = 8,\n            N = 25;\n        var img = src.data,\n            w = src.cols,\n            h = src.rows;\n        var i = 0,\n            j = 0,\n            k = 0,\n            vt = 0,\n            x = 0,\n            m3 = 0;\n        var buf_node = jsfeat.cache.get_buffer(3 * w);\n        var cpbuf_node = jsfeat.cache.get_buffer((w + 1) * 3 << 2);\n        var buf = buf_node.u8;\n        var cpbuf = cpbuf_node.i32;\n        var pixel = pixel_off;\n        var sd = score_diff;\n        var sy = Math.max(3, border);\n        var ey = Math.min(h - 2, h - border);\n        var sx = Math.max(3, border);\n        var ex = Math.min(w - 3, w - border);\n        var _count = 0,\n            corners_cnt = 0,\n            pt;\n        var score_func = _cmp_score_16;\n        var thresh_tab = threshold_tab;\n        var threshold = _threshold;\n        var v = 0,\n            tab = 0,\n            d = 0,\n            ncorners = 0,\n            cornerpos = 0,\n            curr = 0,\n            ptr = 0,\n            prev = 0,\n            pprev = 0;\n        var jp1 = 0,\n            jm1 = 0,\n            score = 0;\n\n        _cmp_offsets(pixel, w, 16); // local vars are faster?\n\n\n        var pixel0 = pixel[0];\n        var pixel1 = pixel[1];\n        var pixel2 = pixel[2];\n        var pixel3 = pixel[3];\n        var pixel4 = pixel[4];\n        var pixel5 = pixel[5];\n        var pixel6 = pixel[6];\n        var pixel7 = pixel[7];\n        var pixel8 = pixel[8];\n        var pixel9 = pixel[9];\n        var pixel10 = pixel[10];\n        var pixel11 = pixel[11];\n        var pixel12 = pixel[12];\n        var pixel13 = pixel[13];\n        var pixel14 = pixel[14];\n        var pixel15 = pixel[15];\n\n        for (i = 0; i < w * 3; ++i) {\n          buf[i] = 0;\n        }\n\n        for (i = sy; i < ey; ++i) {\n          ptr = i * w + sx | 0;\n          m3 = (i - 3) % 3;\n          curr = m3 * w | 0;\n          cornerpos = m3 * (w + 1) | 0;\n\n          for (j = 0; j < w; ++j) buf[curr + j] = 0;\n\n          ncorners = 0;\n\n          if (i < ey - 1) {\n            j = sx;\n\n            for (; j < ex; ++j, ++ptr) {\n              v = img[ptr];\n              tab = -v + 255;\n              d = thresh_tab[tab + img[ptr + pixel0]] | thresh_tab[tab + img[ptr + pixel8]];\n\n              if (d == 0) {\n                continue;\n              }\n\n              d &= thresh_tab[tab + img[ptr + pixel2]] | thresh_tab[tab + img[ptr + pixel10]];\n              d &= thresh_tab[tab + img[ptr + pixel4]] | thresh_tab[tab + img[ptr + pixel12]];\n              d &= thresh_tab[tab + img[ptr + pixel6]] | thresh_tab[tab + img[ptr + pixel14]];\n\n              if (d == 0) {\n                continue;\n              }\n\n              d &= thresh_tab[tab + img[ptr + pixel1]] | thresh_tab[tab + img[ptr + pixel9]];\n              d &= thresh_tab[tab + img[ptr + pixel3]] | thresh_tab[tab + img[ptr + pixel11]];\n              d &= thresh_tab[tab + img[ptr + pixel5]] | thresh_tab[tab + img[ptr + pixel13]];\n              d &= thresh_tab[tab + img[ptr + pixel7]] | thresh_tab[tab + img[ptr + pixel15]];\n\n              if (d & 1) {\n                vt = v - threshold;\n                _count = 0;\n\n                for (k = 0; k < N; ++k) {\n                  x = img[ptr + pixel[k]];\n\n                  if (x < vt) {\n                    ++_count;\n\n                    if (_count > K) {\n                      ++ncorners;\n                      cpbuf[cornerpos + ncorners] = j;\n                      buf[curr + j] = score_func(img, ptr, pixel, sd, threshold);\n                      break;\n                    }\n                  } else {\n                    _count = 0;\n                  }\n                }\n              }\n\n              if (d & 2) {\n                vt = v + threshold;\n                _count = 0;\n\n                for (k = 0; k < N; ++k) {\n                  x = img[ptr + pixel[k]];\n\n                  if (x > vt) {\n                    ++_count;\n\n                    if (_count > K) {\n                      ++ncorners;\n                      cpbuf[cornerpos + ncorners] = j;\n                      buf[curr + j] = score_func(img, ptr, pixel, sd, threshold);\n                      break;\n                    }\n                  } else {\n                    _count = 0;\n                  }\n                }\n              }\n            }\n          }\n\n          cpbuf[cornerpos + w] = ncorners;\n\n          if (i == sy) {\n            continue;\n          }\n\n          m3 = (i - 4 + 3) % 3;\n          prev = m3 * w | 0;\n          cornerpos = m3 * (w + 1) | 0;\n          m3 = (i - 5 + 3) % 3;\n          pprev = m3 * w | 0;\n          ncorners = cpbuf[cornerpos + w];\n\n          for (k = 0; k < ncorners; ++k) {\n            j = cpbuf[cornerpos + k];\n            jp1 = j + 1 | 0;\n            jm1 = j - 1 | 0;\n            score = buf[prev + j];\n\n            if (score > buf[prev + jp1] && score > buf[prev + jm1] && score > buf[pprev + jm1] && score > buf[pprev + j] && score > buf[pprev + jp1] && score > buf[curr + jm1] && score > buf[curr + j] && score > buf[curr + jp1]) {\n              // save corner\n              pt = corners[corners_cnt];\n              pt.x = j, pt.y = i - 1, pt.score = score;\n              corners_cnt++;\n            }\n          }\n        } // y loop\n\n\n        jsfeat.cache.put_buffer(buf_node);\n        jsfeat.cache.put_buffer(cpbuf_node);\n        return corners_cnt;\n      }\n    };\n  }();\n\n  global.fast_corners = fast_corners;\n  fast_corners.set_threshold(20); // set default\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n * Copyright 2007 Computer Vision Lab,\n * Ecole Polytechnique Federale de Lausanne (EPFL), Switzerland.\n * @author Vincent Lepetit (http://cvlab.epfl.ch/~lepetit)\n */\n\n\n(function (global) {\n  \"use strict\"; //\n\n  var yape06 = function () {\n    var compute_laplacian = function (src, dst, w, h, Dxx, Dyy, sx, sy, ex, ey) {\n      var y = 0,\n          x = 0,\n          yrow = sy * w + sx | 0,\n          row = yrow;\n\n      for (y = sy; y < ey; ++y, yrow += w, row = yrow) {\n        for (x = sx; x < ex; ++x, ++row) {\n          dst[row] = -4 * src[row] + src[row + Dxx] + src[row - Dxx] + src[row + Dyy] + src[row - Dyy];\n        }\n      }\n    };\n\n    var hessian_min_eigen_value = function (src, off, tr, Dxx, Dyy, Dxy, Dyx) {\n      var Ixx = -2 * src[off] + src[off + Dxx] + src[off - Dxx];\n      var Iyy = -2 * src[off] + src[off + Dyy] + src[off - Dyy];\n      var Ixy = src[off + Dxy] + src[off - Dxy] - src[off + Dyx] - src[off - Dyx];\n      var sqrt_delta = Math.sqrt((Ixx - Iyy) * (Ixx - Iyy) + 4 * Ixy * Ixy) | 0;\n      return Math.min(Math.abs(tr - sqrt_delta), Math.abs(-(tr + sqrt_delta)));\n    };\n\n    return {\n      laplacian_threshold: 30,\n      min_eigen_value_threshold: 25,\n      detect: function (src, points, border) {\n        if (typeof border === \"undefined\") {\n          border = 5;\n        }\n\n        var x = 0,\n            y = 0;\n        var w = src.cols,\n            h = src.rows,\n            srd_d = src.data;\n        var Dxx = 5,\n            Dyy = 5 * w | 0;\n        var Dxy = 3 + 3 * w | 0,\n            Dyx = 3 - 3 * w | 0;\n        var lap_buf = jsfeat.cache.get_buffer(w * h << 2);\n        var laplacian = lap_buf.i32;\n        var lv = 0,\n            row = 0,\n            rowx = 0,\n            min_eigen_value = 0,\n            pt;\n        var number_of_points = 0;\n        var lap_thresh = this.laplacian_threshold;\n        var eigen_thresh = this.min_eigen_value_threshold;\n        var sx = Math.max(5, border) | 0;\n        var sy = Math.max(3, border) | 0;\n        var ex = Math.min(w - 5, w - border) | 0;\n        var ey = Math.min(h - 3, h - border) | 0;\n        x = w * h;\n\n        while (--x >= 0) {\n          laplacian[x] = 0;\n        }\n\n        compute_laplacian(srd_d, laplacian, w, h, Dxx, Dyy, sx, sy, ex, ey);\n        row = sy * w + sx | 0;\n\n        for (y = sy; y < ey; ++y, row += w) {\n          for (x = sx, rowx = row; x < ex; ++x, ++rowx) {\n            lv = laplacian[rowx];\n\n            if (lv < -lap_thresh && lv < laplacian[rowx - 1] && lv < laplacian[rowx + 1] && lv < laplacian[rowx - w] && lv < laplacian[rowx + w] && lv < laplacian[rowx - w - 1] && lv < laplacian[rowx + w - 1] && lv < laplacian[rowx - w + 1] && lv < laplacian[rowx + w + 1] || lv > lap_thresh && lv > laplacian[rowx - 1] && lv > laplacian[rowx + 1] && lv > laplacian[rowx - w] && lv > laplacian[rowx + w] && lv > laplacian[rowx - w - 1] && lv > laplacian[rowx + w - 1] && lv > laplacian[rowx - w + 1] && lv > laplacian[rowx + w + 1]) {\n              min_eigen_value = hessian_min_eigen_value(srd_d, rowx, lv, Dxx, Dyy, Dxy, Dyx);\n\n              if (min_eigen_value > eigen_thresh) {\n                pt = points[number_of_points];\n                pt.x = x, pt.y = y, pt.score = min_eigen_value;\n                ++number_of_points;\n                ++x, ++rowx; // skip next pixel since this is maxima in 3x3\n              }\n            }\n          }\n        }\n\n        jsfeat.cache.put_buffer(lap_buf);\n        return number_of_points;\n      }\n    };\n  }();\n\n  global.yape06 = yape06;\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * Copyright 2007 Computer Vision Lab,\r\n * Ecole Polytechnique Federale de Lausanne (EPFL), Switzerland.\r\n */\n\n\n(function (global) {\n  \"use strict\"; //\n\n  var yape = function () {\n    var precompute_directions = function (step, dirs, R) {\n      var i = 0;\n      var x, y;\n      x = R;\n\n      for (y = 0; y < x; y++, i++) {\n        x = Math.sqrt(R * R - y * y) + 0.5 | 0;\n        dirs[i] = x + step * y;\n      }\n\n      for (x--; x < y && x >= 0; x--, i++) {\n        y = Math.sqrt(R * R - x * x) + 0.5 | 0;\n        dirs[i] = x + step * y;\n      }\n\n      for (; -x < y; x--, i++) {\n        y = Math.sqrt(R * R - x * x) + 0.5 | 0;\n        dirs[i] = x + step * y;\n      }\n\n      for (y--; y >= 0; y--, i++) {\n        x = -Math.sqrt(R * R - y * y) - 0.5 | 0;\n        dirs[i] = x + step * y;\n      }\n\n      for (; y > x; y--, i++) {\n        x = -Math.sqrt(R * R - y * y) - 0.5 | 0;\n        dirs[i] = x + step * y;\n      }\n\n      for (x++; x <= 0; x++, i++) {\n        y = -Math.sqrt(R * R - x * x) - 0.5 | 0;\n        dirs[i] = x + step * y;\n      }\n\n      for (; x < -y; x++, i++) {\n        y = -Math.sqrt(R * R - x * x) - 0.5 | 0;\n        dirs[i] = x + step * y;\n      }\n\n      for (y++; y < 0; y++, i++) {\n        x = Math.sqrt(R * R - y * y) + 0.5 | 0;\n        dirs[i] = x + step * y;\n      }\n\n      dirs[i] = dirs[0];\n      dirs[i + 1] = dirs[1];\n      return i;\n    };\n\n    var third_check = function (Sb, off, step) {\n      var n = 0;\n      if (Sb[off + 1] != 0) n++;\n      if (Sb[off - 1] != 0) n++;\n      if (Sb[off + step] != 0) n++;\n      if (Sb[off + step + 1] != 0) n++;\n      if (Sb[off + step - 1] != 0) n++;\n      if (Sb[off - step] != 0) n++;\n      if (Sb[off - step + 1] != 0) n++;\n      if (Sb[off - step - 1] != 0) n++;\n      return n;\n    };\n\n    var is_local_maxima = function (p, off, v, step, neighborhood) {\n      var x, y;\n\n      if (v > 0) {\n        off -= step * neighborhood;\n\n        for (y = -neighborhood; y <= neighborhood; ++y) {\n          for (x = -neighborhood; x <= neighborhood; ++x) {\n            if (p[off + x] > v) return false;\n          }\n\n          off += step;\n        }\n      } else {\n        off -= step * neighborhood;\n\n        for (y = -neighborhood; y <= neighborhood; ++y) {\n          for (x = -neighborhood; x <= neighborhood; ++x) {\n            if (p[off + x] < v) return false;\n          }\n\n          off += step;\n        }\n      }\n\n      return true;\n    };\n\n    var perform_one_point = function (I, x, Scores, Im, Ip, dirs, opposite, dirs_nb) {\n      var score = 0;\n      var a = 0,\n          b = opposite - 1 | 0;\n      var A = 0,\n          B0 = 0,\n          B1 = 0,\n          B2 = 0;\n      var state = 0; // WE KNOW THAT NOT(A ~ I0 & B1 ~ I0):\n\n      A = I[x + dirs[a]];\n\n      if (A <= Ip) {\n        if (A >= Im) {\n          // A ~ I0\n          B0 = I[x + dirs[b]];\n\n          if (B0 <= Ip) {\n            if (B0 >= Im) {\n              Scores[x] = 0;\n              return;\n            } else {\n              b++;\n              B1 = I[x + dirs[b]];\n\n              if (B1 > Ip) {\n                b++;\n                B2 = I[x + dirs[b]];\n                if (B2 > Ip) state = 3;else if (B2 < Im) state = 6;else {\n                  Scores[x] = 0;\n                  return;\n                } // A ~ I0, B2 ~ I0\n              } else\n                /* if ((B1 < Im))*/\n                {\n                  b++;\n                  B2 = I[x + dirs[b]];\n                  if (B2 > Ip) state = 7;else if (B2 < Im) state = 2;else {\n                    Scores[x] = 0;\n                    return;\n                  } // A ~ I0, B2 ~ I0\n                } //else { Scores[x] = 0; return; } // A ~ I0, B1 ~ I0\n\n            }\n          } else {\n            // B0 < I0\n            b++;\n            B1 = I[x + dirs[b]];\n\n            if (B1 > Ip) {\n              b++;\n              B2 = I[x + dirs[b]];\n              if (B2 > Ip) state = 3;else if (B2 < Im) state = 6;else {\n                Scores[x] = 0;\n                return;\n              } // A ~ I0, B2 ~ I0\n            } else if (B1 < Im) {\n              b++;\n              B2 = I[x + dirs[b]];\n              if (B2 > Ip) state = 7;else if (B2 < Im) state = 2;else {\n                Scores[x] = 0;\n                return;\n              } // A ~ I0, B2 ~ I0\n            } else {\n              Scores[x] = 0;\n              return;\n            } // A ~ I0, B1 ~ I0\n\n          }\n        } else {\n          // A > I0\n          B0 = I[x + dirs[b]];\n\n          if (B0 > Ip) {\n            Scores[x] = 0;\n            return;\n          }\n\n          b++;\n          B1 = I[x + dirs[b]];\n\n          if (B1 > Ip) {\n            Scores[x] = 0;\n            return;\n          }\n\n          b++;\n          B2 = I[x + dirs[b]];\n\n          if (B2 > Ip) {\n            Scores[x] = 0;\n            return;\n          }\n\n          state = 1;\n        }\n      } else // A < I0\n        {\n          B0 = I[x + dirs[b]];\n\n          if (B0 < Im) {\n            Scores[x] = 0;\n            return;\n          }\n\n          b++;\n          B1 = I[x + dirs[b]];\n\n          if (B1 < Im) {\n            Scores[x] = 0;\n            return;\n          }\n\n          b++;\n          B2 = I[x + dirs[b]];\n\n          if (B2 < Im) {\n            Scores[x] = 0;\n            return;\n          }\n\n          state = 0;\n        }\n\n      for (a = 1; a <= opposite; a++) {\n        A = I[x + dirs[a]];\n\n        switch (state) {\n          case 0:\n            if (A > Ip) {\n              B1 = B2;\n              b++;\n              B2 = I[x + dirs[b]];\n\n              if (B2 < Im) {\n                Scores[x] = 0;\n                return;\n              }\n\n              {\n                score -= A + B1;\n                state = 0;\n                break;\n              }\n              ;\n            }\n\n            if (A < Im) {\n              if (B1 > Ip) {\n                Scores[x] = 0;\n                return;\n              }\n\n              if (B2 > Ip) {\n                Scores[x] = 0;\n                return;\n              }\n\n              B1 = B2;\n              b++;\n              B2 = I[x + dirs[b]];\n\n              if (B2 > Ip) {\n                Scores[x] = 0;\n                return;\n              }\n\n              {\n                score -= A + B1;\n                state = 8;\n                break;\n              }\n              ;\n            } // A ~ I0\n\n\n            if (B1 <= Ip) {\n              Scores[x] = 0;\n              return;\n            }\n\n            if (B2 <= Ip) {\n              Scores[x] = 0;\n              return;\n            }\n\n            B1 = B2;\n            b++;\n            B2 = I[x + dirs[b]];\n\n            if (B2 > Ip) {\n              score -= A + B1;\n              state = 3;\n              break;\n            }\n\n            ;\n\n            if (B2 < Im) {\n              score -= A + B1;\n              state = 6;\n              break;\n            }\n\n            ;\n            {\n              Scores[x] = 0;\n              return;\n            }\n\n          case 1:\n            if (A < Im) {\n              B1 = B2;\n              b++;\n              B2 = I[x + dirs[b]];\n\n              if (B2 > Ip) {\n                Scores[x] = 0;\n                return;\n              }\n\n              {\n                score -= A + B1;\n                state = 1;\n                break;\n              }\n              ;\n            }\n\n            if (A > Ip) {\n              if (B1 < Im) {\n                Scores[x] = 0;\n                return;\n              }\n\n              if (B2 < Im) {\n                Scores[x] = 0;\n                return;\n              }\n\n              B1 = B2;\n              b++;\n              B2 = I[x + dirs[b]];\n\n              if (B2 < Im) {\n                Scores[x] = 0;\n                return;\n              }\n\n              {\n                score -= A + B1;\n                state = 9;\n                break;\n              }\n              ;\n            } // A ~ I0\n\n\n            if (B1 >= Im) {\n              Scores[x] = 0;\n              return;\n            }\n\n            if (B2 >= Im) {\n              Scores[x] = 0;\n              return;\n            }\n\n            B1 = B2;\n            b++;\n            B2 = I[x + dirs[b]];\n\n            if (B2 < Im) {\n              score -= A + B1;\n              state = 2;\n              break;\n            }\n\n            ;\n\n            if (B2 > Ip) {\n              score -= A + B1;\n              state = 7;\n              break;\n            }\n\n            ;\n            {\n              Scores[x] = 0;\n              return;\n            }\n\n          case 2:\n            if (A > Ip) {\n              Scores[x] = 0;\n              return;\n            }\n\n            B1 = B2;\n            b++;\n            B2 = I[x + dirs[b]];\n\n            if (A < Im) {\n              if (B2 > Ip) {\n                Scores[x] = 0;\n                return;\n              }\n\n              {\n                score -= A + B1;\n                state = 4;\n                break;\n              }\n              ;\n            } // A ~ I0\n\n\n            if (B2 > Ip) {\n              score -= A + B1;\n              state = 7;\n              break;\n            }\n\n            ;\n\n            if (B2 < Im) {\n              score -= A + B1;\n              state = 2;\n              break;\n            }\n\n            ;\n            {\n              Scores[x] = 0;\n              return;\n            }\n          // A ~ I0, B2 ~ I0\n\n          case 3:\n            if (A < Im) {\n              Scores[x] = 0;\n              return;\n            }\n\n            B1 = B2;\n            b++;\n            B2 = I[x + dirs[b]];\n\n            if (A > Ip) {\n              if (B2 < Im) {\n                Scores[x] = 0;\n                return;\n              }\n\n              {\n                score -= A + B1;\n                state = 5;\n                break;\n              }\n              ;\n            } // A ~ I0\n\n\n            if (B2 > Ip) {\n              score -= A + B1;\n              state = 3;\n              break;\n            }\n\n            ;\n\n            if (B2 < Im) {\n              score -= A + B1;\n              state = 6;\n              break;\n            }\n\n            ;\n            {\n              Scores[x] = 0;\n              return;\n            }\n\n          case 4:\n            if (A > Ip) {\n              Scores[x] = 0;\n              return;\n            }\n\n            if (A < Im) {\n              B1 = B2;\n              b++;\n              B2 = I[x + dirs[b]];\n\n              if (B2 > Ip) {\n                Scores[x] = 0;\n                return;\n              }\n\n              {\n                score -= A + B1;\n                state = 1;\n                break;\n              }\n              ;\n            }\n\n            if (B2 >= Im) {\n              Scores[x] = 0;\n              return;\n            }\n\n            B1 = B2;\n            b++;\n            B2 = I[x + dirs[b]];\n\n            if (B2 < Im) {\n              score -= A + B1;\n              state = 2;\n              break;\n            }\n\n            ;\n\n            if (B2 > Ip) {\n              score -= A + B1;\n              state = 7;\n              break;\n            }\n\n            ;\n            {\n              Scores[x] = 0;\n              return;\n            }\n\n          case 5:\n            if (A < Im) {\n              Scores[x] = 0;\n              return;\n            }\n\n            if (A > Ip) {\n              B1 = B2;\n              b++;\n              B2 = I[x + dirs[b]];\n\n              if (B2 < Im) {\n                Scores[x] = 0;\n                return;\n              }\n\n              {\n                score -= A + B1;\n                state = 0;\n                break;\n              }\n              ;\n            } // A ~ I0\n\n\n            if (B2 <= Ip) {\n              Scores[x] = 0;\n              return;\n            }\n\n            B1 = B2;\n            b++;\n            B2 = I[x + dirs[b]];\n\n            if (B2 > Ip) {\n              score -= A + B1;\n              state = 3;\n              break;\n            }\n\n            ;\n\n            if (B2 < Im) {\n              score -= A + B1;\n              state = 6;\n              break;\n            }\n\n            ;\n            {\n              Scores[x] = 0;\n              return;\n            }\n\n          case 7:\n            if (A > Ip) {\n              Scores[x] = 0;\n              return;\n            }\n\n            if (A < Im) {\n              Scores[x] = 0;\n              return;\n            }\n\n            B1 = B2;\n            b++;\n            B2 = I[x + dirs[b]]; // A ~ I0\n\n            if (B2 > Ip) {\n              score -= A + B1;\n              state = 3;\n              break;\n            }\n\n            ;\n\n            if (B2 < Im) {\n              score -= A + B1;\n              state = 6;\n              break;\n            }\n\n            ;\n            {\n              Scores[x] = 0;\n              return;\n            }\n          // A ~ I0, B2 ~ I0\n\n          case 6:\n            if (A > Ip) {\n              Scores[x] = 0;\n              return;\n            }\n\n            if (A < Im) {\n              Scores[x] = 0;\n              return;\n            }\n\n            B1 = B2;\n            b++;\n            B2 = I[x + dirs[b]]; // A ~ I0\n\n            if (B2 < Im) {\n              score -= A + B1;\n              state = 2;\n              break;\n            }\n\n            ;\n\n            if (B2 > Ip) {\n              score -= A + B1;\n              state = 7;\n              break;\n            }\n\n            ;\n            {\n              Scores[x] = 0;\n              return;\n            }\n          // A ~ I0, B2 ~ I0\n\n          case 8:\n            if (A > Ip) {\n              if (B2 < Im) {\n                Scores[x] = 0;\n                return;\n              }\n\n              B1 = B2;\n              b++;\n              B2 = I[x + dirs[b]];\n\n              if (B2 < Im) {\n                Scores[x] = 0;\n                return;\n              }\n\n              {\n                score -= A + B1;\n                state = 9;\n                break;\n              }\n              ;\n            }\n\n            if (A < Im) {\n              B1 = B2;\n              b++;\n              B2 = I[x + dirs[b]];\n\n              if (B2 > Ip) {\n                Scores[x] = 0;\n                return;\n              }\n\n              {\n                score -= A + B1;\n                state = 1;\n                break;\n              }\n              ;\n            }\n\n            {\n              Scores[x] = 0;\n              return;\n            }\n\n          case 9:\n            if (A < Im) {\n              if (B2 > Ip) {\n                Scores[x] = 0;\n                return;\n              }\n\n              B1 = B2;\n              b++;\n              B2 = I[x + dirs[b]];\n\n              if (B2 > Ip) {\n                Scores[x] = 0;\n                return;\n              }\n\n              {\n                score -= A + B1;\n                state = 8;\n                break;\n              }\n              ;\n            }\n\n            if (A > Ip) {\n              B1 = B2;\n              b++;\n              B2 = I[x + dirs[b]];\n\n              if (B2 < Im) {\n                Scores[x] = 0;\n                return;\n              }\n\n              {\n                score -= A + B1;\n                state = 0;\n                break;\n              }\n              ;\n            }\n\n            {\n              Scores[x] = 0;\n              return;\n            }\n\n          default:\n            //\"PB default\";\n            break;\n        } // switch(state)\n\n      } // for(a...)\n\n\n      Scores[x] = score + dirs_nb * I[x];\n    };\n\n    var lev_table_t = function () {\n      function lev_table_t(w, h, r) {\n        this.dirs = new Int32Array(1024);\n        this.dirs_count = precompute_directions(w, this.dirs, r) | 0;\n        this.scores = new Int32Array(w * h);\n        this.radius = r | 0;\n      }\n\n      return lev_table_t;\n    }();\n\n    return {\n      level_tables: [],\n      tau: 7,\n      init: function (width, height, radius, pyramid_levels) {\n        if (typeof pyramid_levels === \"undefined\") {\n          pyramid_levels = 1;\n        }\n\n        var i;\n        radius = Math.min(radius, 7);\n        radius = Math.max(radius, 3);\n\n        for (i = 0; i < pyramid_levels; ++i) {\n          this.level_tables[i] = new lev_table_t(width >> i, height >> i, radius);\n        }\n      },\n      detect: function (src, points, border) {\n        if (typeof border === \"undefined\") {\n          border = 4;\n        }\n\n        var t = this.level_tables[0];\n        var R = t.radius | 0,\n            Rm1 = R - 1 | 0;\n        var dirs = t.dirs;\n        var dirs_count = t.dirs_count | 0;\n        var opposite = dirs_count >> 1;\n        var img = src.data,\n            w = src.cols | 0,\n            h = src.rows | 0,\n            hw = w >> 1;\n        var scores = t.scores;\n        var x = 0,\n            y = 0,\n            row = 0,\n            rowx = 0,\n            ip = 0,\n            im = 0,\n            abs_score = 0,\n            score = 0;\n        var tau = this.tau | 0;\n        var number_of_points = 0,\n            pt;\n        var sx = Math.max(R + 1, border) | 0;\n        var sy = Math.max(R + 1, border) | 0;\n        var ex = Math.min(w - R - 2, w - border) | 0;\n        var ey = Math.min(h - R - 2, h - border) | 0;\n        row = sy * w + sx | 0;\n\n        for (y = sy; y < ey; ++y, row += w) {\n          for (x = sx, rowx = row; x < ex; ++x, ++rowx) {\n            ip = img[rowx] + tau, im = img[rowx] - tau;\n\n            if (im < img[rowx + R] && img[rowx + R] < ip && im < img[rowx - R] && img[rowx - R] < ip) {\n              scores[rowx] = 0;\n            } else {\n              perform_one_point(img, rowx, scores, im, ip, dirs, opposite, dirs_count);\n            }\n          }\n        } // local maxima\n\n\n        row = sy * w + sx | 0;\n\n        for (y = sy; y < ey; ++y, row += w) {\n          for (x = sx, rowx = row; x < ex; ++x, ++rowx) {\n            score = scores[rowx];\n            abs_score = Math.abs(score);\n\n            if (abs_score < 5) {\n              // if this pixel is 0, the next one will not be good enough. Skip it.\n              ++x, ++rowx;\n            } else {\n              if (third_check(scores, rowx, w) >= 3 && is_local_maxima(scores, rowx, score, hw, R)) {\n                pt = points[number_of_points];\n                pt.x = x, pt.y = y, pt.score = abs_score;\n                ++number_of_points;\n                x += Rm1, rowx += Rm1;\n              }\n            }\n          }\n        }\n\n        return number_of_points;\n      }\n    };\n  }();\n\n  global.yape = yape;\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n * Original implementation derived from OpenCV,\n * @authors Ethan Rublee, Vincent Rabaud, Gary Bradski\n */\n\n\n(function (global) {\n  \"use strict\"; //\n\n  var orb = function () {\n    var bit_pattern_31_ = new Int32Array([8, -3, 9, 5\n    /*mean (0), correlation (0)*/\n    , 4, 2, 7, -12\n    /*mean (1.12461e-05), correlation (0.0437584)*/\n    , -11, 9, -8, 2\n    /*mean (3.37382e-05), correlation (0.0617409)*/\n    , 7, -12, 12, -13\n    /*mean (5.62303e-05), correlation (0.0636977)*/\n    , 2, -13, 2, 12\n    /*mean (0.000134953), correlation (0.085099)*/\n    , 1, -7, 1, 6\n    /*mean (0.000528565), correlation (0.0857175)*/\n    , -2, -10, -2, -4\n    /*mean (0.0188821), correlation (0.0985774)*/\n    , -13, -13, -11, -8\n    /*mean (0.0363135), correlation (0.0899616)*/\n    , -13, -3, -12, -9\n    /*mean (0.121806), correlation (0.099849)*/\n    , 10, 4, 11, 9\n    /*mean (0.122065), correlation (0.093285)*/\n    , -13, -8, -8, -9\n    /*mean (0.162787), correlation (0.0942748)*/\n    , -11, 7, -9, 12\n    /*mean (0.21561), correlation (0.0974438)*/\n    , 7, 7, 12, 6\n    /*mean (0.160583), correlation (0.130064)*/\n    , -4, -5, -3, 0\n    /*mean (0.228171), correlation (0.132998)*/\n    , -13, 2, -12, -3\n    /*mean (0.00997526), correlation (0.145926)*/\n    , -9, 0, -7, 5\n    /*mean (0.198234), correlation (0.143636)*/\n    , 12, -6, 12, -1\n    /*mean (0.0676226), correlation (0.16689)*/\n    , -3, 6, -2, 12\n    /*mean (0.166847), correlation (0.171682)*/\n    , -6, -13, -4, -8\n    /*mean (0.101215), correlation (0.179716)*/\n    , 11, -13, 12, -8\n    /*mean (0.200641), correlation (0.192279)*/\n    , 4, 7, 5, 1\n    /*mean (0.205106), correlation (0.186848)*/\n    , 5, -3, 10, -3\n    /*mean (0.234908), correlation (0.192319)*/\n    , 3, -7, 6, 12\n    /*mean (0.0709964), correlation (0.210872)*/\n    , -8, -7, -6, -2\n    /*mean (0.0939834), correlation (0.212589)*/\n    , -2, 11, -1, -10\n    /*mean (0.127778), correlation (0.20866)*/\n    , -13, 12, -8, 10\n    /*mean (0.14783), correlation (0.206356)*/\n    , -7, 3, -5, -3\n    /*mean (0.182141), correlation (0.198942)*/\n    , -4, 2, -3, 7\n    /*mean (0.188237), correlation (0.21384)*/\n    , -10, -12, -6, 11\n    /*mean (0.14865), correlation (0.23571)*/\n    , 5, -12, 6, -7\n    /*mean (0.222312), correlation (0.23324)*/\n    , 5, -6, 7, -1\n    /*mean (0.229082), correlation (0.23389)*/\n    , 1, 0, 4, -5\n    /*mean (0.241577), correlation (0.215286)*/\n    , 9, 11, 11, -13\n    /*mean (0.00338507), correlation (0.251373)*/\n    , 4, 7, 4, 12\n    /*mean (0.131005), correlation (0.257622)*/\n    , 2, -1, 4, 4\n    /*mean (0.152755), correlation (0.255205)*/\n    , -4, -12, -2, 7\n    /*mean (0.182771), correlation (0.244867)*/\n    , -8, -5, -7, -10\n    /*mean (0.186898), correlation (0.23901)*/\n    , 4, 11, 9, 12\n    /*mean (0.226226), correlation (0.258255)*/\n    , 0, -8, 1, -13\n    /*mean (0.0897886), correlation (0.274827)*/\n    , -13, -2, -8, 2\n    /*mean (0.148774), correlation (0.28065)*/\n    , -3, -2, -2, 3\n    /*mean (0.153048), correlation (0.283063)*/\n    , -6, 9, -4, -9\n    /*mean (0.169523), correlation (0.278248)*/\n    , 8, 12, 10, 7\n    /*mean (0.225337), correlation (0.282851)*/\n    , 0, 9, 1, 3\n    /*mean (0.226687), correlation (0.278734)*/\n    , 7, -5, 11, -10\n    /*mean (0.00693882), correlation (0.305161)*/\n    , -13, -6, -11, 0\n    /*mean (0.0227283), correlation (0.300181)*/\n    , 10, 7, 12, 1\n    /*mean (0.125517), correlation (0.31089)*/\n    , -6, -3, -6, 12\n    /*mean (0.131748), correlation (0.312779)*/\n    , 10, -9, 12, -4\n    /*mean (0.144827), correlation (0.292797)*/\n    , -13, 8, -8, -12\n    /*mean (0.149202), correlation (0.308918)*/\n    , -13, 0, -8, -4\n    /*mean (0.160909), correlation (0.310013)*/\n    , 3, 3, 7, 8\n    /*mean (0.177755), correlation (0.309394)*/\n    , 5, 7, 10, -7\n    /*mean (0.212337), correlation (0.310315)*/\n    , -1, 7, 1, -12\n    /*mean (0.214429), correlation (0.311933)*/\n    , 3, -10, 5, 6\n    /*mean (0.235807), correlation (0.313104)*/\n    , 2, -4, 3, -10\n    /*mean (0.00494827), correlation (0.344948)*/\n    , -13, 0, -13, 5\n    /*mean (0.0549145), correlation (0.344675)*/\n    , -13, -7, -12, 12\n    /*mean (0.103385), correlation (0.342715)*/\n    , -13, 3, -11, 8\n    /*mean (0.134222), correlation (0.322922)*/\n    , -7, 12, -4, 7\n    /*mean (0.153284), correlation (0.337061)*/\n    , 6, -10, 12, 8\n    /*mean (0.154881), correlation (0.329257)*/\n    , -9, -1, -7, -6\n    /*mean (0.200967), correlation (0.33312)*/\n    , -2, -5, 0, 12\n    /*mean (0.201518), correlation (0.340635)*/\n    , -12, 5, -7, 5\n    /*mean (0.207805), correlation (0.335631)*/\n    , 3, -10, 8, -13\n    /*mean (0.224438), correlation (0.34504)*/\n    , -7, -7, -4, 5\n    /*mean (0.239361), correlation (0.338053)*/\n    , -3, -2, -1, -7\n    /*mean (0.240744), correlation (0.344322)*/\n    , 2, 9, 5, -11\n    /*mean (0.242949), correlation (0.34145)*/\n    , -11, -13, -5, -13\n    /*mean (0.244028), correlation (0.336861)*/\n    , -1, 6, 0, -1\n    /*mean (0.247571), correlation (0.343684)*/\n    , 5, -3, 5, 2\n    /*mean (0.000697256), correlation (0.357265)*/\n    , -4, -13, -4, 12\n    /*mean (0.00213675), correlation (0.373827)*/\n    , -9, -6, -9, 6\n    /*mean (0.0126856), correlation (0.373938)*/\n    , -12, -10, -8, -4\n    /*mean (0.0152497), correlation (0.364237)*/\n    , 10, 2, 12, -3\n    /*mean (0.0299933), correlation (0.345292)*/\n    , 7, 12, 12, 12\n    /*mean (0.0307242), correlation (0.366299)*/\n    , -7, -13, -6, 5\n    /*mean (0.0534975), correlation (0.368357)*/\n    , -4, 9, -3, 4\n    /*mean (0.099865), correlation (0.372276)*/\n    , 7, -1, 12, 2\n    /*mean (0.117083), correlation (0.364529)*/\n    , -7, 6, -5, 1\n    /*mean (0.126125), correlation (0.369606)*/\n    , -13, 11, -12, 5\n    /*mean (0.130364), correlation (0.358502)*/\n    , -3, 7, -2, -6\n    /*mean (0.131691), correlation (0.375531)*/\n    , 7, -8, 12, -7\n    /*mean (0.160166), correlation (0.379508)*/\n    , -13, -7, -11, -12\n    /*mean (0.167848), correlation (0.353343)*/\n    , 1, -3, 12, 12\n    /*mean (0.183378), correlation (0.371916)*/\n    , 2, -6, 3, 0\n    /*mean (0.228711), correlation (0.371761)*/\n    , -4, 3, -2, -13\n    /*mean (0.247211), correlation (0.364063)*/\n    , -1, -13, 1, 9\n    /*mean (0.249325), correlation (0.378139)*/\n    , 7, 1, 8, -6\n    /*mean (0.000652272), correlation (0.411682)*/\n    , 1, -1, 3, 12\n    /*mean (0.00248538), correlation (0.392988)*/\n    , 9, 1, 12, 6\n    /*mean (0.0206815), correlation (0.386106)*/\n    , -1, -9, -1, 3\n    /*mean (0.0364485), correlation (0.410752)*/\n    , -13, -13, -10, 5\n    /*mean (0.0376068), correlation (0.398374)*/\n    , 7, 7, 10, 12\n    /*mean (0.0424202), correlation (0.405663)*/\n    , 12, -5, 12, 9\n    /*mean (0.0942645), correlation (0.410422)*/\n    , 6, 3, 7, 11\n    /*mean (0.1074), correlation (0.413224)*/\n    , 5, -13, 6, 10\n    /*mean (0.109256), correlation (0.408646)*/\n    , 2, -12, 2, 3\n    /*mean (0.131691), correlation (0.416076)*/\n    , 3, 8, 4, -6\n    /*mean (0.165081), correlation (0.417569)*/\n    , 2, 6, 12, -13\n    /*mean (0.171874), correlation (0.408471)*/\n    , 9, -12, 10, 3\n    /*mean (0.175146), correlation (0.41296)*/\n    , -8, 4, -7, 9\n    /*mean (0.183682), correlation (0.402956)*/\n    , -11, 12, -4, -6\n    /*mean (0.184672), correlation (0.416125)*/\n    , 1, 12, 2, -8\n    /*mean (0.191487), correlation (0.386696)*/\n    , 6, -9, 7, -4\n    /*mean (0.192668), correlation (0.394771)*/\n    , 2, 3, 3, -2\n    /*mean (0.200157), correlation (0.408303)*/\n    , 6, 3, 11, 0\n    /*mean (0.204588), correlation (0.411762)*/\n    , 3, -3, 8, -8\n    /*mean (0.205904), correlation (0.416294)*/\n    , 7, 8, 9, 3\n    /*mean (0.213237), correlation (0.409306)*/\n    , -11, -5, -6, -4\n    /*mean (0.243444), correlation (0.395069)*/\n    , -10, 11, -5, 10\n    /*mean (0.247672), correlation (0.413392)*/\n    , -5, -8, -3, 12\n    /*mean (0.24774), correlation (0.411416)*/\n    , -10, 5, -9, 0\n    /*mean (0.00213675), correlation (0.454003)*/\n    , 8, -1, 12, -6\n    /*mean (0.0293635), correlation (0.455368)*/\n    , 4, -6, 6, -11\n    /*mean (0.0404971), correlation (0.457393)*/\n    , -10, 12, -8, 7\n    /*mean (0.0481107), correlation (0.448364)*/\n    , 4, -2, 6, 7\n    /*mean (0.050641), correlation (0.455019)*/\n    , -2, 0, -2, 12\n    /*mean (0.0525978), correlation (0.44338)*/\n    , -5, -8, -5, 2\n    /*mean (0.0629667), correlation (0.457096)*/\n    , 7, -6, 10, 12\n    /*mean (0.0653846), correlation (0.445623)*/\n    , -9, -13, -8, -8\n    /*mean (0.0858749), correlation (0.449789)*/\n    , -5, -13, -5, -2\n    /*mean (0.122402), correlation (0.450201)*/\n    , 8, -8, 9, -13\n    /*mean (0.125416), correlation (0.453224)*/\n    , -9, -11, -9, 0\n    /*mean (0.130128), correlation (0.458724)*/\n    , 1, -8, 1, -2\n    /*mean (0.132467), correlation (0.440133)*/\n    , 7, -4, 9, 1\n    /*mean (0.132692), correlation (0.454)*/\n    , -2, 1, -1, -4\n    /*mean (0.135695), correlation (0.455739)*/\n    , 11, -6, 12, -11\n    /*mean (0.142904), correlation (0.446114)*/\n    , -12, -9, -6, 4\n    /*mean (0.146165), correlation (0.451473)*/\n    , 3, 7, 7, 12\n    /*mean (0.147627), correlation (0.456643)*/\n    , 5, 5, 10, 8\n    /*mean (0.152901), correlation (0.455036)*/\n    , 0, -4, 2, 8\n    /*mean (0.167083), correlation (0.459315)*/\n    , -9, 12, -5, -13\n    /*mean (0.173234), correlation (0.454706)*/\n    , 0, 7, 2, 12\n    /*mean (0.18312), correlation (0.433855)*/\n    , -1, 2, 1, 7\n    /*mean (0.185504), correlation (0.443838)*/\n    , 5, 11, 7, -9\n    /*mean (0.185706), correlation (0.451123)*/\n    , 3, 5, 6, -8\n    /*mean (0.188968), correlation (0.455808)*/\n    , -13, -4, -8, 9\n    /*mean (0.191667), correlation (0.459128)*/\n    , -5, 9, -3, -3\n    /*mean (0.193196), correlation (0.458364)*/\n    , -4, -7, -3, -12\n    /*mean (0.196536), correlation (0.455782)*/\n    , 6, 5, 8, 0\n    /*mean (0.1972), correlation (0.450481)*/\n    , -7, 6, -6, 12\n    /*mean (0.199438), correlation (0.458156)*/\n    , -13, 6, -5, -2\n    /*mean (0.211224), correlation (0.449548)*/\n    , 1, -10, 3, 10\n    /*mean (0.211718), correlation (0.440606)*/\n    , 4, 1, 8, -4\n    /*mean (0.213034), correlation (0.443177)*/\n    , -2, -2, 2, -13\n    /*mean (0.234334), correlation (0.455304)*/\n    , 2, -12, 12, 12\n    /*mean (0.235684), correlation (0.443436)*/\n    , -2, -13, 0, -6\n    /*mean (0.237674), correlation (0.452525)*/\n    , 4, 1, 9, 3\n    /*mean (0.23962), correlation (0.444824)*/\n    , -6, -10, -3, -5\n    /*mean (0.248459), correlation (0.439621)*/\n    , -3, -13, -1, 1\n    /*mean (0.249505), correlation (0.456666)*/\n    , 7, 5, 12, -11\n    /*mean (0.00119208), correlation (0.495466)*/\n    , 4, -2, 5, -7\n    /*mean (0.00372245), correlation (0.484214)*/\n    , -13, 9, -9, -5\n    /*mean (0.00741116), correlation (0.499854)*/\n    , 7, 1, 8, 6\n    /*mean (0.0208952), correlation (0.499773)*/\n    , 7, -8, 7, 6\n    /*mean (0.0220085), correlation (0.501609)*/\n    , -7, -4, -7, 1\n    /*mean (0.0233806), correlation (0.496568)*/\n    , -8, 11, -7, -8\n    /*mean (0.0236505), correlation (0.489719)*/\n    , -13, 6, -12, -8\n    /*mean (0.0268781), correlation (0.503487)*/\n    , 2, 4, 3, 9\n    /*mean (0.0323324), correlation (0.501938)*/\n    , 10, -5, 12, 3\n    /*mean (0.0399235), correlation (0.494029)*/\n    , -6, -5, -6, 7\n    /*mean (0.0420153), correlation (0.486579)*/\n    , 8, -3, 9, -8\n    /*mean (0.0548021), correlation (0.484237)*/\n    , 2, -12, 2, 8\n    /*mean (0.0616622), correlation (0.496642)*/\n    , -11, -2, -10, 3\n    /*mean (0.0627755), correlation (0.498563)*/\n    , -12, -13, -7, -9\n    /*mean (0.0829622), correlation (0.495491)*/\n    , -11, 0, -10, -5\n    /*mean (0.0843342), correlation (0.487146)*/\n    , 5, -3, 11, 8\n    /*mean (0.0929937), correlation (0.502315)*/\n    , -2, -13, -1, 12\n    /*mean (0.113327), correlation (0.48941)*/\n    , -1, -8, 0, 9\n    /*mean (0.132119), correlation (0.467268)*/\n    , -13, -11, -12, -5\n    /*mean (0.136269), correlation (0.498771)*/\n    , -10, -2, -10, 11\n    /*mean (0.142173), correlation (0.498714)*/\n    , -3, 9, -2, -13\n    /*mean (0.144141), correlation (0.491973)*/\n    , 2, -3, 3, 2\n    /*mean (0.14892), correlation (0.500782)*/\n    , -9, -13, -4, 0\n    /*mean (0.150371), correlation (0.498211)*/\n    , -4, 6, -3, -10\n    /*mean (0.152159), correlation (0.495547)*/\n    , -4, 12, -2, -7\n    /*mean (0.156152), correlation (0.496925)*/\n    , -6, -11, -4, 9\n    /*mean (0.15749), correlation (0.499222)*/\n    , 6, -3, 6, 11\n    /*mean (0.159211), correlation (0.503821)*/\n    , -13, 11, -5, 5\n    /*mean (0.162427), correlation (0.501907)*/\n    , 11, 11, 12, 6\n    /*mean (0.16652), correlation (0.497632)*/\n    , 7, -5, 12, -2\n    /*mean (0.169141), correlation (0.484474)*/\n    , -1, 12, 0, 7\n    /*mean (0.169456), correlation (0.495339)*/\n    , -4, -8, -3, -2\n    /*mean (0.171457), correlation (0.487251)*/\n    , -7, 1, -6, 7\n    /*mean (0.175), correlation (0.500024)*/\n    , -13, -12, -8, -13\n    /*mean (0.175866), correlation (0.497523)*/\n    , -7, -2, -6, -8\n    /*mean (0.178273), correlation (0.501854)*/\n    , -8, 5, -6, -9\n    /*mean (0.181107), correlation (0.494888)*/\n    , -5, -1, -4, 5\n    /*mean (0.190227), correlation (0.482557)*/\n    , -13, 7, -8, 10\n    /*mean (0.196739), correlation (0.496503)*/\n    , 1, 5, 5, -13\n    /*mean (0.19973), correlation (0.499759)*/\n    , 1, 0, 10, -13\n    /*mean (0.204465), correlation (0.49873)*/\n    , 9, 12, 10, -1\n    /*mean (0.209334), correlation (0.49063)*/\n    , 5, -8, 10, -9\n    /*mean (0.211134), correlation (0.503011)*/\n    , -1, 11, 1, -13\n    /*mean (0.212), correlation (0.499414)*/\n    , -9, -3, -6, 2\n    /*mean (0.212168), correlation (0.480739)*/\n    , -1, -10, 1, 12\n    /*mean (0.212731), correlation (0.502523)*/\n    , -13, 1, -8, -10\n    /*mean (0.21327), correlation (0.489786)*/\n    , 8, -11, 10, -6\n    /*mean (0.214159), correlation (0.488246)*/\n    , 2, -13, 3, -6\n    /*mean (0.216993), correlation (0.50287)*/\n    , 7, -13, 12, -9\n    /*mean (0.223639), correlation (0.470502)*/\n    , -10, -10, -5, -7\n    /*mean (0.224089), correlation (0.500852)*/\n    , -10, -8, -8, -13\n    /*mean (0.228666), correlation (0.502629)*/\n    , 4, -6, 8, 5\n    /*mean (0.22906), correlation (0.498305)*/\n    , 3, 12, 8, -13\n    /*mean (0.233378), correlation (0.503825)*/\n    , -4, 2, -3, -3\n    /*mean (0.234323), correlation (0.476692)*/\n    , 5, -13, 10, -12\n    /*mean (0.236392), correlation (0.475462)*/\n    , 4, -13, 5, -1\n    /*mean (0.236842), correlation (0.504132)*/\n    , -9, 9, -4, 3\n    /*mean (0.236977), correlation (0.497739)*/\n    , 0, 3, 3, -9\n    /*mean (0.24314), correlation (0.499398)*/\n    , -12, 1, -6, 1\n    /*mean (0.243297), correlation (0.489447)*/\n    , 3, 2, 4, -8\n    /*mean (0.00155196), correlation (0.553496)*/\n    , -10, -10, -10, 9\n    /*mean (0.00239541), correlation (0.54297)*/\n    , 8, -13, 12, 12\n    /*mean (0.0034413), correlation (0.544361)*/\n    , -8, -12, -6, -5\n    /*mean (0.003565), correlation (0.551225)*/\n    , 2, 2, 3, 7\n    /*mean (0.00835583), correlation (0.55285)*/\n    , 10, 6, 11, -8\n    /*mean (0.00885065), correlation (0.540913)*/\n    , 6, 8, 8, -12\n    /*mean (0.0101552), correlation (0.551085)*/\n    , -7, 10, -6, 5\n    /*mean (0.0102227), correlation (0.533635)*/\n    , -3, -9, -3, 9\n    /*mean (0.0110211), correlation (0.543121)*/\n    , -1, -13, -1, 5\n    /*mean (0.0113473), correlation (0.550173)*/\n    , -3, -7, -3, 4\n    /*mean (0.0140913), correlation (0.554774)*/\n    , -8, -2, -8, 3\n    /*mean (0.017049), correlation (0.55461)*/\n    , 4, 2, 12, 12\n    /*mean (0.01778), correlation (0.546921)*/\n    , 2, -5, 3, 11\n    /*mean (0.0224022), correlation (0.549667)*/\n    , 6, -9, 11, -13\n    /*mean (0.029161), correlation (0.546295)*/\n    , 3, -1, 7, 12\n    /*mean (0.0303081), correlation (0.548599)*/\n    , 11, -1, 12, 4\n    /*mean (0.0355151), correlation (0.523943)*/\n    , -3, 0, -3, 6\n    /*mean (0.0417904), correlation (0.543395)*/\n    , 4, -11, 4, 12\n    /*mean (0.0487292), correlation (0.542818)*/\n    , 2, -4, 2, 1\n    /*mean (0.0575124), correlation (0.554888)*/\n    , -10, -6, -8, 1\n    /*mean (0.0594242), correlation (0.544026)*/\n    , -13, 7, -11, 1\n    /*mean (0.0597391), correlation (0.550524)*/\n    , -13, 12, -11, -13\n    /*mean (0.0608974), correlation (0.55383)*/\n    , 6, 0, 11, -13\n    /*mean (0.065126), correlation (0.552006)*/\n    , 0, -1, 1, 4\n    /*mean (0.074224), correlation (0.546372)*/\n    , -13, 3, -9, -2\n    /*mean (0.0808592), correlation (0.554875)*/\n    , -9, 8, -6, -3\n    /*mean (0.0883378), correlation (0.551178)*/\n    , -13, -6, -8, -2\n    /*mean (0.0901035), correlation (0.548446)*/\n    , 5, -9, 8, 10\n    /*mean (0.0949843), correlation (0.554694)*/\n    , 2, 7, 3, -9\n    /*mean (0.0994152), correlation (0.550979)*/\n    , -1, -6, -1, -1\n    /*mean (0.10045), correlation (0.552714)*/\n    , 9, 5, 11, -2\n    /*mean (0.100686), correlation (0.552594)*/\n    , 11, -3, 12, -8\n    /*mean (0.101091), correlation (0.532394)*/\n    , 3, 0, 3, 5\n    /*mean (0.101147), correlation (0.525576)*/\n    , -1, 4, 0, 10\n    /*mean (0.105263), correlation (0.531498)*/\n    , 3, -6, 4, 5\n    /*mean (0.110785), correlation (0.540491)*/\n    , -13, 0, -10, 5\n    /*mean (0.112798), correlation (0.536582)*/\n    , 5, 8, 12, 11\n    /*mean (0.114181), correlation (0.555793)*/\n    , 8, 9, 9, -6\n    /*mean (0.117431), correlation (0.553763)*/\n    , 7, -4, 8, -12\n    /*mean (0.118522), correlation (0.553452)*/\n    , -10, 4, -10, 9\n    /*mean (0.12094), correlation (0.554785)*/\n    , 7, 3, 12, 4\n    /*mean (0.122582), correlation (0.555825)*/\n    , 9, -7, 10, -2\n    /*mean (0.124978), correlation (0.549846)*/\n    , 7, 0, 12, -2\n    /*mean (0.127002), correlation (0.537452)*/\n    , -1, -6, 0, -11\n    /*mean (0.127148), correlation (0.547401)*/\n    ]);\n    var H = new jsfeat.matrix_t(3, 3, jsfeat.F32_t | jsfeat.C1_t);\n    var patch_img = new jsfeat.matrix_t(32, 32, jsfeat.U8_t | jsfeat.C1_t);\n\n    var rectify_patch = function (src, dst, angle, px, py, psize) {\n      var cosine = Math.cos(angle);\n      var sine = Math.sin(angle);\n      H.data[0] = cosine, H.data[1] = -sine, H.data[2] = (-cosine + sine) * psize * 0.5 + px, H.data[3] = sine, H.data[4] = cosine, H.data[5] = (-sine - cosine) * psize * 0.5 + py;\n      jsfeat.imgproc.warp_affine(src, dst, H, 128);\n    };\n\n    return {\n      describe: function (src, corners, count, descriptors) {\n        var DESCR_SIZE = 32; // bytes;\n\n        var i = 0,\n            b = 0,\n            px = 0.0,\n            py = 0.0,\n            angle = 0.0;\n        var t0 = 0,\n            t1 = 0,\n            val = 0;\n        var img = src.data,\n            w = src.cols,\n            h = src.rows;\n        var patch_d = patch_img.data;\n        var patch_off = 16 * 32 + 16; // center of patch\n\n        var patt = 0;\n\n        if (!(descriptors.type & jsfeat.U8_t)) {\n          // relocate to U8 type\n          descriptors.type = jsfeat.U8_t;\n          descriptors.cols = DESCR_SIZE;\n          descriptors.rows = count;\n          descriptors.channel = 1;\n          descriptors.allocate();\n        } else {\n          descriptors.resize(DESCR_SIZE, count, 1);\n        }\n\n        var descr_d = descriptors.data;\n        var descr_off = 0;\n\n        for (i = 0; i < count; ++i) {\n          px = corners[i].x;\n          py = corners[i].y;\n          angle = corners[i].angle;\n          rectify_patch(src, patch_img, angle, px, py, 32); // describe the patch\n\n          patt = 0;\n\n          for (b = 0; b < DESCR_SIZE; ++b) {\n            t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            val = t0 < t1 | 0;\n            t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            val |= (t0 < t1) << 1;\n            t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            val |= (t0 < t1) << 2;\n            t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            val |= (t0 < t1) << 3;\n            t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            val |= (t0 < t1) << 4;\n            t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            val |= (t0 < t1) << 5;\n            t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            val |= (t0 < t1) << 6;\n            t0 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            t1 = patch_d[patch_off + bit_pattern_31_[patt + 1] * 32 + bit_pattern_31_[patt]];\n            patt += 2;\n            val |= (t0 < t1) << 7;\n            descr_d[descr_off + b] = val;\n          }\n\n          descr_off += DESCR_SIZE;\n        }\n      }\n    };\n  }();\n\n  global.orb = orb;\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n * this code is a rewrite from OpenCV's Lucas-Kanade optical flow implementation\n */\n\n\n(function (global) {\n  \"use strict\"; //\n\n  var optical_flow_lk = function () {\n    // short link to shar deriv\n    var scharr_deriv = jsfeat.imgproc.scharr_derivatives;\n    return {\n      track: function (prev_pyr, curr_pyr, prev_xy, curr_xy, count, win_size, max_iter, status, eps, min_eigen_threshold) {\n        if (typeof max_iter === \"undefined\") {\n          max_iter = 30;\n        }\n\n        if (typeof status === \"undefined\") {\n          status = new Uint8Array(count);\n        }\n\n        if (typeof eps === \"undefined\") {\n          eps = 0.01;\n        }\n\n        if (typeof min_eigen_threshold === \"undefined\") {\n          min_eigen_threshold = 0.0001;\n        }\n\n        var half_win = (win_size - 1) * 0.5;\n        var win_area = win_size * win_size | 0;\n        var win_area2 = win_area << 1;\n        var prev_imgs = prev_pyr.data,\n            next_imgs = curr_pyr.data;\n        var img_prev = prev_imgs[0].data,\n            img_next = next_imgs[0].data;\n        var w0 = prev_imgs[0].cols,\n            h0 = prev_imgs[0].rows,\n            lw = 0,\n            lh = 0;\n        var iwin_node = jsfeat.cache.get_buffer(win_area << 2);\n        var deriv_iwin_node = jsfeat.cache.get_buffer(win_area2 << 2);\n        var deriv_lev_node = jsfeat.cache.get_buffer(h0 * (w0 << 1) << 2);\n        var deriv_m = new jsfeat.matrix_t(w0, h0, jsfeat.S32C2_t, deriv_lev_node.data);\n        var iwin_buf = iwin_node.i32;\n        var deriv_iwin = deriv_iwin_node.i32;\n        var deriv_lev = deriv_lev_node.i32;\n        var dstep = 0,\n            src = 0,\n            dsrc = 0,\n            iptr = 0,\n            diptr = 0,\n            jptr = 0;\n        var lev_sc = 0.0,\n            prev_x = 0.0,\n            prev_y = 0.0,\n            next_x = 0.0,\n            next_y = 0.0;\n        var prev_delta_x = 0.0,\n            prev_delta_y = 0.0,\n            delta_x = 0.0,\n            delta_y = 0.0;\n        var iprev_x = 0,\n            iprev_y = 0,\n            inext_x = 0,\n            inext_y = 0;\n        var i = 0,\n            j = 0,\n            x = 0,\n            y = 0,\n            level = 0,\n            ptid = 0,\n            iter = 0;\n        var brd_tl = 0,\n            brd_r = 0,\n            brd_b = 0;\n        var a = 0.0,\n            b = 0.0,\n            b1 = 0.0,\n            b2 = 0.0; // fixed point math\n\n        var W_BITS14 = 14;\n        var W_BITS4 = 14;\n        var W_BITS1m5 = W_BITS4 - 5;\n        var W_BITS1m51 = 1 << W_BITS1m5 - 1;\n        var W_BITS14_ = 1 << W_BITS14;\n        var W_BITS41 = 1 << W_BITS4 - 1;\n        var FLT_SCALE = 1.0 / (1 << 20);\n        var iw00 = 0,\n            iw01 = 0,\n            iw10 = 0,\n            iw11 = 0,\n            ival = 0,\n            ixval = 0,\n            iyval = 0;\n        var A11 = 0.0,\n            A12 = 0.0,\n            A22 = 0.0,\n            D = 0.0,\n            min_eig = 0.0;\n        var FLT_EPSILON = 0.00000011920929;\n        eps *= eps; // reset status\n\n        for (; i < count; ++i) {\n          status[i] = 1;\n        }\n\n        var max_level = prev_pyr.levels - 1 | 0;\n        level = max_level;\n\n        for (; level >= 0; --level) {\n          lev_sc = 1.0 / (1 << level);\n          lw = w0 >> level;\n          lh = h0 >> level;\n          dstep = lw << 1;\n          img_prev = prev_imgs[level].data;\n          img_next = next_imgs[level].data;\n          brd_r = lw - win_size | 0;\n          brd_b = lh - win_size | 0; // calculate level derivatives\n\n          scharr_deriv(prev_imgs[level], deriv_m); // iterate through points\n\n          for (ptid = 0; ptid < count; ++ptid) {\n            i = ptid << 1;\n            j = i + 1;\n            prev_x = prev_xy[i] * lev_sc;\n            prev_y = prev_xy[j] * lev_sc;\n\n            if (level == max_level) {\n              next_x = prev_x;\n              next_y = prev_y;\n            } else {\n              next_x = curr_xy[i] * 2.0;\n              next_y = curr_xy[j] * 2.0;\n            }\n\n            curr_xy[i] = next_x;\n            curr_xy[j] = next_y;\n            prev_x -= half_win;\n            prev_y -= half_win;\n            iprev_x = prev_x | 0;\n            iprev_y = prev_y | 0; // border check\n\n            x = iprev_x <= brd_tl | iprev_x >= brd_r | iprev_y <= brd_tl | iprev_y >= brd_b;\n\n            if (x != 0) {\n              if (level == 0) {\n                status[ptid] = 0;\n              }\n\n              continue;\n            }\n\n            a = prev_x - iprev_x;\n            b = prev_y - iprev_y;\n            iw00 = (1.0 - a) * (1.0 - b) * W_BITS14_ + 0.5 | 0;\n            iw01 = a * (1.0 - b) * W_BITS14_ + 0.5 | 0;\n            iw10 = (1.0 - a) * b * W_BITS14_ + 0.5 | 0;\n            iw11 = W_BITS14_ - iw00 - iw01 - iw10;\n            A11 = 0.0, A12 = 0.0, A22 = 0.0; // extract the patch from the first image, compute covariation matrix of derivatives\n\n            for (y = 0; y < win_size; ++y) {\n              src = (y + iprev_y) * lw + iprev_x | 0;\n              dsrc = src << 1;\n              iptr = y * win_size | 0;\n              diptr = iptr << 1;\n\n              for (x = 0; x < win_size; ++x, ++src, ++iptr, dsrc += 2) {\n                ival = img_prev[src] * iw00 + img_prev[src + 1] * iw01 + img_prev[src + lw] * iw10 + img_prev[src + lw + 1] * iw11;\n                ival = ival + W_BITS1m51 >> W_BITS1m5;\n                ixval = deriv_lev[dsrc] * iw00 + deriv_lev[dsrc + 2] * iw01 + deriv_lev[dsrc + dstep] * iw10 + deriv_lev[dsrc + dstep + 2] * iw11;\n                ixval = ixval + W_BITS41 >> W_BITS4;\n                iyval = deriv_lev[dsrc + 1] * iw00 + deriv_lev[dsrc + 3] * iw01 + deriv_lev[dsrc + dstep + 1] * iw10 + deriv_lev[dsrc + dstep + 3] * iw11;\n                iyval = iyval + W_BITS41 >> W_BITS4;\n                iwin_buf[iptr] = ival;\n                deriv_iwin[diptr++] = ixval;\n                deriv_iwin[diptr++] = iyval;\n                A11 += ixval * ixval;\n                A12 += ixval * iyval;\n                A22 += iyval * iyval;\n              }\n            }\n\n            A11 *= FLT_SCALE;\n            A12 *= FLT_SCALE;\n            A22 *= FLT_SCALE;\n            D = A11 * A22 - A12 * A12;\n            min_eig = (A22 + A11 - Math.sqrt((A11 - A22) * (A11 - A22) + 4.0 * A12 * A12)) / win_area2;\n\n            if (min_eig < min_eigen_threshold || D < FLT_EPSILON) {\n              if (level == 0) {\n                status[ptid] = 0;\n              }\n\n              continue;\n            }\n\n            D = 1.0 / D;\n            next_x -= half_win;\n            next_y -= half_win;\n            prev_delta_x = 0.0;\n            prev_delta_y = 0.0;\n\n            for (iter = 0; iter < max_iter; ++iter) {\n              inext_x = next_x | 0;\n              inext_y = next_y | 0;\n              x = inext_x <= brd_tl | inext_x >= brd_r | inext_y <= brd_tl | inext_y >= brd_b;\n\n              if (x != 0) {\n                if (level == 0) {\n                  status[ptid] = 0;\n                }\n\n                break;\n              }\n\n              a = next_x - inext_x;\n              b = next_y - inext_y;\n              iw00 = (1.0 - a) * (1.0 - b) * W_BITS14_ + 0.5 | 0;\n              iw01 = a * (1.0 - b) * W_BITS14_ + 0.5 | 0;\n              iw10 = (1.0 - a) * b * W_BITS14_ + 0.5 | 0;\n              iw11 = W_BITS14_ - iw00 - iw01 - iw10;\n              b1 = 0.0, b2 = 0.0;\n\n              for (y = 0; y < win_size; ++y) {\n                jptr = (y + inext_y) * lw + inext_x | 0;\n                iptr = y * win_size | 0;\n                diptr = iptr << 1;\n\n                for (x = 0; x < win_size; ++x, ++jptr, ++iptr) {\n                  ival = img_next[jptr] * iw00 + img_next[jptr + 1] * iw01 + img_next[jptr + lw] * iw10 + img_next[jptr + lw + 1] * iw11;\n                  ival = ival + W_BITS1m51 >> W_BITS1m5;\n                  ival = ival - iwin_buf[iptr];\n                  b1 += ival * deriv_iwin[diptr++];\n                  b2 += ival * deriv_iwin[diptr++];\n                }\n              }\n\n              b1 *= FLT_SCALE;\n              b2 *= FLT_SCALE;\n              delta_x = (A12 * b2 - A22 * b1) * D;\n              delta_y = (A12 * b1 - A11 * b2) * D;\n              next_x += delta_x;\n              next_y += delta_y;\n              curr_xy[i] = next_x + half_win;\n              curr_xy[j] = next_y + half_win;\n\n              if (delta_x * delta_x + delta_y * delta_y <= eps) {\n                break;\n              }\n\n              if (iter > 0 && Math.abs(delta_x + prev_delta_x) < 0.01 && Math.abs(delta_y + prev_delta_y) < 0.01) {\n                curr_xy[i] -= delta_x * 0.5;\n                curr_xy[j] -= delta_y * 0.5;\n                break;\n              }\n\n              prev_delta_x = delta_x;\n              prev_delta_y = delta_y;\n            }\n          } // points loop\n\n        } // levels loop\n\n\n        jsfeat.cache.put_buffer(iwin_node);\n        jsfeat.cache.put_buffer(deriv_iwin_node);\n        jsfeat.cache.put_buffer(deriv_lev_node);\n      }\n    };\n  }();\n\n  global.optical_flow_lk = optical_flow_lk;\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * this code is a rewrite from https://github.com/mtschirs/js-objectdetect implementation\r\n * @author Martin Tschirsich / http://www.tu-darmstadt.de/~m_t\r\n */\n\n\n(function (global) {\n  \"use strict\"; //\n\n  var haar = function () {\n    var _group_func = function (r1, r2) {\n      var distance = r1.width * 0.25 + 0.5 | 0;\n      return r2.x <= r1.x + distance && r2.x >= r1.x - distance && r2.y <= r1.y + distance && r2.y >= r1.y - distance && r2.width <= r1.width * 1.5 + 0.5 | 0 && r2.width * 1.5 + 0.5 | 0 >= r1.width;\n    };\n\n    return {\n      edges_density: 0.07,\n      detect_single_scale: function (int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, scale, classifier) {\n        var win_w = classifier.size[0] * scale | 0,\n            win_h = classifier.size[1] * scale | 0,\n            step_x = 0.5 * scale + 1.5 | 0,\n            step_y = step_x;\n        var i,\n            j,\n            k,\n            x,\n            y,\n            ex = width - win_w | 0,\n            ey = height - win_h | 0;\n        var w1 = width + 1 | 0,\n            edge_dens,\n            mean,\n            variance,\n            std;\n        var inv_area = 1.0 / (win_w * win_h);\n        var stages,\n            stage,\n            trees,\n            tree,\n            sn,\n            tn,\n            fn,\n            found = true,\n            stage_thresh,\n            stage_sum,\n            tree_sum,\n            feature,\n            features;\n        var fi_a, fi_b, fi_c, fi_d, fw, fh;\n        var ii_a = 0,\n            ii_b = win_w,\n            ii_c = win_h * w1,\n            ii_d = ii_c + win_w;\n        var edges_thresh = win_w * win_h * 0xff * this.edges_density | 0; // if too much gradient we also can skip\n        //var edges_thresh_high = ((win_w*win_h) * 0xff * 0.3)|0;\n\n        var rects = [];\n\n        for (y = 0; y < ey; y += step_y) {\n          ii_a = y * w1;\n\n          for (x = 0; x < ex; x += step_x, ii_a += step_x) {\n            mean = int_sum[ii_a] - int_sum[ii_a + ii_b] - int_sum[ii_a + ii_c] + int_sum[ii_a + ii_d]; // canny prune\n\n            if (int_canny_sum) {\n              edge_dens = int_canny_sum[ii_a] - int_canny_sum[ii_a + ii_b] - int_canny_sum[ii_a + ii_c] + int_canny_sum[ii_a + ii_d];\n\n              if (edge_dens < edges_thresh || mean < 20) {\n                x += step_x, ii_a += step_x;\n                continue;\n              }\n            }\n\n            mean *= inv_area;\n            variance = (int_sqsum[ii_a] - int_sqsum[ii_a + ii_b] - int_sqsum[ii_a + ii_c] + int_sqsum[ii_a + ii_d]) * inv_area - mean * mean;\n            std = variance > 0. ? Math.sqrt(variance) : 1;\n            stages = classifier.complexClassifiers;\n            sn = stages.length;\n            found = true;\n\n            for (i = 0; i < sn; ++i) {\n              stage = stages[i];\n              stage_thresh = stage.threshold;\n              trees = stage.simpleClassifiers;\n              tn = trees.length;\n              stage_sum = 0;\n\n              for (j = 0; j < tn; ++j) {\n                tree = trees[j];\n                tree_sum = 0;\n                features = tree.features;\n                fn = features.length;\n\n                if (tree.tilted === 1) {\n                  for (k = 0; k < fn; ++k) {\n                    feature = features[k];\n                    fi_a = ~~(x + feature[0] * scale) + ~~(y + feature[1] * scale) * w1;\n                    fw = ~~(feature[2] * scale);\n                    fh = ~~(feature[3] * scale);\n                    fi_b = fw * w1;\n                    fi_c = fh * w1;\n                    tree_sum += (int_tilted[fi_a] - int_tilted[fi_a + fw + fi_b] - int_tilted[fi_a - fh + fi_c] + int_tilted[fi_a + fw - fh + fi_b + fi_c]) * feature[4];\n                  }\n                } else {\n                  for (k = 0; k < fn; ++k) {\n                    feature = features[k];\n                    fi_a = ~~(x + feature[0] * scale) + ~~(y + feature[1] * scale) * w1;\n                    fw = ~~(feature[2] * scale);\n                    fh = ~~(feature[3] * scale);\n                    fi_c = fh * w1;\n                    tree_sum += (int_sum[fi_a] - int_sum[fi_a + fw] - int_sum[fi_a + fi_c] + int_sum[fi_a + fi_c + fw]) * feature[4];\n                  }\n                }\n\n                stage_sum += tree_sum * inv_area < tree.threshold * std ? tree.left_val : tree.right_val;\n              }\n\n              if (stage_sum < stage_thresh) {\n                found = false;\n                break;\n              }\n            }\n\n            if (found) {\n              rects.push({\n                \"x\": x,\n                \"y\": y,\n                \"width\": win_w,\n                \"height\": win_h,\n                \"neighbor\": 1,\n                \"confidence\": stage_sum\n              });\n              x += step_x, ii_a += step_x;\n            }\n          }\n        }\n\n        return rects;\n      },\n      detect_multi_scale: function (int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, classifier, scale_factor, scale_min) {\n        if (typeof scale_factor === \"undefined\") {\n          scale_factor = 1.2;\n        }\n\n        if (typeof scale_min === \"undefined\") {\n          scale_min = 1.0;\n        }\n\n        var win_w = classifier.size[0];\n        var win_h = classifier.size[1];\n        var rects = [];\n\n        while (scale_min * win_w < width && scale_min * win_h < height) {\n          rects = rects.concat(this.detect_single_scale(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, scale_min, classifier));\n          scale_min *= scale_factor;\n        }\n\n        return rects;\n      },\n      // OpenCV method to group detected rectangles\n      group_rectangles: function (rects, min_neighbors) {\n        if (typeof min_neighbors === \"undefined\") {\n          min_neighbors = 1;\n        }\n\n        var i,\n            j,\n            n = rects.length;\n        var node = [];\n\n        for (i = 0; i < n; ++i) {\n          node[i] = {\n            \"parent\": -1,\n            \"element\": rects[i],\n            \"rank\": 0\n          };\n        }\n\n        for (i = 0; i < n; ++i) {\n          if (!node[i].element) continue;\n          var root = i;\n\n          while (node[root].parent != -1) root = node[root].parent;\n\n          for (j = 0; j < n; ++j) {\n            if (i != j && node[j].element && _group_func(node[i].element, node[j].element)) {\n              var root2 = j;\n\n              while (node[root2].parent != -1) root2 = node[root2].parent;\n\n              if (root2 != root) {\n                if (node[root].rank > node[root2].rank) node[root2].parent = root;else {\n                  node[root].parent = root2;\n                  if (node[root].rank == node[root2].rank) node[root2].rank++;\n                  root = root2;\n                }\n                /* compress path from node2 to the root: */\n\n                var temp,\n                    node2 = j;\n\n                while (node[node2].parent != -1) {\n                  temp = node2;\n                  node2 = node[node2].parent;\n                  node[temp].parent = root;\n                }\n                /* compress path from node to the root: */\n\n\n                node2 = i;\n\n                while (node[node2].parent != -1) {\n                  temp = node2;\n                  node2 = node[node2].parent;\n                  node[temp].parent = root;\n                }\n              }\n            }\n          }\n        }\n\n        var idx_seq = [];\n        var class_idx = 0;\n\n        for (i = 0; i < n; i++) {\n          j = -1;\n          var node1 = i;\n\n          if (node[node1].element) {\n            while (node[node1].parent != -1) node1 = node[node1].parent;\n\n            if (node[node1].rank >= 0) node[node1].rank = ~class_idx++;\n            j = ~node[node1].rank;\n          }\n\n          idx_seq[i] = j;\n        }\n\n        var comps = [];\n\n        for (i = 0; i < class_idx + 1; ++i) {\n          comps[i] = {\n            \"neighbors\": 0,\n            \"x\": 0,\n            \"y\": 0,\n            \"width\": 0,\n            \"height\": 0,\n            \"confidence\": 0\n          };\n        } // count number of neighbors\n\n\n        for (i = 0; i < n; ++i) {\n          var r1 = rects[i];\n          var idx = idx_seq[i];\n          if (comps[idx].neighbors == 0) comps[idx].confidence = r1.confidence;\n          ++comps[idx].neighbors;\n          comps[idx].x += r1.x;\n          comps[idx].y += r1.y;\n          comps[idx].width += r1.width;\n          comps[idx].height += r1.height;\n          comps[idx].confidence = Math.max(comps[idx].confidence, r1.confidence);\n        }\n\n        var seq2 = []; // calculate average bounding box\n\n        for (i = 0; i < class_idx; ++i) {\n          n = comps[i].neighbors;\n          if (n >= min_neighbors) seq2.push({\n            \"x\": (comps[i].x * 2 + n) / (2 * n),\n            \"y\": (comps[i].y * 2 + n) / (2 * n),\n            \"width\": (comps[i].width * 2 + n) / (2 * n),\n            \"height\": (comps[i].height * 2 + n) / (2 * n),\n            \"neighbors\": comps[i].neighbors,\n            \"confidence\": comps[i].confidence\n          });\n        }\n\n        var result_seq = [];\n        n = seq2.length; // filter out small face rectangles inside large face rectangles\n\n        for (i = 0; i < n; ++i) {\n          var r1 = seq2[i];\n          var flag = true;\n\n          for (j = 0; j < n; ++j) {\n            var r2 = seq2[j];\n            var distance = r2.width * 0.25 + 0.5 | 0;\n\n            if (i != j && r1.x >= r2.x - distance && r1.y >= r2.y - distance && r1.x + r1.width <= r2.x + r2.width + distance && r1.y + r1.height <= r2.y + r2.height + distance && (r2.neighbors > Math.max(3, r1.neighbors) || r1.neighbors < 3)) {\n              flag = false;\n              break;\n            }\n          }\n\n          if (flag) result_seq.push(r1);\n        }\n\n        return result_seq;\n      }\n    };\n  }();\n\n  global.haar = haar;\n})(jsfeat);\n/**\r\n * BBF: Brightness Binary Feature\r\n *\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * this code is a rewrite from https://github.com/liuliu/ccv implementation\r\n * @author Liu Liu / http://liuliu.me/\r\n *\r\n * The original paper refers to: YEF∗ Real-Time Object Detection, Yotam Abramson and Bruno Steux\r\n */\n\n\n(function (global) {\n  \"use strict\"; //\n\n  var bbf = function () {\n    var _group_func = function (r1, r2) {\n      var distance = r1.width * 0.25 + 0.5 | 0;\n      return r2.x <= r1.x + distance && r2.x >= r1.x - distance && r2.y <= r1.y + distance && r2.y >= r1.y - distance && r2.width <= r1.width * 1.5 + 0.5 | 0 && r2.width * 1.5 + 0.5 | 0 >= r1.width;\n    };\n\n    var img_pyr = new jsfeat.pyramid_t(1);\n    return {\n      interval: 4,\n      scale: 1.1486,\n      next: 5,\n      scale_to: 1,\n      // make features local copy\n      // to avoid array allocation with each scale\n      // this is strange but array works faster than Int32 version???\n      prepare_cascade: function (cascade) {\n        var sn = cascade.stage_classifier.length;\n\n        for (var j = 0; j < sn; j++) {\n          var orig_feature = cascade.stage_classifier[j].feature;\n          var f_cnt = cascade.stage_classifier[j].count;\n          var feature = cascade.stage_classifier[j]._feature = new Array(f_cnt);\n\n          for (var k = 0; k < f_cnt; k++) {\n            feature[k] = {\n              \"size\": orig_feature[k].size,\n              \"px\": new Array(orig_feature[k].size),\n              \"pz\": new Array(orig_feature[k].size),\n              \"nx\": new Array(orig_feature[k].size),\n              \"nz\": new Array(orig_feature[k].size)\n            };\n          }\n        }\n      },\n      build_pyramid: function (src, min_width, min_height, interval) {\n        if (typeof interval === \"undefined\") {\n          interval = 4;\n        }\n\n        var sw = src.cols,\n            sh = src.rows;\n        var i = 0,\n            nw = 0,\n            nh = 0;\n        var new_pyr = false;\n        var src0 = src,\n            src1 = src;\n        var data_type = jsfeat.U8_t | jsfeat.C1_t;\n        this.interval = interval;\n        this.scale = Math.pow(2, 1 / (this.interval + 1));\n        this.next = this.interval + 1 | 0;\n        this.scale_to = Math.log(Math.min(sw / min_width, sh / min_height)) / Math.log(this.scale) | 0;\n        var pyr_l = (this.scale_to + this.next * 2) * 4 | 0;\n\n        if (img_pyr.levels != pyr_l) {\n          img_pyr.levels = pyr_l;\n          img_pyr.data = new Array(pyr_l);\n          new_pyr = true;\n          img_pyr.data[0] = src; // first is src\n        }\n\n        for (i = 1; i <= this.interval; ++i) {\n          nw = sw / Math.pow(this.scale, i) | 0;\n          nh = sh / Math.pow(this.scale, i) | 0;\n          src0 = img_pyr.data[i << 2];\n\n          if (new_pyr || nw != src0.cols || nh != src0.rows) {\n            img_pyr.data[i << 2] = new jsfeat.matrix_t(nw, nh, data_type);\n            src0 = img_pyr.data[i << 2];\n          }\n\n          jsfeat.imgproc.resample(src, src0, nw, nh);\n        }\n\n        for (i = this.next; i < this.scale_to + this.next * 2; ++i) {\n          src1 = img_pyr.data[(i << 2) - (this.next << 2)];\n          src0 = img_pyr.data[i << 2];\n          nw = src1.cols >> 1;\n          nh = src1.rows >> 1;\n\n          if (new_pyr || nw != src0.cols || nh != src0.rows) {\n            img_pyr.data[i << 2] = new jsfeat.matrix_t(nw, nh, data_type);\n            src0 = img_pyr.data[i << 2];\n          }\n\n          jsfeat.imgproc.pyrdown(src1, src0);\n        }\n\n        for (i = this.next * 2; i < this.scale_to + this.next * 2; ++i) {\n          src1 = img_pyr.data[(i << 2) - (this.next << 2)];\n          nw = src1.cols >> 1;\n          nh = src1.rows >> 1;\n          src0 = img_pyr.data[(i << 2) + 1];\n\n          if (new_pyr || nw != src0.cols || nh != src0.rows) {\n            img_pyr.data[(i << 2) + 1] = new jsfeat.matrix_t(nw, nh, data_type);\n            src0 = img_pyr.data[(i << 2) + 1];\n          }\n\n          jsfeat.imgproc.pyrdown(src1, src0, 1, 0); //\n\n          src0 = img_pyr.data[(i << 2) + 2];\n\n          if (new_pyr || nw != src0.cols || nh != src0.rows) {\n            img_pyr.data[(i << 2) + 2] = new jsfeat.matrix_t(nw, nh, data_type);\n            src0 = img_pyr.data[(i << 2) + 2];\n          }\n\n          jsfeat.imgproc.pyrdown(src1, src0, 0, 1); //\n\n          src0 = img_pyr.data[(i << 2) + 3];\n\n          if (new_pyr || nw != src0.cols || nh != src0.rows) {\n            img_pyr.data[(i << 2) + 3] = new jsfeat.matrix_t(nw, nh, data_type);\n            src0 = img_pyr.data[(i << 2) + 3];\n          }\n\n          jsfeat.imgproc.pyrdown(src1, src0, 1, 1);\n        }\n\n        return img_pyr;\n      },\n      detect: function (pyramid, cascade) {\n        var interval = this.interval;\n        var scale = this.scale;\n        var next = this.next;\n        var scale_upto = this.scale_to;\n        var i = 0,\n            j = 0,\n            k = 0,\n            n = 0,\n            x = 0,\n            y = 0,\n            q = 0,\n            sn = 0,\n            f_cnt = 0,\n            q_cnt = 0,\n            p = 0,\n            pmin = 0,\n            nmax = 0,\n            f = 0,\n            i4 = 0,\n            qw = 0,\n            qh = 0;\n        var sum = 0.0,\n            alpha,\n            feature,\n            orig_feature,\n            feature_k,\n            feature_o,\n            flag = true,\n            shortcut = true;\n        var scale_x = 1.0,\n            scale_y = 1.0;\n        var dx = [0, 1, 0, 1];\n        var dy = [0, 0, 1, 1];\n        var seq = [];\n        var pyr = pyramid.data,\n            bpp = 1,\n            bpp2 = 2,\n            bpp4 = 4;\n        var u8 = [],\n            u8o = [0, 0, 0];\n        var step = [0, 0, 0];\n        var paddings = [0, 0, 0];\n\n        for (i = 0; i < scale_upto; i++) {\n          i4 = i << 2;\n          qw = pyr[i4 + (next << 3)].cols - (cascade.width >> 2);\n          qh = pyr[i4 + (next << 3)].rows - (cascade.height >> 2);\n          step[0] = pyr[i4].cols * bpp;\n          step[1] = pyr[i4 + (next << 2)].cols * bpp;\n          step[2] = pyr[i4 + (next << 3)].cols * bpp;\n          paddings[0] = pyr[i4].cols * bpp4 - qw * bpp4;\n          paddings[1] = pyr[i4 + (next << 2)].cols * bpp2 - qw * bpp2;\n          paddings[2] = pyr[i4 + (next << 3)].cols * bpp - qw * bpp;\n          sn = cascade.stage_classifier.length;\n\n          for (j = 0; j < sn; j++) {\n            orig_feature = cascade.stage_classifier[j].feature;\n            feature = cascade.stage_classifier[j]._feature;\n            f_cnt = cascade.stage_classifier[j].count;\n\n            for (k = 0; k < f_cnt; k++) {\n              feature_k = feature[k];\n              feature_o = orig_feature[k];\n              q_cnt = feature_o.size | 0;\n\n              for (q = 0; q < q_cnt; q++) {\n                feature_k.px[q] = feature_o.px[q] * bpp + feature_o.py[q] * step[feature_o.pz[q]];\n                feature_k.pz[q] = feature_o.pz[q];\n                feature_k.nx[q] = feature_o.nx[q] * bpp + feature_o.ny[q] * step[feature_o.nz[q]];\n                feature_k.nz[q] = feature_o.nz[q];\n              }\n            }\n          }\n\n          u8[0] = pyr[i4].data;\n          u8[1] = pyr[i4 + (next << 2)].data;\n\n          for (q = 0; q < 4; q++) {\n            u8[2] = pyr[i4 + (next << 3) + q].data;\n            u8o[0] = dx[q] * bpp2 + dy[q] * (pyr[i4].cols * bpp2);\n            u8o[1] = dx[q] * bpp + dy[q] * (pyr[i4 + (next << 2)].cols * bpp);\n            u8o[2] = 0;\n\n            for (y = 0; y < qh; y++) {\n              for (x = 0; x < qw; x++) {\n                sum = 0;\n                flag = true;\n                sn = cascade.stage_classifier.length;\n\n                for (j = 0; j < sn; j++) {\n                  sum = 0;\n                  alpha = cascade.stage_classifier[j].alpha;\n                  feature = cascade.stage_classifier[j]._feature;\n                  f_cnt = cascade.stage_classifier[j].count;\n\n                  for (k = 0; k < f_cnt; k++) {\n                    feature_k = feature[k];\n                    pmin = u8[feature_k.pz[0]][u8o[feature_k.pz[0]] + feature_k.px[0]];\n                    nmax = u8[feature_k.nz[0]][u8o[feature_k.nz[0]] + feature_k.nx[0]];\n\n                    if (pmin <= nmax) {\n                      sum += alpha[k << 1];\n                    } else {\n                      shortcut = true;\n                      q_cnt = feature_k.size;\n\n                      for (f = 1; f < q_cnt; f++) {\n                        if (feature_k.pz[f] >= 0) {\n                          p = u8[feature_k.pz[f]][u8o[feature_k.pz[f]] + feature_k.px[f]];\n\n                          if (p < pmin) {\n                            if (p <= nmax) {\n                              shortcut = false;\n                              break;\n                            }\n\n                            pmin = p;\n                          }\n                        }\n\n                        if (feature_k.nz[f] >= 0) {\n                          n = u8[feature_k.nz[f]][u8o[feature_k.nz[f]] + feature_k.nx[f]];\n\n                          if (n > nmax) {\n                            if (pmin <= n) {\n                              shortcut = false;\n                              break;\n                            }\n\n                            nmax = n;\n                          }\n                        }\n                      }\n\n                      sum += shortcut ? alpha[(k << 1) + 1] : alpha[k << 1];\n                    }\n                  }\n\n                  if (sum < cascade.stage_classifier[j].threshold) {\n                    flag = false;\n                    break;\n                  }\n                }\n\n                if (flag) {\n                  seq.push({\n                    \"x\": (x * 4 + dx[q] * 2) * scale_x,\n                    \"y\": (y * 4 + dy[q] * 2) * scale_y,\n                    \"width\": cascade.width * scale_x,\n                    \"height\": cascade.height * scale_y,\n                    \"neighbor\": 1,\n                    \"confidence\": sum\n                  });\n                  ++x;\n                  u8o[0] += bpp4;\n                  u8o[1] += bpp2;\n                  u8o[2] += bpp;\n                }\n\n                u8o[0] += bpp4;\n                u8o[1] += bpp2;\n                u8o[2] += bpp;\n              }\n\n              u8o[0] += paddings[0];\n              u8o[1] += paddings[1];\n              u8o[2] += paddings[2];\n            }\n          }\n\n          scale_x *= scale;\n          scale_y *= scale;\n        }\n\n        return seq;\n      },\n      // OpenCV method to group detected rectangles\n      group_rectangles: function (rects, min_neighbors) {\n        if (typeof min_neighbors === \"undefined\") {\n          min_neighbors = 1;\n        }\n\n        var i,\n            j,\n            n = rects.length;\n        var node = [];\n\n        for (i = 0; i < n; ++i) {\n          node[i] = {\n            \"parent\": -1,\n            \"element\": rects[i],\n            \"rank\": 0\n          };\n        }\n\n        for (i = 0; i < n; ++i) {\n          if (!node[i].element) continue;\n          var root = i;\n\n          while (node[root].parent != -1) root = node[root].parent;\n\n          for (j = 0; j < n; ++j) {\n            if (i != j && node[j].element && _group_func(node[i].element, node[j].element)) {\n              var root2 = j;\n\n              while (node[root2].parent != -1) root2 = node[root2].parent;\n\n              if (root2 != root) {\n                if (node[root].rank > node[root2].rank) node[root2].parent = root;else {\n                  node[root].parent = root2;\n                  if (node[root].rank == node[root2].rank) node[root2].rank++;\n                  root = root2;\n                }\n                /* compress path from node2 to the root: */\n\n                var temp,\n                    node2 = j;\n\n                while (node[node2].parent != -1) {\n                  temp = node2;\n                  node2 = node[node2].parent;\n                  node[temp].parent = root;\n                }\n                /* compress path from node to the root: */\n\n\n                node2 = i;\n\n                while (node[node2].parent != -1) {\n                  temp = node2;\n                  node2 = node[node2].parent;\n                  node[temp].parent = root;\n                }\n              }\n            }\n          }\n        }\n\n        var idx_seq = [];\n        var class_idx = 0;\n\n        for (i = 0; i < n; i++) {\n          j = -1;\n          var node1 = i;\n\n          if (node[node1].element) {\n            while (node[node1].parent != -1) node1 = node[node1].parent;\n\n            if (node[node1].rank >= 0) node[node1].rank = ~class_idx++;\n            j = ~node[node1].rank;\n          }\n\n          idx_seq[i] = j;\n        }\n\n        var comps = [];\n\n        for (i = 0; i < class_idx + 1; ++i) {\n          comps[i] = {\n            \"neighbors\": 0,\n            \"x\": 0,\n            \"y\": 0,\n            \"width\": 0,\n            \"height\": 0,\n            \"confidence\": 0\n          };\n        } // count number of neighbors\n\n\n        for (i = 0; i < n; ++i) {\n          var r1 = rects[i];\n          var idx = idx_seq[i];\n          if (comps[idx].neighbors == 0) comps[idx].confidence = r1.confidence;\n          ++comps[idx].neighbors;\n          comps[idx].x += r1.x;\n          comps[idx].y += r1.y;\n          comps[idx].width += r1.width;\n          comps[idx].height += r1.height;\n          comps[idx].confidence = Math.max(comps[idx].confidence, r1.confidence);\n        }\n\n        var seq2 = []; // calculate average bounding box\n\n        for (i = 0; i < class_idx; ++i) {\n          n = comps[i].neighbors;\n          if (n >= min_neighbors) seq2.push({\n            \"x\": (comps[i].x * 2 + n) / (2 * n),\n            \"y\": (comps[i].y * 2 + n) / (2 * n),\n            \"width\": (comps[i].width * 2 + n) / (2 * n),\n            \"height\": (comps[i].height * 2 + n) / (2 * n),\n            \"neighbors\": comps[i].neighbors,\n            \"confidence\": comps[i].confidence\n          });\n        }\n\n        var result_seq = [];\n        n = seq2.length; // filter out small face rectangles inside large face rectangles\n\n        for (i = 0; i < n; ++i) {\n          var r1 = seq2[i];\n          var flag = true;\n\n          for (j = 0; j < n; ++j) {\n            var r2 = seq2[j];\n            var distance = r2.width * 0.25 + 0.5 | 0;\n\n            if (i != j && r1.x >= r2.x - distance && r1.y >= r2.y - distance && r1.x + r1.width <= r2.x + r2.width + distance && r1.y + r1.height <= r2.y + r2.height + distance && (r2.neighbors > Math.max(3, r1.neighbors) || r1.neighbors < 3)) {\n              flag = false;\n              break;\n            }\n          }\n\n          if (flag) result_seq.push(r1);\n        }\n\n        return result_seq;\n      }\n    };\n  }();\n\n  global.bbf = bbf;\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n */\n\n\n(function (lib) {\n  \"use strict\";\n\n  if (typeof module === \"undefined\" || typeof module.exports === \"undefined\") {\n    // in a browser, define its namespaces in global\n    window.jsfeat = lib;\n  } else {\n    // in commonjs, or when AMD wrapping has been applied, define its namespaces as exports\n    module.exports = lib;\n  }\n})(jsfeat);","map":{"version":3,"names":["jsfeat","REVISION","global","EPSILON","FLT_MIN","U8_t","S32_t","F32_t","S64_t","F64_t","C1_t","C2_t","C3_t","C4_t","_data_type_size","Int32Array","get_data_type","type","get_channel","get_data_type_size","COLOR_RGBA2GRAY","COLOR_RGB2GRAY","COLOR_BGRA2GRAY","COLOR_BGR2GRAY","BOX_BLUR_NOSCALE","SVD_U_T","SVD_V_T","data_t","size_in_bytes","buffer","size","ArrayBuffer","length","u8","Uint8Array","i32","f32","Float32Array","f64","Float64Array","matrix_t","c","r","data_type","data_buffer","channel","cols","rows","allocate","data","prototype","copy_to","other","od","td","i","n","resize","ch","new_size","pyramid_t","levels","Array","pyrdown","imgproc","start_w","start_h","build","input","skip_first_level","a","b","j","keypoint_t","x","y","score","level","angle","U8C1_t","U8C3_t","U8C4_t","F32C1_t","F32C2_t","S32C1_t","S32C2_t","cache","_pool_node_t","next","_pool_head","_pool_tail","_pool_size","capacity","data_size","node","get_buffer","put_buffer","math","qsort_stack","get_gaussian_kernel","sigma","kernel","t","sigma_x","scale_2x","sum","kern_node","_kernel","Math","exp","perspective_4point_transform","model","src_x0","src_y0","dst_x0","dst_y0","src_x1","src_y1","dst_x1","dst_y1","src_x2","src_y2","dst_x2","dst_y2","src_x3","src_y3","dst_x3","dst_y3","t1","t2","t4","t5","t6","t7","t8","t9","t10","t11","t14","t15","t16","t18","t20","t21","t24","t25","t26","t27","t28","t30","t32","t35","t41","t42","t43","t46","t48","t51","t55","Hr0","Hr1","Hr2","Hr3","Hr4","Hr5","Hr6","Hr7","Hl0","Hl1","Hl2","Hl3","Hl4","Hl5","Hl6","Hl7","t12","t23","t31","t44","t47","t49","t50","mat","qsort","array","low","high","cmp","isort_thresh","ta","tb","tc","sp","left","right","m","ptr","ptr2","d","left0","left1","right0","right1","pivot","swap_cnt","stack","min","median","w","middle","ll","hh","matmath","identity","M","value","src","cols_1","len","k","transpose","At","A","nrows","ncols","Ai","Ati","pAt","ad","atd","multiply","C","B","Ap","pA","pB","p_B","Cp","mcols","bd","cd","multiply_ABt","mrows","multiply_AtB","multiply_AAt","pCdiag","p_A","pC","pCt","multiply_AtA","p_C","p_CC","identity_3x3","dt","invert_3x3","from","to","invA","t13","t17","multiply_3x3","Cd","Ad","Bd","m1_0","m1_1","m1_2","m1_3","m1_4","m1_5","m1_6","m1_7","m1_8","m2_0","m2_1","m2_2","m2_3","m2_4","m2_5","m2_6","m2_7","m2_8","mat3x3_determinant","md","determinant_3x3","M11","M12","M13","M21","M22","M23","M31","M32","M33","linalg","swap","i0","i1","hypot","abs","sqrt","JacobiImpl","astep","W","V","vstep","eps","l","idx","_in","_in2","iters","max_iter","mv","val","p","s","a0","b0","indR_buff","indC_buff","indR","indC","JacobiSVDImpl","_W","Vt","n1","minval","iter","max","Aj","Vi","Vj","changed","t0","sd","beta","gamma","delta","seed","val0","asum","W_buff","lu_solve","alpha","cholesky_solve","col","row","col2","cs","rs","inv_diag","svd_decompose","U","options","at","_m","_n","a_buff","w_buff","v_buff","a_mt","w_mt","v_mt","svd_solve","X","pu","pv","xsum","tol","u_buff","u_mt","ud","wd","vd","svd_invert","pa","id","eigenVV","vects","vals","motion_model","sqr","iso_normalize_points","T0","T1","count","cx0","cy0","d0","s0","cx1","cy1","d1","s1","dx","dy","SQRT2","have_collinear_points","points","dx1","dy1","dx2","dy2","AtA","AtB","affine2d","run","t0d","t1d","pt0","pt1","px","py","b_buff","b_mt","error","err","check_subset","mLtL","Evec","homography2d","LtL","evd","Y","smx","smy","cmx","cmy","sMx","sMy","cMx","cMy","ww","negative","fp0","fp1","fp2","fp3","tp0","tp1","tp2","tp3","A11","A12","A13","A21","A22","A23","A31","A32","A33","B11","B12","B13","B21","B22","B23","B31","B32","B33","detA","detB","ransac_params_t","thresh","prob","update_iters","_eps","max_iters","num","log","denom","pow","round","motion_estimator","get_subset","need_cnt","max_cnt","from_sub","to_sub","max_try","indices","ssiter","idx_i","ok","floor","random","find_inliers","mask","numinliers","f","ransac","params","model_points","niters","result","subset0","subset1","found","mc","mr","m_buff","ms_buff","err_buff","curr_mask","inliers_max","nmodels","lmeds","min_median","_resample_u8","dst","nw","nh","xofs_count","h","src_d","dst_d","scale_x","scale_y","inv_scale_256","sx","sy","sx1","sx2","fsx1","fsx2","dxn","beta1","buf_node","sum_node","xofs_node","buf","xofs","_resample","scale","_convol_u8","filter","kernel_size","half_kernel","dp","sum1","sum2","sum3","f0","fk","w2","w3","w4","_convol","grayscale","code","ir","jr","coeff_r","coeff_g","coeff_b","cn","cn2","cn3","dst_u8","resample","box_blur_gray","radius","h2","end","windowSize","radiusPlusOne","radiusPlus2","tmp_buff","dstIndex","srcIndex","nextPixelIndex","previousPixelIndex","data_i32","data_u8","hold","gaussian_blur","is_u8","buf_sz","filt_node","_w2","_h2","sptr","sline","dptr","dline","scharr_derivatives","dstep","x1","e","srow0","srow1","srow2","drow","trow0","trow1","img","gxgy","buf0_node","buf1_node","sobel_derivatives","compute_integral_image","dst_sum","dst_sqsum","dst_tilted","w0","h0","w1","s2","pup","v","equalize_histogram","prev","hist0","norm","hist0_node","canny","low_thresh","high_thresh","grad","_grad","suppress","tg22x","tg67x","dxdy_node","map_node","stack_node","map","dxdy","dxdy_m","row0","row1","row2","map_w","map_i","stack_i","warp_perspective","transform","fill_value","src_width","src_height","dst_width","dst_height","off","ixs","iys","xs","ys","xs0","ys0","ws","sc","p0","p1","m00","m01","m02","m10","m11","m12","m20","m21","m22","warp_affine","skindetector","g","width","height","fast_corners","offsets16","threshold_tab","pixel_off","score_diff","_cmp_offsets","pixel","step","pattern_size","offsets","_cmp_score_16","threshold","N","_threshold","set_threshold","detect","corners","border","K","vt","m3","cpbuf_node","cpbuf","ey","ex","_count","corners_cnt","pt","score_func","thresh_tab","tab","ncorners","cornerpos","curr","pprev","jp1","jm1","pixel0","pixel1","pixel2","pixel3","pixel4","pixel5","pixel6","pixel7","pixel8","pixel9","pixel10","pixel11","pixel12","pixel13","pixel14","pixel15","yape06","compute_laplacian","Dxx","Dyy","yrow","hessian_min_eigen_value","tr","Dxy","Dyx","Ixx","Iyy","Ixy","sqrt_delta","laplacian_threshold","min_eigen_value_threshold","srd_d","lap_buf","laplacian","lv","rowx","min_eigen_value","number_of_points","lap_thresh","eigen_thresh","yape","precompute_directions","dirs","R","third_check","Sb","is_local_maxima","neighborhood","perform_one_point","I","Scores","Im","Ip","opposite","dirs_nb","B0","B1","B2","state","lev_table_t","dirs_count","scores","level_tables","tau","init","pyramid_levels","Rm1","hw","ip","im","abs_score","orb","bit_pattern_31_","H","patch_img","rectify_patch","psize","cosine","cos","sine","sin","describe","descriptors","DESCR_SIZE","patch_d","patch_off","patt","descr_d","descr_off","optical_flow_lk","scharr_deriv","track","prev_pyr","curr_pyr","prev_xy","curr_xy","win_size","status","min_eigen_threshold","half_win","win_area","win_area2","prev_imgs","next_imgs","img_prev","img_next","lw","lh","iwin_node","deriv_iwin_node","deriv_lev_node","deriv_m","iwin_buf","deriv_iwin","deriv_lev","dsrc","iptr","diptr","jptr","lev_sc","prev_x","prev_y","next_x","next_y","prev_delta_x","prev_delta_y","delta_x","delta_y","iprev_x","iprev_y","inext_x","inext_y","ptid","brd_tl","brd_r","brd_b","b1","b2","W_BITS14","W_BITS4","W_BITS1m5","W_BITS1m51","W_BITS14_","W_BITS41","FLT_SCALE","iw00","iw01","iw10","iw11","ival","ixval","iyval","D","min_eig","FLT_EPSILON","max_level","haar","_group_func","r1","r2","distance","edges_density","detect_single_scale","int_sum","int_sqsum","int_tilted","int_canny_sum","classifier","win_w","win_h","step_x","step_y","edge_dens","mean","variance","std","inv_area","stages","stage","trees","tree","sn","tn","fn","stage_thresh","stage_sum","tree_sum","feature","features","fi_a","fi_b","fi_c","fi_d","fw","fh","ii_a","ii_b","ii_c","ii_d","edges_thresh","rects","complexClassifiers","simpleClassifiers","tilted","left_val","right_val","push","detect_multi_scale","scale_factor","scale_min","concat","group_rectangles","min_neighbors","element","root","parent","root2","rank","temp","node2","idx_seq","class_idx","node1","comps","neighbors","confidence","seq2","result_seq","flag","bbf","img_pyr","interval","scale_to","prepare_cascade","cascade","stage_classifier","orig_feature","f_cnt","_feature","build_pyramid","min_width","min_height","sw","sh","new_pyr","src0","src1","pyr_l","pyramid","scale_upto","q","q_cnt","pmin","nmax","i4","qw","qh","feature_k","feature_o","shortcut","seq","pyr","bpp","bpp2","bpp4","u8o","paddings","pz","nx","ny","nz","lib","module","exports","window"],"sources":["C:/Users/perez/OneDrive/Escritorio/map/node_modules/jsfeat/build/jsfeat.js"],"sourcesContent":["/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n */\r\n\r\n// namespace ?\r\nvar jsfeat = jsfeat || { REVISION: 'ALPHA' };\r\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    // CONSTANTS\r\n    var EPSILON = 0.0000001192092896;\r\n    var FLT_MIN = 1E-37;\r\n\r\n    // implementation from CCV project\r\n    // currently working only with u8,s32,f32\r\n    var U8_t = 0x0100,\r\n        S32_t = 0x0200,\r\n        F32_t = 0x0400,\r\n        S64_t = 0x0800,\r\n        F64_t = 0x1000;\r\n\r\n    var C1_t = 0x01,\r\n        C2_t = 0x02,\r\n        C3_t = 0x03,\r\n        C4_t = 0x04;\r\n\r\n    var _data_type_size = new Int32Array([ -1, 1, 4, -1, 4, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, 8 ]);\r\n\r\n    var get_data_type = (function () {\r\n        return function(type) {\r\n            return (type & 0xFF00);\r\n        }\r\n    })();\r\n\r\n    var get_channel = (function () {\r\n        return function(type) {\r\n            return (type & 0xFF);\r\n        }\r\n    })();\r\n\r\n    var get_data_type_size = (function () {\r\n        return function(type) {\r\n            return _data_type_size[(type & 0xFF00) >> 8];\r\n        }\r\n    })();\r\n\r\n    // color conversion\r\n    var COLOR_RGBA2GRAY = 0;\r\n    var COLOR_RGB2GRAY = 1;\r\n    var COLOR_BGRA2GRAY = 2;\r\n    var COLOR_BGR2GRAY = 3;\r\n\r\n    // box blur option\r\n    var BOX_BLUR_NOSCALE = 0x01;\r\n    // svd options\r\n    var SVD_U_T = 0x01;\r\n    var SVD_V_T = 0x02;\r\n\r\n    var data_t = (function () {\r\n        function data_t(size_in_bytes, buffer) {\r\n            // we need align size to multiple of 8\r\n            this.size = ((size_in_bytes + 7) | 0) & -8;\r\n            if (typeof buffer === \"undefined\") { \r\n                this.buffer = new ArrayBuffer(this.size);\r\n            } else {\r\n                this.buffer = buffer;\r\n                this.size = buffer.length;\r\n            }\r\n            this.u8 = new Uint8Array(this.buffer);\r\n            this.i32 = new Int32Array(this.buffer);\r\n            this.f32 = new Float32Array(this.buffer);\r\n            this.f64 = new Float64Array(this.buffer);\r\n        }\r\n        return data_t;\r\n    })();\r\n\r\n    var matrix_t = (function () {\r\n        // columns, rows, data_type\r\n        function matrix_t(c, r, data_type, data_buffer) {\r\n            this.type = get_data_type(data_type)|0;\r\n            this.channel = get_channel(data_type)|0;\r\n            this.cols = c|0;\r\n            this.rows = r|0;\r\n            if (typeof data_buffer === \"undefined\") { \r\n                this.allocate();\r\n            } else {\r\n                this.buffer = data_buffer;\r\n                // data user asked for\r\n                this.data = this.type&U8_t ? this.buffer.u8 : (this.type&S32_t ? this.buffer.i32 : (this.type&F32_t ? this.buffer.f32 : this.buffer.f64));\r\n            }\r\n        }\r\n        matrix_t.prototype.allocate = function() {\r\n            // clear references\r\n            delete this.data;\r\n            delete this.buffer;\r\n            //\r\n            this.buffer = new data_t((this.cols * get_data_type_size(this.type) * this.channel) * this.rows);\r\n            this.data = this.type&U8_t ? this.buffer.u8 : (this.type&S32_t ? this.buffer.i32 : (this.type&F32_t ? this.buffer.f32 : this.buffer.f64));\r\n        }\r\n        matrix_t.prototype.copy_to = function(other) {\r\n            var od = other.data, td = this.data;\r\n            var i = 0, n = (this.cols*this.rows*this.channel)|0;\r\n            for(; i < n-4; i+=4) {\r\n                od[i] = td[i];\r\n                od[i+1] = td[i+1];\r\n                od[i+2] = td[i+2];\r\n                od[i+3] = td[i+3];\r\n            }\r\n            for(; i < n; ++i) {\r\n                od[i] = td[i];\r\n            }\r\n        }\r\n        matrix_t.prototype.resize = function(c, r, ch) {\r\n            if (typeof ch === \"undefined\") { ch = this.channel; }\r\n            // relocate buffer only if new size doesnt fit\r\n            var new_size = (c * get_data_type_size(this.type) * ch) * r;\r\n            if(new_size > this.buffer.size) {\r\n                this.cols = c;\r\n                this.rows = r;\r\n                this.channel = ch;\r\n                this.allocate();\r\n            } else {\r\n                this.cols = c;\r\n                this.rows = r;\r\n                this.channel = ch;\r\n            }\r\n        }\r\n\r\n        return matrix_t;\r\n    })();\r\n\r\n    var pyramid_t = (function () {\r\n\r\n        function pyramid_t(levels) {\r\n            this.levels = levels|0;\r\n            this.data = new Array(levels);\r\n            this.pyrdown = jsfeat.imgproc.pyrdown;\r\n        }\r\n\r\n        pyramid_t.prototype.allocate = function(start_w, start_h, data_type) {\r\n            var i = this.levels;\r\n            while(--i >= 0) {\r\n                this.data[i] = new matrix_t(start_w >> i, start_h >> i, data_type);\r\n            }\r\n        }\r\n\r\n        pyramid_t.prototype.build = function(input, skip_first_level) {\r\n            if (typeof skip_first_level === \"undefined\") { skip_first_level = true; }\r\n            // just copy data to first level\r\n            var i = 2, a = input, b = this.data[0];\r\n            if(!skip_first_level) {\r\n                var j=input.cols*input.rows;\r\n                while(--j >= 0) {\r\n                    b.data[j] = input.data[j];\r\n                }\r\n            }\r\n            b = this.data[1];\r\n            this.pyrdown(a, b);\r\n            for(; i < this.levels; ++i) {\r\n                a = b;\r\n                b = this.data[i];\r\n                this.pyrdown(a, b);\r\n            }\r\n        }\r\n\r\n        return pyramid_t;\r\n    })();\r\n\r\n    var keypoint_t = (function () {\r\n        function keypoint_t(x,y,score,level,angle) {\r\n            if (typeof x === \"undefined\") { x=0; }\r\n            if (typeof y === \"undefined\") { y=0; }\r\n            if (typeof score === \"undefined\") { score=0; }\r\n            if (typeof level === \"undefined\") { level=0; }\r\n            if (typeof angle === \"undefined\") { angle=-1.0; }\r\n\r\n            this.x = x;\r\n            this.y = y;\r\n            this.score = score;\r\n            this.level = level;\r\n            this.angle = angle;\r\n        }\r\n        return keypoint_t;\r\n    })();\r\n\r\n\r\n    // data types\r\n    global.U8_t = U8_t;\r\n    global.S32_t = S32_t;\r\n    global.F32_t = F32_t;\r\n    global.S64_t = S64_t;\r\n    global.F64_t = F64_t;\r\n    // data channels\r\n    global.C1_t = C1_t;\r\n    global.C2_t = C2_t;\r\n    global.C3_t = C3_t;\r\n    global.C4_t = C4_t;\r\n\r\n    // popular formats\r\n    global.U8C1_t = U8_t | C1_t;\r\n    global.U8C3_t = U8_t | C3_t;\r\n    global.U8C4_t = U8_t | C4_t;\r\n\r\n    global.F32C1_t = F32_t | C1_t;\r\n    global.F32C2_t = F32_t | C2_t;\r\n    global.S32C1_t = S32_t | C1_t;\r\n    global.S32C2_t = S32_t | C2_t;\r\n\r\n    // constants\r\n    global.EPSILON = EPSILON;\r\n    global.FLT_MIN = FLT_MIN;\r\n\r\n    // color convert\r\n    global.COLOR_RGBA2GRAY = COLOR_RGBA2GRAY;\r\n    global.COLOR_RGB2GRAY = COLOR_RGB2GRAY;\r\n    global.COLOR_BGRA2GRAY = COLOR_BGRA2GRAY;\r\n    global.COLOR_BGR2GRAY = COLOR_BGR2GRAY;\r\n\r\n    // options\r\n    global.BOX_BLUR_NOSCALE = BOX_BLUR_NOSCALE;\r\n    global.SVD_U_T = SVD_U_T;\r\n    global.SVD_V_T = SVD_V_T;\r\n\r\n    global.get_data_type = get_data_type;\r\n    global.get_channel = get_channel;\r\n    global.get_data_type_size = get_data_type_size;\r\n\r\n    global.data_t = data_t;\r\n    global.matrix_t = matrix_t;\r\n    global.pyramid_t = pyramid_t;\r\n    global.keypoint_t = keypoint_t;\r\n\r\n})(jsfeat);\r\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var cache = (function() {\n\n        // very primitive array cache, still need testing if it helps\n        // of course V8 has its own powerful cache sys but i'm not sure\n        // it caches several multichannel 640x480 buffer creations each frame\n\n        var _pool_node_t = (function () {\n            function _pool_node_t(size_in_bytes) {\n                this.next = null;\n                this.data = new jsfeat.data_t(size_in_bytes);\n                this.size = this.data.size;\n                this.buffer = this.data.buffer;\n                this.u8 = this.data.u8;\n                this.i32 = this.data.i32;\n                this.f32 = this.data.f32;\n                this.f64 = this.data.f64;\n            }\n            _pool_node_t.prototype.resize = function(size_in_bytes) {\n                delete this.data;\n                this.data = new jsfeat.data_t(size_in_bytes);\n                this.size = this.data.size;\n                this.buffer = this.data.buffer;\n                this.u8 = this.data.u8;\n                this.i32 = this.data.i32;\n                this.f32 = this.data.f32;\n                this.f64 = this.data.f64;\n            }\n            return _pool_node_t;\n        })();\n\n        var _pool_head, _pool_tail;\n        var _pool_size = 0;\n\n        return {\n\n            allocate: function(capacity, data_size) {\n                _pool_head = _pool_tail = new _pool_node_t(data_size);\n                for (var i = 0; i < capacity; ++i) {\n                    var node = new _pool_node_t(data_size);\n                    _pool_tail = _pool_tail.next = node;\n\n                    _pool_size++;\n                }\n            },\n\n            get_buffer: function(size_in_bytes) {\n                // assume we have enough free nodes\n                var node = _pool_head;\n                _pool_head = _pool_head.next;\n                _pool_size--;\n\n                if(size_in_bytes > node.size) {\n                    node.resize(size_in_bytes);\n                }\n\n                return node;\n            },\n\n            put_buffer: function(node) {\n                _pool_tail = _pool_tail.next = node;\n                _pool_size++;\n            }\n        };\n    })();\n\n    global.cache = cache;\n    // for now we dont need more than 30 buffers\n    // if having cache sys really helps we can add auto extending sys\n    cache.allocate(30, 640*4);\n\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    var math = (function() {\r\n\r\n        var qsort_stack = new Int32Array(48*2);\r\n\r\n        return {\r\n            get_gaussian_kernel: function(size, sigma, kernel, data_type) {\r\n                var i=0,x=0.0,t=0.0,sigma_x=0.0,scale_2x=0.0;\r\n                var sum = 0.0;\r\n                var kern_node = jsfeat.cache.get_buffer(size<<2);\r\n                var _kernel = kern_node.f32;//new Float32Array(size);\r\n\r\n                if((size&1) == 1 && size <= 7 && sigma <= 0) {\r\n                    switch(size>>1) {\r\n                        case 0:\r\n                        _kernel[0] = 1.0;\r\n                        sum = 1.0;\r\n                        break;\r\n                        case 1:\r\n                        _kernel[0] = 0.25, _kernel[1] = 0.5, _kernel[2] = 0.25;\r\n                        sum = 0.25+0.5+0.25;\r\n                        break;\r\n                        case 2:\r\n                        _kernel[0] = 0.0625, _kernel[1] = 0.25, _kernel[2] = 0.375, \r\n                        _kernel[3] = 0.25, _kernel[4] = 0.0625;\r\n                        sum = 0.0625+0.25+0.375+0.25+0.0625;\r\n                        break;\r\n                        case 3:\r\n                        _kernel[0] = 0.03125, _kernel[1] = 0.109375, _kernel[2] = 0.21875, \r\n                        _kernel[3] = 0.28125, _kernel[4] = 0.21875, _kernel[5] = 0.109375, _kernel[6] = 0.03125;\r\n                        sum = 0.03125+0.109375+0.21875+0.28125+0.21875+0.109375+0.03125;\r\n                        break;\r\n                    }\r\n                } else {\r\n                    sigma_x = sigma > 0 ? sigma : ((size-1)*0.5 - 1.0)*0.3 + 0.8;\r\n                    scale_2x = -0.5/(sigma_x*sigma_x);\r\n\r\n                    for( ; i < size; ++i )\r\n                    {\r\n                        x = i - (size-1)*0.5;\r\n                        t = Math.exp(scale_2x*x*x);\r\n\r\n                        _kernel[i] = t;\r\n                        sum += t;\r\n                    }\r\n                }\r\n\r\n                if(data_type & jsfeat.U8_t) {\r\n                    // int based kernel\r\n                    sum = 256.0/sum;\r\n                    for (i = 0; i < size; ++i) {\r\n                        kernel[i] = (_kernel[i] * sum + 0.5)|0;\r\n                    }\r\n                } else {\r\n                    // classic kernel\r\n                    sum = 1.0/sum;\r\n                    for (i = 0; i < size; ++i) {\r\n                        kernel[i] = _kernel[i] * sum;\r\n                    }\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(kern_node);\r\n            },\r\n\r\n            // model is 3x3 matrix_t\r\n            perspective_4point_transform: function(model, src_x0, src_y0, dst_x0, dst_y0,\r\n                                                        src_x1, src_y1, dst_x1, dst_y1,\r\n                                                        src_x2, src_y2, dst_x2, dst_y2,\r\n                                                        src_x3, src_y3, dst_x3, dst_y3) {\r\n                var t1 = src_x0;\r\n                var t2 = src_x2;\r\n                var t4 = src_y1;\r\n                var t5 = t1 * t2 * t4;\r\n                var t6 = src_y3;\r\n                var t7 = t1 * t6;\r\n                var t8 = t2 * t7;\r\n                var t9 = src_y2;\r\n                var t10 = t1 * t9;\r\n                var t11 = src_x1;\r\n                var t14 = src_y0;\r\n                var t15 = src_x3;\r\n                var t16 = t14 * t15;\r\n                var t18 = t16 * t11;\r\n                var t20 = t15 * t11 * t9;\r\n                var t21 = t15 * t4;\r\n                var t24 = t15 * t9;\r\n                var t25 = t2 * t4;\r\n                var t26 = t6 * t2;\r\n                var t27 = t6 * t11;\r\n                var t28 = t9 * t11;\r\n                var t30 = 1.0 / (t21-t24 - t25 + t26 - t27 + t28);\r\n                var t32 = t1 * t15;\r\n                var t35 = t14 * t11;\r\n                var t41 = t4 * t1;\r\n                var t42 = t6 * t41;\r\n                var t43 = t14 * t2;\r\n                var t46 = t16 * t9;\r\n                var t48 = t14 * t9 * t11;\r\n                var t51 = t4 * t6 * t2;\r\n                var t55 = t6 * t14;\r\n                var Hr0 = -(t8-t5 + t10 * t11 - t11 * t7 - t16 * t2 + t18 - t20 + t21 * t2) * t30;\r\n                var Hr1 = (t5 - t8 - t32 * t4 + t32 * t9 + t18 - t2 * t35 + t27 * t2 - t20) * t30;\r\n                var Hr2 = t1;\r\n                var Hr3 = (-t9 * t7 + t42 + t43 * t4 - t16 * t4 + t46 - t48 + t27 * t9 - t51) * t30;\r\n                var Hr4 = (-t42 + t41 * t9 - t55 * t2 + t46 - t48 + t55 * t11 + t51 - t21 * t9) * t30;\r\n                var Hr5 = t14;\r\n                var Hr6 = (-t10 + t41 + t43 - t35 + t24 - t21 - t26 + t27) * t30;\r\n                var Hr7 = (-t7 + t10 + t16 - t43 + t27 - t28 - t21 + t25) * t30;\r\n                \r\n                t1 = dst_x0;\r\n                t2 = dst_x2;\r\n                t4 = dst_y1;\r\n                t5 = t1 * t2 * t4;\r\n                t6 = dst_y3;\r\n                t7 = t1 * t6;\r\n                t8 = t2 * t7;\r\n                t9 = dst_y2;\r\n                t10 = t1 * t9;\r\n                t11 = dst_x1;\r\n                t14 = dst_y0;\r\n                t15 = dst_x3;\r\n                t16 = t14 * t15;\r\n                t18 = t16 * t11;\r\n                t20 = t15 * t11 * t9;\r\n                t21 = t15 * t4;\r\n                t24 = t15 * t9;\r\n                t25 = t2 * t4;\r\n                t26 = t6 * t2;\r\n                t27 = t6 * t11;\r\n                t28 = t9 * t11;\r\n                t30 = 1.0 / (t21-t24 - t25 + t26 - t27 + t28);\r\n                t32 = t1 * t15;\r\n                t35 = t14 * t11;\r\n                t41 = t4 * t1;\r\n                t42 = t6 * t41;\r\n                t43 = t14 * t2;\r\n                t46 = t16 * t9;\r\n                t48 = t14 * t9 * t11;\r\n                t51 = t4 * t6 * t2;\r\n                t55 = t6 * t14;\r\n                var Hl0 = -(t8-t5 + t10 * t11 - t11 * t7 - t16 * t2 + t18 - t20 + t21 * t2) * t30;\r\n                var Hl1 = (t5 - t8 - t32 * t4 + t32 * t9 + t18 - t2 * t35 + t27 * t2 - t20) * t30;\r\n                var Hl2 = t1;\r\n                var Hl3 = (-t9 * t7 + t42 + t43 * t4 - t16 * t4 + t46 - t48 + t27 * t9 - t51) * t30;\r\n                var Hl4 = (-t42 + t41 * t9 - t55 * t2 + t46 - t48 + t55 * t11 + t51 - t21 * t9) * t30;\r\n                var Hl5 = t14;\r\n                var Hl6 = (-t10 + t41 + t43 - t35 + t24 - t21 - t26 + t27) * t30;\r\n                var Hl7 = (-t7 + t10 + t16 - t43 + t27 - t28 - t21 + t25) * t30;\r\n\r\n                // the following code computes R = Hl * inverse Hr\r\n                t2 = Hr4-Hr7*Hr5;\r\n                t4 = Hr0*Hr4;\r\n                t5 = Hr0*Hr5;\r\n                t7 = Hr3*Hr1;\r\n                t8 = Hr2*Hr3;\r\n                t10 = Hr1*Hr6;\r\n                var t12 = Hr2*Hr6;\r\n                t15 = 1.0 / (t4-t5*Hr7-t7+t8*Hr7+t10*Hr5-t12*Hr4);\r\n                t18 = -Hr3+Hr5*Hr6;\r\n                var t23 = -Hr3*Hr7+Hr4*Hr6;\r\n                t28 = -Hr1+Hr2*Hr7;\r\n                var t31 = Hr0-t12;\r\n                t35 = Hr0*Hr7-t10;\r\n                t41 = -Hr1*Hr5+Hr2*Hr4;\r\n                var t44 = t5-t8;\r\n                var t47 = t4-t7;\r\n                t48 = t2*t15;\r\n                var t49 = t28*t15;\r\n                var t50 = t41*t15;\r\n                var mat = model.data;\r\n                mat[0] = Hl0*t48+Hl1*(t18*t15)-Hl2*(t23*t15);\r\n                mat[1] = Hl0*t49+Hl1*(t31*t15)-Hl2*(t35*t15);\r\n                mat[2] = -Hl0*t50-Hl1*(t44*t15)+Hl2*(t47*t15);\r\n                mat[3] = Hl3*t48+Hl4*(t18*t15)-Hl5*(t23*t15);\r\n                mat[4] = Hl3*t49+Hl4*(t31*t15)-Hl5*(t35*t15);\r\n                mat[5] = -Hl3*t50-Hl4*(t44*t15)+Hl5*(t47*t15);\r\n                mat[6] = Hl6*t48+Hl7*(t18*t15)-t23*t15;\r\n                mat[7] = Hl6*t49+Hl7*(t31*t15)-t35*t15;\r\n                mat[8] = -Hl6*t50-Hl7*(t44*t15)+t47*t15;\r\n            },\r\n\r\n            // The current implementation was derived from *BSD system qsort():\r\n            // Copyright (c) 1992, 1993\r\n            // The Regents of the University of California.  All rights reserved.\r\n            qsort: function(array, low, high, cmp) {\r\n                var isort_thresh = 7;\r\n                var t,ta,tb,tc;\r\n                var sp = 0,left=0,right=0,i=0,n=0,m=0,ptr=0,ptr2=0,d=0;\r\n                var left0=0,left1=0,right0=0,right1=0,pivot=0,a=0,b=0,c=0,swap_cnt=0;\r\n\r\n                var stack = qsort_stack;\r\n\r\n                if( (high-low+1) <= 1 ) return;\r\n\r\n                stack[0] = low;\r\n                stack[1] = high;\r\n\r\n                while( sp >= 0 ) {\r\n                \r\n                    left = stack[sp<<1];\r\n                    right = stack[(sp<<1)+1];\r\n                    sp--;\r\n\r\n                    for(;;) {\r\n                        n = (right - left) + 1;\r\n\r\n                        if( n <= isort_thresh ) {\r\n                        //insert_sort:\r\n                            for( ptr = left + 1; ptr <= right; ptr++ ) {\r\n                                for( ptr2 = ptr; ptr2 > left && cmp(array[ptr2],array[ptr2-1]); ptr2--) {\r\n                                    t = array[ptr2];\r\n                                    array[ptr2] = array[ptr2-1];\r\n                                    array[ptr2-1] = t;\r\n                                }\r\n                            }\r\n                            break;\r\n                        } else {\r\n                            swap_cnt = 0;\r\n\r\n                            left0 = left;\r\n                            right0 = right;\r\n                            pivot = left + (n>>1);\r\n\r\n                            if( n > 40 ) {\r\n                                d = n >> 3;\r\n                                a = left, b = left + d, c = left + (d<<1);\r\n                                ta = array[a],tb = array[b],tc = array[c];\r\n                                left = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))\r\n                                                  : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));\r\n\r\n                                a = pivot - d, b = pivot, c = pivot + d;\r\n                                ta = array[a],tb = array[b],tc = array[c];\r\n                                pivot = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))\r\n                                                  : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));\r\n\r\n                                a = right - (d<<1), b = right - d, c = right;\r\n                                ta = array[a],tb = array[b],tc = array[c];\r\n                                right = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))\r\n                                                  : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));\r\n                            }\r\n\r\n                            a = left, b = pivot, c = right;\r\n                            ta = array[a],tb = array[b],tc = array[c];\r\n                            pivot = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))   \r\n                                               : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));\r\n                            if( pivot != left0 ) {\r\n                                t = array[pivot];\r\n                                array[pivot] = array[left0];\r\n                                array[left0] = t;\r\n                                pivot = left0;\r\n                            }\r\n                            left = left1 = left0 + 1;\r\n                            right = right1 = right0;\r\n\r\n                            ta = array[pivot];\r\n                            for(;;) {\r\n                                while( left <= right && !cmp(ta, array[left]) ) {\r\n                                    if( !cmp(array[left], ta) ) {\r\n                                        if( left > left1 ) {\r\n                                            t = array[left1];\r\n                                            array[left1] = array[left];\r\n                                            array[left] = t;\r\n                                        }\r\n                                        swap_cnt = 1;\r\n                                        left1++;\r\n                                    }\r\n                                    left++;\r\n                                }\r\n\r\n                                while( left <= right && !cmp(array[right], ta) ) {\r\n                                    if( !cmp(ta, array[right]) ) {\r\n                                        if( right < right1 ) {\r\n                                            t = array[right1];\r\n                                            array[right1] = array[right];\r\n                                            array[right] = t;\r\n                                        }\r\n                                        swap_cnt = 1;\r\n                                        right1--;\r\n                                    }\r\n                                    right--;\r\n                                }\r\n\r\n                                if( left > right ) break;\r\n                                \r\n                                t = array[left];\r\n                                array[left] = array[right];\r\n                                array[right] = t;\r\n                                swap_cnt = 1;\r\n                                left++;\r\n                                right--;\r\n                            }\r\n\r\n                            if( swap_cnt == 0 ) {\r\n                                left = left0, right = right0;\r\n                                //goto insert_sort;\r\n                                for( ptr = left + 1; ptr <= right; ptr++ ) {\r\n                                    for( ptr2 = ptr; ptr2 > left && cmp(array[ptr2],array[ptr2-1]); ptr2--) {\r\n                                        t = array[ptr2];\r\n                                        array[ptr2] = array[ptr2-1];\r\n                                        array[ptr2-1] = t;\r\n                                    }\r\n                                }\r\n                                break;\r\n                            }\r\n\r\n                            n = Math.min( (left1 - left0), (left - left1) );\r\n                            m = (left-n)|0;\r\n                            for( i = 0; i < n; ++i,++m ) {\r\n                                t = array[left0+i];\r\n                                array[left0+i] = array[m];\r\n                                array[m] = t;\r\n                            }\r\n\r\n                            n = Math.min( (right0 - right1), (right1 - right) );\r\n                            m = (right0-n+1)|0;\r\n                            for( i = 0; i < n; ++i,++m ) {\r\n                                t = array[left+i];\r\n                                array[left+i] = array[m];\r\n                                array[m] = t;\r\n                            }\r\n                            n = (left - left1);\r\n                            m = (right1 - right);\r\n                            if( n > 1 ) {\r\n                                if( m > 1 ) {\r\n                                    if( n > m ) {\r\n                                        ++sp;\r\n                                        stack[sp<<1] = left0;\r\n                                        stack[(sp<<1)+1] = left0 + n - 1;\r\n                                        left = right0 - m + 1, right = right0;\r\n                                    } else {\r\n                                        ++sp;\r\n                                        stack[sp<<1] = right0 - m + 1;\r\n                                        stack[(sp<<1)+1] = right0;\r\n                                        left = left0, right = left0 + n - 1;\r\n                                    }\r\n                                } else {\r\n                                    left = left0, right = left0 + n - 1;\r\n                                }\r\n                            }\r\n                            else if( m > 1 )\r\n                                left = right0 - m + 1, right = right0;\r\n                            else\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n            median: function(array, low, high) {\r\n                var w;\r\n                var middle=0,ll=0,hh=0,median=(low+high)>>1;\r\n                for (;;) {\r\n                    if (high <= low) return array[median];\r\n                    if (high == (low + 1)) {\r\n                        if (array[low] > array[high]) {\r\n                            w = array[low];\r\n                            array[low] = array[high];\r\n                            array[high] = w;\r\n                        }\r\n                        return array[median];\r\n                    }\r\n                    middle = ((low + high) >> 1);\r\n                    if (array[middle] > array[high]) {\r\n                        w = array[middle];\r\n                        array[middle] = array[high];\r\n                        array[high] = w;\r\n                    }\r\n                    if (array[low] > array[high]) {\r\n                        w = array[low];\r\n                        array[low] = array[high];\r\n                        array[high] = w;\r\n                    }\r\n                    if (array[middle] > array[low]) {\r\n                        w = array[middle];\r\n                        array[middle] = array[low];\r\n                        array[low] = w;\r\n                    }\r\n                    ll = (low + 1);\r\n                    w = array[middle];\r\n                    array[middle] = array[ll];\r\n                    array[ll] = w;\r\n                    hh = high;\r\n                    for (;;) {\r\n                        do ++ll; while (array[low] > array[ll]);\r\n                        do --hh; while (array[hh] > array[low]);\r\n                        if (hh < ll) break;\r\n                        w = array[ll];\r\n                        array[ll] = array[hh];\r\n                        array[hh] = w;\r\n                    }\r\n                    w = array[low];\r\n                    array[low] = array[hh];\r\n                    array[hh] = w;\r\n                    if (hh <= median)\r\n                        low = ll;\r\n                    else if (hh >= median)\r\n                        high = (hh - 1);\r\n                }\r\n                return 0;\r\n            }\r\n        };\r\n\r\n    })();\r\n\r\n    global.math = math;\r\n\r\n})(jsfeat);\r\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    var matmath = (function() {\r\n        \r\n        return {\r\n            identity: function(M, value) {\r\n                if (typeof value === \"undefined\") { value=1; }\r\n                var src=M.data;\r\n                var rows=M.rows, cols=M.cols, cols_1=(cols+1)|0;\r\n                var len = rows * cols;\r\n                var k = len;\r\n                while(--len >= 0) src[len] = 0.0;\r\n                len = k;\r\n                k = 0;\r\n                while(k < len)  {\r\n                    src[k] = value;\r\n                    k = k + cols_1;\r\n                }\r\n            },\r\n\r\n            transpose: function(At, A) {\r\n                var i=0,j=0,nrows=A.rows,ncols=A.cols;\r\n                var Ai=0,Ati=0,pAt=0;\r\n                var ad=A.data,atd=At.data;\r\n\r\n                for (; i < nrows; Ati += 1, Ai += ncols, i++) {\r\n                    pAt = Ati;\r\n                    for (j = 0; j < ncols; pAt += nrows, j++) atd[pAt] = ad[Ai+j];\r\n                }\r\n            },\r\n\r\n            // C = A * B\r\n            multiply: function(C, A, B) {\r\n                var i=0,j=0,k=0;\r\n                var Ap=0,pA=0,pB=0,p_B=0,Cp=0;\r\n                var ncols=A.cols,nrows=A.rows,mcols=B.cols;\r\n                var ad=A.data,bd=B.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < nrows; Ap += ncols, i++) {\r\n                    for (p_B = 0, j = 0; j < mcols; Cp++, p_B++, j++) {\r\n                        pB = p_B;\r\n                        pA = Ap;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < ncols; pA++, pB += mcols, k++) {\r\n                            sum += ad[pA] * bd[pB];\r\n                        }\r\n                        cd[Cp] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // C = A * B'\r\n            multiply_ABt: function(C, A, B) {\r\n                var i=0,j=0,k=0;\r\n                var Ap=0,pA=0,pB=0,Cp=0;\r\n                var ncols=A.cols,nrows=A.rows,mrows=B.rows;\r\n                var ad=A.data,bd=B.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < nrows; Ap += ncols, i++) {\r\n                    for (pB = 0, j = 0; j < mrows; Cp++, j++) {\r\n                        pA = Ap;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < ncols; pA++, pB++, k++) {\r\n                            sum += ad[pA] * bd[pB];\r\n                        }\r\n                        cd[Cp] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // C = A' * B\r\n            multiply_AtB: function(C, A, B) {\r\n                var i=0,j=0,k=0;\r\n                var Ap=0,pA=0,pB=0,p_B=0,Cp=0;\r\n                var ncols=A.cols,nrows=A.rows,mcols=B.cols;\r\n                var ad=A.data,bd=B.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < ncols; Ap++, i++) {\r\n                    for (p_B = 0, j = 0; j < mcols; Cp++, p_B++, j++) {\r\n                        pB = p_B;\r\n                        pA = Ap;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < nrows; pA += ncols, pB += mcols, k++) {\r\n                            sum += ad[pA] * bd[pB];\r\n                        }\r\n                        cd[Cp] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // C = A * A'\r\n            multiply_AAt: function(C, A) {\r\n                var i=0,j=0,k=0;\r\n                var pCdiag=0,p_A=0,pA=0,pB=0,pC=0,pCt=0;\r\n                var ncols=A.cols,nrows=A.rows;\r\n                var ad=A.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < nrows; pCdiag += nrows + 1, p_A = pA, i++) {\r\n                    pC = pCdiag;\r\n                    pCt = pCdiag;\r\n                    pB = p_A; \r\n                    for (j = i; j < nrows; pC++, pCt += nrows, j++) {\r\n                        pA = p_A;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < ncols; k++) {\r\n                            sum += ad[pA++] * ad[pB++];\r\n                        }\r\n                        cd[pC] = sum\r\n                        cd[pCt] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // C = A' * A\r\n            multiply_AtA: function(C, A) {\r\n                var i=0,j=0,k=0;\r\n                var p_A=0,pA=0,pB=0,p_C=0,pC=0,p_CC=0;\r\n                var ncols=A.cols,nrows=A.rows;\r\n                var ad=A.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < ncols; p_C += ncols, i++) {\r\n                    p_A = i;\r\n                    p_CC = p_C + i;\r\n                    pC = p_CC;\r\n                    for (j = i; j < ncols; pC++, p_CC += ncols, j++) {\r\n                        pA = p_A;\r\n                        pB = j;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < nrows; pA += ncols, pB += ncols, k++) {\r\n                            sum += ad[pA] * ad[pB];\r\n                        }\r\n                        cd[pC] = sum\r\n                        cd[p_CC] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // various small matrix operations\r\n            identity_3x3: function(M, value) {\r\n                if (typeof value === \"undefined\") { value=1; }\r\n                var dt=M.data;\r\n                dt[0] = dt[4] = dt[8] = value;\r\n                dt[1] = dt[2] = dt[3] = 0;\r\n                dt[5] = dt[6] = dt[7] = 0;\r\n            },\r\n\r\n            invert_3x3: function(from, to) {\r\n                var A = from.data, invA = to.data;\r\n                var t1 = A[4];\r\n                var t2 = A[8];\r\n                var t4 = A[5];\r\n                var t5 = A[7];\r\n                var t8 = A[0];\r\n\r\n                var t9 = t8*t1;\r\n                var t11 = t8*t4;\r\n                var t13 = A[3];\r\n                var t14 = A[1];\r\n                var t15 = t13*t14;\r\n                var t17 = A[2];\r\n                var t18 = t13*t17;\r\n                var t20 = A[6];\r\n                var t21 = t20*t14;\r\n                var t23 = t20*t17;\r\n                var t26 = 1.0/(t9*t2-t11*t5-t15*t2+t18*t5+t21*t4-t23*t1);\r\n                invA[0] = (t1*t2-t4*t5)*t26;\r\n                invA[1] = -(t14*t2-t17*t5)*t26;\r\n                invA[2] = -(-t14*t4+t17*t1)*t26;\r\n                invA[3] = -(t13*t2-t4*t20)*t26;\r\n                invA[4] = (t8*t2-t23)*t26;\r\n                invA[5] = -(t11-t18)*t26;\r\n                invA[6] = -(-t13*t5+t1*t20)*t26;\r\n                invA[7] = -(t8*t5-t21)*t26;\r\n                invA[8] = (t9-t15)*t26;\r\n            },\r\n            // C = A * B\r\n            multiply_3x3: function(C, A, B) {\r\n                var Cd=C.data, Ad=A.data, Bd=B.data;\r\n                var m1_0 = Ad[0], m1_1 = Ad[1], m1_2 = Ad[2];\r\n                var m1_3 = Ad[3], m1_4 = Ad[4], m1_5 = Ad[5];\r\n                var m1_6 = Ad[6], m1_7 = Ad[7], m1_8 = Ad[8];\r\n\r\n                var m2_0 = Bd[0], m2_1 = Bd[1], m2_2 = Bd[2];\r\n                var m2_3 = Bd[3], m2_4 = Bd[4], m2_5 = Bd[5];\r\n                var m2_6 = Bd[6], m2_7 = Bd[7], m2_8 = Bd[8];\r\n\r\n                Cd[0] = m1_0 * m2_0 + m1_1 * m2_3 + m1_2 * m2_6;\r\n                Cd[1] = m1_0 * m2_1 + m1_1 * m2_4 + m1_2 * m2_7;\r\n                Cd[2] = m1_0 * m2_2 + m1_1 * m2_5 + m1_2 * m2_8;\r\n                Cd[3] = m1_3 * m2_0 + m1_4 * m2_3 + m1_5 * m2_6;\r\n                Cd[4] = m1_3 * m2_1 + m1_4 * m2_4 + m1_5 * m2_7;\r\n                Cd[5] = m1_3 * m2_2 + m1_4 * m2_5 + m1_5 * m2_8;\r\n                Cd[6] = m1_6 * m2_0 + m1_7 * m2_3 + m1_8 * m2_6;\r\n                Cd[7] = m1_6 * m2_1 + m1_7 * m2_4 + m1_8 * m2_7;\r\n                Cd[8] = m1_6 * m2_2 + m1_7 * m2_5 + m1_8 * m2_8;\r\n            },\r\n\r\n            mat3x3_determinant: function(M) {\r\n                var md=M.data;\r\n                return  md[0] * md[4] * md[8] -\r\n                        md[0] * md[5] * md[7] -\r\n                        md[3] * md[1] * md[8] +\r\n                        md[3] * md[2] * md[7] +\r\n                        md[6] * md[1] * md[5] -\r\n                        md[6] * md[2] * md[4];\r\n            },\r\n\r\n            determinant_3x3: function(M11, M12, M13, \r\n                                      M21, M22, M23, \r\n                                      M31, M32, M33) {\r\n                return  M11 * M22 * M33 - M11 * M23 * M32 -\r\n                          M21 * M12 * M33 + M21 * M13 * M32 +\r\n                          M31 * M12 * M23 - M31 * M13 * M22;\r\n            }\r\n        };\r\n\r\n    })();\r\n\r\n    global.matmath = matmath;\r\n\r\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    var linalg = (function() {\r\n\r\n        var swap = function(A, i0, i1, t) {\r\n            t = A[i0];\r\n            A[i0] = A[i1];\r\n            A[i1] = t;\r\n        }\r\n\r\n        var hypot = function(a, b) {\r\n            a = Math.abs(a);\r\n            b = Math.abs(b);\r\n            if( a > b ) {\r\n                b /= a;\r\n                return a*Math.sqrt(1.0 + b*b);\r\n            }\r\n            if( b > 0 ) {\r\n                a /= b;\r\n                return b*Math.sqrt(1.0 + a*a);\r\n            }\r\n            return 0.0;\r\n        }\r\n\r\n        var JacobiImpl = function(A, astep, W, V, vstep, n) {\r\n            var eps = jsfeat.EPSILON;\r\n            var i=0,j=0,k=0,m=0,l=0,idx=0,_in=0,_in2=0;\r\n            var iters=0,max_iter=n*n*30;\r\n            var mv=0.0,val=0.0,p=0.0,y=0.0,t=0.0,s=0.0,c=0.0,a0=0.0,b0=0.0;\r\n\r\n            var indR_buff = jsfeat.cache.get_buffer(n<<2);\r\n            var indC_buff = jsfeat.cache.get_buffer(n<<2);\r\n            var indR = indR_buff.i32;\r\n            var indC = indC_buff.i32;\r\n\r\n            if(V) {\r\n                for(; i < n; i++) {\r\n                    k = i*vstep;\r\n                    for(j = 0; j < n; j++) {\r\n                        V[k + j] = 0.0;\r\n                    }\r\n                    V[k + i] = 1.0;\r\n                }\r\n            }\r\n\r\n            for(k = 0; k < n; k++) {\r\n                W[k] = A[(astep + 1)*k];\r\n                if(k < n - 1) {\r\n                    for(m = k+1, mv = Math.abs(A[astep*k + m]), i = k+2; i < n; i++) {\r\n                        val = Math.abs(A[astep*k+i]);\r\n                        if(mv < val)\r\n                            mv = val, m = i;\r\n                    }\r\n                    indR[k] = m;\r\n                }\r\n                if(k > 0) {\r\n                    for(m = 0, mv = Math.abs(A[k]), i = 1; i < k; i++) {\r\n                        val = Math.abs(A[astep*i+k]);\r\n                        if(mv < val)\r\n                            mv = val, m = i;\r\n                    }\r\n                    indC[k] = m;\r\n                }\r\n            }\r\n\r\n            if(n > 1) for( ; iters < max_iter; iters++) {\r\n                // find index (k,l) of pivot p\r\n                for(k = 0, mv = Math.abs(A[indR[0]]), i = 1; i < n-1; i++) {\r\n                    val = Math.abs(A[astep*i + indR[i]]);\r\n                    if( mv < val )\r\n                        mv = val, k = i;\r\n                }\r\n                l = indR[k];\r\n                for(i = 1; i < n; i++) {\r\n                    val = Math.abs(A[astep*indC[i] + i]);\r\n                    if( mv < val )\r\n                        mv = val, k = indC[i], l = i;\r\n                }\r\n                \r\n                p = A[astep*k + l];\r\n\r\n                if(Math.abs(p) <= eps) break;\r\n\r\n                y = (W[l] - W[k])*0.5;\r\n                t = Math.abs(y) + hypot(p, y);\r\n                s = hypot(p, t);\r\n                c = t/s;\r\n                s = p/s; t = (p/t)*p;\r\n                if(y < 0)\r\n                    s = -s, t = -t;\r\n                A[astep*k + l] = 0;\r\n                \r\n                W[k] -= t;\r\n                W[l] += t;\r\n                \r\n                // rotate rows and columns k and l\r\n                for (i = 0; i < k; i++) {\r\n                    _in = (astep * i + k);\r\n                    _in2 = (astep * i + l);\r\n                    a0 = A[_in];\r\n                    b0 = A[_in2];\r\n                    A[_in] = a0 * c - b0 * s;\r\n                    A[_in2] = a0 * s + b0 * c;\r\n                }\r\n                for (i = (k + 1); i < l; i++) {\r\n                    _in = (astep * k + i);\r\n                    _in2 = (astep * i + l);\r\n                    a0 = A[_in];\r\n                    b0 = A[_in2];\r\n                    A[_in] = a0 * c - b0 * s;\r\n                    A[_in2] = a0 * s + b0 * c;\r\n                }\r\n                i = l + 1;\r\n                _in = (astep * k + i);\r\n                _in2 = (astep * l + i);\r\n                for (; i < n; i++, _in++, _in2++) {\r\n                    a0 = A[_in];\r\n                    b0 = A[_in2];\r\n                    A[_in] = a0 * c - b0 * s;\r\n                    A[_in2] = a0 * s + b0 * c;\r\n                }\r\n                \r\n                // rotate eigenvectors\r\n                if (V) {\r\n                    _in = vstep * k;\r\n                    _in2 = vstep * l;\r\n                    for (i = 0; i < n; i++, _in++, _in2++) {\r\n                        a0 = V[_in];\r\n                        b0 = V[_in2];\r\n                        V[_in] = a0 * c - b0 * s;\r\n                        V[_in2] = a0 * s + b0 * c;\r\n                    }\r\n                }\r\n                \r\n                for(j = 0; j < 2; j++) {\r\n                    idx = j == 0 ? k : l;\r\n                    if(idx < n - 1) {\r\n                        for(m = idx+1, mv = Math.abs(A[astep*idx + m]), i = idx+2; i < n; i++) {\r\n                            val = Math.abs(A[astep*idx+i]);\r\n                            if( mv < val )\r\n                                mv = val, m = i;\r\n                        }\r\n                        indR[idx] = m;\r\n                    }\r\n                    if(idx > 0) {\r\n                        for(m = 0, mv = Math.abs(A[idx]), i = 1; i < idx; i++) {\r\n                            val = Math.abs(A[astep*i+idx]);\r\n                            if( mv < val )\r\n                                mv = val, m = i;\r\n                        }\r\n                        indC[idx] = m;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // sort eigenvalues & eigenvectors\r\n            for(k = 0; k < n-1; k++) {\r\n                m = k;\r\n                for(i = k+1; i < n; i++) {\r\n                    if(W[m] < W[i])\r\n                        m = i;\r\n                }\r\n                if(k != m) {\r\n                    swap(W, m, k, mv);\r\n                    if(V) {\r\n                        for(i = 0; i < n; i++) {\r\n                            swap(V, vstep*m + i, vstep*k + i, mv);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            jsfeat.cache.put_buffer(indR_buff);\r\n            jsfeat.cache.put_buffer(indC_buff);\r\n        }\r\n\r\n        var JacobiSVDImpl = function(At, astep, _W, Vt, vstep, m, n, n1) {\r\n            var eps = jsfeat.EPSILON * 2.0;\r\n            var minval = jsfeat.FLT_MIN;\r\n            var i=0,j=0,k=0,iter=0,max_iter=Math.max(m, 30);\r\n            var Ai=0,Aj=0,Vi=0,Vj=0,changed=0;\r\n            var c=0.0, s=0.0, t=0.0;\r\n            var t0=0.0,t1=0.0,sd=0.0,beta=0.0,gamma=0.0,delta=0.0,a=0.0,p=0.0,b=0.0;\r\n            var seed = 0x1234;\r\n            var val=0.0,val0=0.0,asum=0.0;\r\n\r\n            var W_buff = jsfeat.cache.get_buffer(n<<3);\r\n            var W = W_buff.f64;\r\n            \r\n            for(; i < n; i++) {\r\n                for(k = 0, sd = 0; k < m; k++) {\r\n                    t = At[i*astep + k];\r\n                    sd += t*t;\r\n                }\r\n                W[i] = sd;\r\n                \r\n                if(Vt) {\r\n                    for(k = 0; k < n; k++) {\r\n                        Vt[i*vstep + k] = 0;\r\n                    }\r\n                    Vt[i*vstep + i] = 1;\r\n                }\r\n            }\r\n            \r\n            for(; iter < max_iter; iter++) {\r\n                changed = 0;\r\n                \r\n                for(i = 0; i < n-1; i++) {\r\n                    for(j = i+1; j < n; j++) {\r\n                        Ai = (i*astep)|0, Aj = (j*astep)|0;\r\n                        a = W[i], p = 0, b = W[j];\r\n                        \r\n                        k = 2;\r\n                        p += At[Ai]*At[Aj];\r\n                        p += At[Ai+1]*At[Aj+1];\r\n\r\n                        for(; k < m; k++)\r\n                            p += At[Ai+k]*At[Aj+k];\r\n                        \r\n                        if(Math.abs(p) <= eps*Math.sqrt(a*b)) continue;\r\n                        \r\n                        p *= 2.0;\r\n                        beta = a - b, gamma = hypot(p, beta);\r\n                        if( beta < 0 ) {\r\n                            delta = (gamma - beta)*0.5;\r\n                            s = Math.sqrt(delta/gamma);\r\n                            c = (p/(gamma*s*2.0));\r\n                        } else {\r\n                            c = Math.sqrt((gamma + beta)/(gamma*2.0));\r\n                            s = (p/(gamma*c*2.0));\r\n                        }\r\n                        \r\n                        a=0.0, b=0.0;\r\n                        \r\n                        k = 2; // unroll\r\n                        t0 = c*At[Ai] + s*At[Aj];\r\n                        t1 = -s*At[Ai] + c*At[Aj];\r\n                        At[Ai] = t0; At[Aj] = t1;\r\n                        a += t0*t0; b += t1*t1;\r\n\r\n                        t0 = c*At[Ai+1] + s*At[Aj+1];\r\n                        t1 = -s*At[Ai+1] + c*At[Aj+1];\r\n                        At[Ai+1] = t0; At[Aj+1] = t1;\r\n                        a += t0*t0; b += t1*t1;\r\n\r\n                        for( ; k < m; k++ )\r\n                        {\r\n                            t0 = c*At[Ai+k] + s*At[Aj+k];\r\n                            t1 = -s*At[Ai+k] + c*At[Aj+k];\r\n                            At[Ai+k] = t0; At[Aj+k] = t1;\r\n                            \r\n                            a += t0*t0; b += t1*t1;\r\n                        }\r\n                        \r\n                        W[i] = a; W[j] = b;\r\n                        \r\n                        changed = 1;\r\n                        \r\n                        if(Vt) {\r\n                            Vi = (i*vstep)|0, Vj = (j*vstep)|0;\r\n\r\n                            k = 2;\r\n                            t0 = c*Vt[Vi] + s*Vt[Vj];\r\n                            t1 = -s*Vt[Vi] + c*Vt[Vj];\r\n                            Vt[Vi] = t0; Vt[Vj] = t1;\r\n\r\n                            t0 = c*Vt[Vi+1] + s*Vt[Vj+1];\r\n                            t1 = -s*Vt[Vi+1] + c*Vt[Vj+1];\r\n                            Vt[Vi+1] = t0; Vt[Vj+1] = t1;\r\n\r\n                            for(; k < n; k++) {\r\n                                t0 = c*Vt[Vi+k] + s*Vt[Vj+k];\r\n                                t1 = -s*Vt[Vi+k] + c*Vt[Vj+k];\r\n                                Vt[Vi+k] = t0; Vt[Vj+k] = t1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if(changed == 0) break;\r\n            }\r\n            \r\n            for(i = 0; i < n; i++) {\r\n                for(k = 0, sd = 0; k < m; k++) {\r\n                    t = At[i*astep + k];\r\n                    sd += t*t;\r\n                }\r\n                W[i] = Math.sqrt(sd);\r\n            }\r\n            \r\n            for(i = 0; i < n-1; i++) {\r\n                j = i;\r\n                for(k = i+1; k < n; k++) {\r\n                    if(W[j] < W[k])\r\n                        j = k;\r\n                }\r\n                if(i != j) {\r\n                    swap(W, i, j, sd);\r\n                    if(Vt) {\r\n                        for(k = 0; k < m; k++) {\r\n                            swap(At, i*astep + k, j*astep + k, t);\r\n                        }\r\n                        \r\n                        for(k = 0; k < n; k++) {\r\n                            swap(Vt, i*vstep + k, j*vstep + k, t);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            for(i = 0; i < n; i++) {\r\n                _W[i] = W[i];\r\n            }\r\n            \r\n            if(!Vt) {\r\n                jsfeat.cache.put_buffer(W_buff);\r\n                return;\r\n            }\r\n\r\n            for(i = 0; i < n1; i++) {\r\n\r\n                sd = i < n ? W[i] : 0;\r\n                \r\n                while(sd <= minval) {\r\n                    // if we got a zero singular value, then in order to get the corresponding left singular vector\r\n                    // we generate a random vector, project it to the previously computed left singular vectors,\r\n                    // subtract the projection and normalize the difference.\r\n                    val0 = (1.0/m);\r\n                    for(k = 0; k < m; k++) {\r\n                        seed = (seed * 214013 + 2531011);\r\n                        val = (((seed >> 16) & 0x7fff) & 256) != 0 ? val0 : -val0;\r\n                        At[i*astep + k] = val;\r\n                    }\r\n                    for(iter = 0; iter < 2; iter++) {\r\n                        for(j = 0; j < i; j++) {\r\n                            sd = 0;\r\n                            for(k = 0; k < m; k++) {\r\n                                sd += At[i*astep + k]*At[j*astep + k];\r\n                            }\r\n                            asum = 0.0;\r\n                            for(k = 0; k < m; k++) {\r\n                                t = (At[i*astep + k] - sd*At[j*astep + k]);\r\n                                At[i*astep + k] = t;\r\n                                asum += Math.abs(t);\r\n                            }\r\n                            asum = asum ? 1.0/asum : 0;\r\n                            for(k = 0; k < m; k++) {\r\n                                At[i*astep + k] *= asum;\r\n                            }\r\n                        }\r\n                    }\r\n                    sd = 0;\r\n                    for(k = 0; k < m; k++) {\r\n                        t = At[i*astep + k];\r\n                        sd += t*t;\r\n                    }\r\n                    sd = Math.sqrt(sd);\r\n                }\r\n                \r\n                s = (1.0/sd);\r\n                for(k = 0; k < m; k++) {\r\n                    At[i*astep + k] *= s;\r\n                }\r\n            }\r\n\r\n            jsfeat.cache.put_buffer(W_buff);\r\n        }\r\n        \r\n        return {\r\n\r\n            lu_solve: function(A, B) {\r\n                var i=0,j=0,k=0,p=1,astep=A.cols;\r\n                var ad=A.data, bd=B.data;\r\n                var t,alpha,d,s;\r\n\r\n                for(i = 0; i < astep; i++) {\r\n                    k = i;                    \r\n                    for(j = i+1; j < astep; j++) {\r\n                        if(Math.abs(ad[j*astep + i]) > Math.abs(ad[k*astep+i])) {\r\n                            k = j;\r\n                        }\r\n                    }\r\n                    \r\n                    if(Math.abs(ad[k*astep+i]) < jsfeat.EPSILON) {\r\n                        return 0; // FAILED\r\n                    }\r\n                    \r\n                    if(k != i) {\r\n                        for(j = i; j < astep; j++ ) {\r\n                            swap(ad, i*astep+j, k*astep+j, t);\r\n                        }\r\n                        \r\n                        swap(bd, i, k, t);\r\n                        p = -p;\r\n                    }\r\n                    \r\n                    d = -1.0/ad[i*astep+i];\r\n                    \r\n                    for(j = i+1; j < astep; j++) {\r\n                        alpha = ad[j*astep+i]*d;\r\n                        \r\n                        for(k = i+1; k < astep; k++) {\r\n                            ad[j*astep+k] += alpha*ad[i*astep+k];\r\n                        }\r\n                        \r\n                        bd[j] += alpha*bd[i];\r\n                    }\r\n                    \r\n                    ad[i*astep+i] = -d;\r\n                }\r\n                \r\n                for(i = astep-1; i >= 0; i--) {\r\n                    s = bd[i];\r\n                    for(k = i+1; k < astep; k++) {\r\n                        s -= ad[i*astep+k]*bd[k];\r\n                    }\r\n                    bd[i] = s*ad[i*astep+i];\r\n                }\r\n\r\n                return 1; // OK\r\n            },\r\n\r\n            cholesky_solve: function(A, B) {\r\n                var col=0,row=0,col2=0,cs=0,rs=0,i=0,j=0;\r\n                var size = A.cols;\r\n                var ad=A.data, bd=B.data;\r\n                var val,inv_diag;\r\n\r\n                for (col = 0; col < size; col++) {\r\n                    inv_diag = 1.0;\r\n                    cs = (col * size);\r\n                    rs = cs;\r\n                    for (row = col; row < size; row++)\r\n                    {\r\n                        // correct for the parts of cholesky already computed\r\n                        val = ad[(rs+col)];\r\n                        for (col2 = 0; col2 < col; col2++) {\r\n                            val -= ad[(col2*size+col)] * ad[(rs+col2)];\r\n                        }\r\n                        if (row == col) {\r\n                            // this is the diagonal element so don't divide\r\n                            ad[(rs+col)] = val;\r\n                            if(val == 0) {\r\n                                return 0;\r\n                            }\r\n                            inv_diag = 1.0 / val;\r\n                        } else {\r\n                            // cache the value without division in the upper half\r\n                            ad[(cs+row)] = val;\r\n                            // divide my the diagonal element for all others\r\n                            ad[(rs+col)] = val * inv_diag;\r\n                        }\r\n                        rs = (rs + size);\r\n                    }\r\n                }\r\n\r\n                // first backsub through L\r\n                cs = 0;\r\n                for (i = 0; i < size; i++) {\r\n                    val = bd[i];\r\n                    for (j = 0; j < i; j++) {\r\n                        val -= ad[(cs+j)] * bd[j];\r\n                    }\r\n                    bd[i] = val;\r\n                    cs = (cs + size);\r\n                }\r\n                // backsub through diagonal\r\n                cs = 0;\r\n                for (i = 0; i < size; i++) {\r\n                    bd[i] /= ad[(cs + i)];\r\n                    cs = (cs + size);\r\n                }\r\n                // backsub through L Transpose\r\n                i = (size-1);\r\n                for (; i >= 0; i--) {\r\n                    val = bd[i];\r\n                    j = (i + 1);\r\n                    cs = (j * size);\r\n                    for (; j < size; j++) {\r\n                        val -= ad[(cs + i)] * bd[j];\r\n                        cs = (cs + size);\r\n                    }\r\n                    bd[i] = val;\r\n                }\r\n\r\n                return 1;\r\n            },\r\n\r\n            svd_decompose: function(A, W, U, V, options) {\r\n                if (typeof options === \"undefined\") { options = 0; };\r\n                var at=0,i=0,j=0,_m=A.rows,_n=A.cols,m=_m,n=_n;\r\n                var dt = A.type | jsfeat.C1_t; // we only work with single channel\r\n\r\n                if(m < n) {\r\n                    at = 1;\r\n                    i = m;\r\n                    m = n;\r\n                    n = i;\r\n                }\r\n\r\n                var a_buff = jsfeat.cache.get_buffer((m*m)<<3);\r\n                var w_buff = jsfeat.cache.get_buffer(n<<3);\r\n                var v_buff = jsfeat.cache.get_buffer((n*n)<<3);\r\n\r\n                var a_mt = new jsfeat.matrix_t(m, m, dt, a_buff.data);\r\n                var w_mt = new jsfeat.matrix_t(1, n, dt, w_buff.data);\r\n                var v_mt = new jsfeat.matrix_t(n, n, dt, v_buff.data);\r\n\r\n                if(at == 0) {\r\n                    // transpose\r\n                    jsfeat.matmath.transpose(a_mt, A);\r\n                } else {\r\n                    for(i = 0; i < _n*_m; i++) {\r\n                        a_mt.data[i] = A.data[i];\r\n                    }\r\n                    for(; i < n*m; i++) {\r\n                        a_mt.data[i] = 0;\r\n                    }\r\n                }\r\n\r\n                JacobiSVDImpl(a_mt.data, m, w_mt.data, v_mt.data, n, m, n, m);\r\n\r\n                if(W) {\r\n                    for(i=0; i < n; i++) {\r\n                        W.data[i] = w_mt.data[i];\r\n                    }\r\n                    for(; i < _n; i++) {\r\n                        W.data[i] = 0;\r\n                    }\r\n                }\r\n\r\n                if (at == 0) {\r\n                    if(U && (options & jsfeat.SVD_U_T)) {\r\n                        i = m*m;\r\n                        while(--i >= 0) {\r\n                            U.data[i] = a_mt.data[i];\r\n                        }\r\n                    } else if(U) {\r\n                        jsfeat.matmath.transpose(U, a_mt);\r\n                    }\r\n\r\n                    if(V && (options & jsfeat.SVD_V_T)) {\r\n                        i = n*n;\r\n                        while(--i >= 0) {\r\n                            V.data[i] = v_mt.data[i];\r\n                        }\r\n                    } else if(V) {\r\n                        jsfeat.matmath.transpose(V, v_mt);\r\n                    }\r\n                } else {\r\n                    if(U && (options & jsfeat.SVD_U_T)) {\r\n                        i = n*n;\r\n                        while(--i >= 0) {\r\n                            U.data[i] = v_mt.data[i];\r\n                        }\r\n                    } else if(U) {\r\n                        jsfeat.matmath.transpose(U, v_mt);\r\n                    }\r\n\r\n                    if(V && (options & jsfeat.SVD_V_T)) {\r\n                        i = m*m;\r\n                        while(--i >= 0) {\r\n                            V.data[i] = a_mt.data[i];\r\n                        }\r\n                    } else if(V) {\r\n                        jsfeat.matmath.transpose(V, a_mt);\r\n                    }\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(a_buff);\r\n                jsfeat.cache.put_buffer(w_buff);\r\n                jsfeat.cache.put_buffer(v_buff);\r\n\r\n            },\r\n\r\n            svd_solve: function(A, X, B) {\r\n                var i=0,j=0,k=0;\r\n                var pu=0,pv=0;\r\n                var nrows=A.rows,ncols=A.cols;\r\n                var sum=0.0,xsum=0.0,tol=0.0;\r\n                var dt = A.type | jsfeat.C1_t;\r\n\r\n                var u_buff = jsfeat.cache.get_buffer((nrows*nrows)<<3);\r\n                var w_buff = jsfeat.cache.get_buffer(ncols<<3);\r\n                var v_buff = jsfeat.cache.get_buffer((ncols*ncols)<<3);\r\n\r\n                var u_mt = new jsfeat.matrix_t(nrows, nrows, dt, u_buff.data);\r\n                var w_mt = new jsfeat.matrix_t(1, ncols, dt, w_buff.data);\r\n                var v_mt = new jsfeat.matrix_t(ncols, ncols, dt, v_buff.data);\r\n\r\n                var bd = B.data, ud = u_mt.data, wd = w_mt.data, vd = v_mt.data;\r\n\r\n                this.svd_decompose(A, w_mt, u_mt, v_mt, 0);\r\n\r\n                tol = jsfeat.EPSILON * wd[0] * ncols;\r\n\r\n                for (; i < ncols; i++, pv += ncols) {\r\n                    xsum = 0.0;\r\n                    for(j = 0; j < ncols; j++) {\r\n                        if(wd[j] > tol) {\r\n                            for(k = 0, sum = 0.0, pu = 0; k < nrows; k++, pu += ncols) {\r\n                                sum += ud[pu + j] * bd[k];\r\n                            }\r\n                            xsum += sum * vd[pv + j] / wd[j];\r\n                        }\r\n                    }\r\n                    X.data[i] = xsum;\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(u_buff);\r\n                jsfeat.cache.put_buffer(w_buff);\r\n                jsfeat.cache.put_buffer(v_buff);\r\n            },\r\n\r\n            svd_invert: function(Ai, A) {\r\n                var i=0,j=0,k=0;\r\n                var pu=0,pv=0,pa=0;\r\n                var nrows=A.rows,ncols=A.cols;\r\n                var sum=0.0,tol=0.0;\r\n                var dt = A.type | jsfeat.C1_t;\r\n\r\n                var u_buff = jsfeat.cache.get_buffer((nrows*nrows)<<3);\r\n                var w_buff = jsfeat.cache.get_buffer(ncols<<3);\r\n                var v_buff = jsfeat.cache.get_buffer((ncols*ncols)<<3);\r\n\r\n                var u_mt = new jsfeat.matrix_t(nrows, nrows, dt, u_buff.data);\r\n                var w_mt = new jsfeat.matrix_t(1, ncols, dt, w_buff.data);\r\n                var v_mt = new jsfeat.matrix_t(ncols, ncols, dt, v_buff.data);\r\n\r\n                var id = Ai.data, ud = u_mt.data, wd = w_mt.data, vd = v_mt.data;\r\n\r\n                this.svd_decompose(A, w_mt, u_mt, v_mt, 0);\r\n\r\n                tol = jsfeat.EPSILON * wd[0] * ncols;\r\n\r\n                for (; i < ncols; i++, pv += ncols) {\r\n                    for (j = 0, pu = 0; j < nrows; j++, pa++) {\r\n                        for (k = 0, sum = 0.0; k < ncols; k++, pu++) {\r\n                            if (wd[k] > tol) sum += vd[pv + k] * ud[pu] / wd[k];\r\n                        }\r\n                        id[pa] = sum;\r\n                    }\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(u_buff);\r\n                jsfeat.cache.put_buffer(w_buff);\r\n                jsfeat.cache.put_buffer(v_buff);\r\n            },\r\n\r\n            eigenVV: function(A, vects, vals) {\r\n                var n=A.cols,i=n*n;\r\n                var dt = A.type | jsfeat.C1_t;\r\n\r\n                var a_buff = jsfeat.cache.get_buffer((n*n)<<3);\r\n                var w_buff = jsfeat.cache.get_buffer(n<<3);\r\n                var a_mt = new jsfeat.matrix_t(n, n, dt, a_buff.data);\r\n                var w_mt = new jsfeat.matrix_t(1, n, dt, w_buff.data);\r\n\r\n                while(--i >= 0) {\r\n                    a_mt.data[i] = A.data[i];\r\n                }\r\n\r\n                JacobiImpl(a_mt.data, n, w_mt.data, vects ? vects.data : null, n, n);\r\n\r\n                if(vals) {\r\n                    while(--n >= 0) {\r\n                        vals.data[n] = w_mt.data[n];\r\n                    }\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(a_buff);\r\n                jsfeat.cache.put_buffer(w_buff);\r\n            }\r\n\r\n        };\r\n\r\n    })();\r\n\r\n    global.linalg = linalg;\r\n\r\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var motion_model = (function() {\n\n    \tvar sqr = function(x) {\n    \t\treturn x*x;\n    \t}\n\n    \t// does isotropic normalization\n    \tvar iso_normalize_points = function(from, to, T0, T1, count) {\n\t\t\tvar i=0;\n\t\t    var cx0=0.0, cy0=0.0, d0=0.0, s0=0.0;\n\t\t    var cx1=0.0, cy1=0.0, d1=0.0, s1=0.0;\n\t\t    var dx=0.0,dy=0.0;\n\n\t\t    for (; i < count; ++i) {\n\t\t        cx0 += from[i].x;\n\t\t        cy0 += from[i].y;\n\t\t        cx1 += to[i].x;\n\t\t        cy1 += to[i].y;\n\t\t    }\n\n\t\t    cx0 /= count; cy0 /= count;\n\t\t    cx1 /= count; cy1 /= count;\n\n\t\t    for (i = 0; i < count; ++i) {\n\t\t        dx = from[i].x - cx0;\n\t\t        dy = from[i].y - cy0;\n\t\t        d0 += Math.sqrt(dx*dx + dy*dy);\n\t\t        dx = to[i].x - cx1;\n\t\t        dy = to[i].y - cy1;\n\t\t        d1 += Math.sqrt(dx*dx + dy*dy);\n\t\t    }\n\n\t\t    d0 /= count; d1 /= count;\n\n\t\t    s0 = Math.SQRT2 / d0; s1 = Math.SQRT2 / d1;\n\n\t\t    T0[0] = T0[4] = s0;\n\t\t    T0[2] = -cx0*s0;\n\t\t    T0[5] = -cy0*s0;\n\t\t    T0[1] = T0[3] = T0[6] = T0[7] = 0.0;\n\t\t    T0[8] = 1.0;\n\n\t\t    T1[0] = T1[4] = s1;\n\t\t    T1[2] = -cx1*s1;\n\t\t    T1[5] = -cy1*s1;\n\t\t    T1[1] = T1[3] = T1[6] = T1[7] = 0.0;\n\t\t    T1[8] = 1.0;\n\t\t}\n\n\t\tvar have_collinear_points = function(points, count) {\n\t\t    var j=0,k=0,i=(count-1)|0;\n\t\t    var dx1=0.0,dy1=0.0,dx2=0.0,dy2=0.0;\n\n\t\t    // check that the i-th selected point does not belong\n\t\t    // to a line connecting some previously selected points\n\t\t    for(; j < i; ++j) {\n\t\t        dx1 = points[j].x - points[i].x;\n\t\t        dy1 = points[j].y - points[i].y;\n\t\t        for(k = 0; k < j; ++k) {\n\t\t            dx2 = points[k].x - points[i].x;\n\t\t            dy2 = points[k].y - points[i].y;\n\t\t            if( Math.abs(dx2*dy1 - dy2*dx1) <= jsfeat.EPSILON*(Math.abs(dx1) + Math.abs(dy1) + Math.abs(dx2) + Math.abs(dy2)))\n\t\t                return true;\n\t\t        }\n\t\t    }\n\t\t    return false;\n\t\t}\n\n\t\tvar T0 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n    \tvar T1 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n    \tvar AtA = new jsfeat.matrix_t(6, 6, jsfeat.F32_t|jsfeat.C1_t);\n    \tvar AtB = new jsfeat.matrix_t(6, 1, jsfeat.F32_t|jsfeat.C1_t);\n    \t\n    \tvar affine2d = (function () {\n\n\t        function affine2d() {\n\t        \t// empty constructor\n\t        }\n\n\t        affine2d.prototype.run = function(from, to, model, count) {\n\t        \tvar i=0,j=0;\n\t        \tvar dt=model.type|jsfeat.C1_t;\n\t        \tvar md=model.data, t0d=T0.data, t1d=T1.data;\n\t        \tvar pt0,pt1,px=0.0,py=0.0;\n\n\t            iso_normalize_points(from, to, t0d, t1d, count);\n\n\t            var a_buff = jsfeat.cache.get_buffer((2*count*6)<<3);\n                var b_buff = jsfeat.cache.get_buffer((2*count)<<3);\n\n                var a_mt = new jsfeat.matrix_t(6, 2*count, dt, a_buff.data);\n                var b_mt = new jsfeat.matrix_t(1, 2*count, dt, b_buff.data);\n                var ad=a_mt.data, bd=b_mt.data;\n\n\t\t\t    for (; i < count; ++i) {\n\t\t\t    \tpt0 = from[i];\n\t\t\t        pt1 = to[i];\n\n\t\t\t        px = t0d[0]*pt0.x + t0d[1]*pt0.y + t0d[2];\n\t\t\t        py = t0d[3]*pt0.x + t0d[4]*pt0.y + t0d[5];\n\n\t\t\t        j = i*2*6;\n\t\t\t        ad[j]=px, ad[j+1]=py, ad[j+2]=1.0, ad[j+3]=0.0, ad[j+4]=0.0, ad[j+5]=0.0;\n\n\t\t\t        j += 6;\n\t\t\t        ad[j]=0.0, ad[j+1]=0.0, ad[j+2]=0.0, ad[j+3]=px, ad[j+4]=py, ad[j+5]=1.0;\n\n\t\t\t        bd[i<<1] = t1d[0]*pt1.x + t1d[1]*pt1.y + t1d[2];\n\t\t\t        bd[(i<<1)+1] = t1d[3]*pt1.x + t1d[4]*pt1.y + t1d[5];\n\t\t\t    }\n\n\t\t\t    jsfeat.matmath.multiply_AtA(AtA, a_mt);\n\t\t\t    jsfeat.matmath.multiply_AtB(AtB, a_mt, b_mt);\n\n\t\t\t    jsfeat.linalg.lu_solve(AtA, AtB);\n\n\t\t\t    md[0] = AtB.data[0], md[1]=AtB.data[1], md[2]=AtB.data[2];\n\t\t\t    md[3] = AtB.data[3], md[4]=AtB.data[4], md[5]=AtB.data[5];\n\t\t\t    md[6] = 0.0, md[7] = 0.0, md[8] = 1.0; // fill last row\n\n\t\t\t    // denormalize\n\t\t\t    jsfeat.matmath.invert_3x3(T1, T1);\n\t\t\t    jsfeat.matmath.multiply_3x3(model, T1, model);\n\t\t\t    jsfeat.matmath.multiply_3x3(model, model, T0);\n\n\t\t\t    // free buffer\n\t\t\t    jsfeat.cache.put_buffer(a_buff);\n\t\t\t    jsfeat.cache.put_buffer(b_buff);\n\n\t\t\t    return 1;\n\t        }\n\n\t        affine2d.prototype.error = function(from, to, model, err, count) {\n\t        \tvar i=0;\n\t        \tvar pt0,pt1;\n\t        \tvar m=model.data;\n\n\t\t\t    for (; i < count; ++i) {\n\t\t\t        pt0 = from[i];\n\t\t\t        pt1 = to[i];\n\n\t\t\t        err[i] = sqr(pt1.x - m[0]*pt0.x - m[1]*pt0.y - m[2]) +\n\t\t\t                 sqr(pt1.y - m[3]*pt0.x - m[4]*pt0.y - m[5]);\n\t\t\t    }\n\t        }\n\n\t        affine2d.prototype.check_subset = function(from, to, count) {\n\t            return true; // all good\n\t        }\n\n\t        return affine2d;\n\t    })();\n\n\t    var mLtL = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\n\t    var Evec = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\n\n\t    var homography2d = (function () {\n\n\t        function homography2d() {\n\t        \t// empty constructor\n\t        \t//this.T0 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n\t        \t//this.T1 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n\t        \t//this.mLtL = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\n\t        \t//this.Evec = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\n\t        }\n\n\t        homography2d.prototype.run = function(from, to, model, count) {\n\t        \tvar i=0,j=0;\n\t        \tvar md=model.data, t0d=T0.data, t1d=T1.data;\n\t        \tvar LtL=mLtL.data, evd=Evec.data;\n\t        \tvar x=0.0,y=0.0,X=0.0,Y=0.0;\n\n\t\t\t    // norm\n\t\t\t\tvar smx=0.0, smy=0.0, cmx=0.0, cmy=0.0, sMx=0.0, sMy=0.0, cMx=0.0, cMy=0.0;\n\n\t\t\t\tfor(; i < count; ++i) {\n\t\t\t\t    cmx += to[i].x;\n\t\t\t\t    cmy += to[i].y;\n\t\t\t\t    cMx += from[i].x;\n\t\t\t\t    cMy += from[i].y;\n\t\t\t\t}\n\n\t\t\t    cmx /= count; cmy /= count;\n\t\t\t    cMx /= count; cMy /= count;\n\n\t\t\t    for(i = 0; i < count; ++i)\n\t\t\t    {\n\t\t\t\t    smx += Math.abs(to[i].x - cmx);\n\t\t\t\t    smy += Math.abs(to[i].y - cmy);\n\t\t\t\t    sMx += Math.abs(from[i].x - cMx);\n\t\t\t\t    sMy += Math.abs(from[i].y - cMy);\n\t\t\t\t}\n\n\t\t\t    if( Math.abs(smx) < jsfeat.EPSILON \n\t\t\t    \t|| Math.abs(smy) < jsfeat.EPSILON \n\t\t\t    \t|| Math.abs(sMx) < jsfeat.EPSILON \n\t\t\t    \t|| Math.abs(sMy) < jsfeat.EPSILON ) return 0;\n\n\t\t\t    smx = count/smx; smy = count/smy;\n\t\t\t    sMx = count/sMx; sMy = count/sMy;\n\n\t\t\t    t0d[0] = sMx; \tt0d[1] = 0; \tt0d[2] = -cMx*sMx; \n\t\t\t    t0d[3] = 0; \tt0d[4] = sMy; \tt0d[5] = -cMy*sMy; \n\t\t\t    t0d[6] = 0; \tt0d[7] = 0; \tt0d[8] = 1;\n\n\t\t\t\tt1d[0] = 1.0/smx; \tt1d[1] = 0; \t\tt1d[2] = cmx;\n\t\t\t\tt1d[3] = 0; \t\tt1d[4] = 1.0/smy; \tt1d[5] = cmy;\n\t\t\t\tt1d[6] = 0; \t\tt1d[7] = 0; \t\tt1d[8] = 1;\n\t\t\t\t//\n\n\t\t\t\t// construct system\n\t\t\t\ti = 81;\n\t\t\t\twhile(--i >= 0) {\n\t\t\t\t\tLtL[i] = 0.0;\n\t\t\t\t}\n\t\t\t\tfor(i = 0; i < count; ++i) {\n\t\t\t\t\tx = (to[i].x - cmx) * smx;\n\t\t\t\t\ty = (to[i].y - cmy) * smy;\n\t\t\t\t\tX = (from[i].x - cMx) * sMx;\n\t\t\t\t\tY = (from[i].y - cMy) * sMy;\n\n\t\t\t\t\tLtL[0] += X*X;\n\t\t\t\t\tLtL[1] += X*Y;\n\t\t\t\t\tLtL[2] += X;\n\n\t\t\t\t\tLtL[6] += X*-x*X;\n\t\t\t\t\tLtL[7] += X*-x*Y;\n\t\t\t\t\tLtL[8] += X*-x;\n\t\t\t\t\tLtL[10] += Y*Y;\n\t\t\t\t\tLtL[11] += Y;\n\n\t\t\t\t\tLtL[15] += Y*-x*X;\n\t\t\t\t\tLtL[16] += Y*-x*Y;\n\t\t\t\t\tLtL[17] += Y*-x;\n\t\t\t\t\tLtL[20] += 1.0;\n\n\t\t\t\t\tLtL[24] += -x*X;\n\t\t\t\t\tLtL[25] += -x*Y;\n\t\t\t\t\tLtL[26] += -x;\n\t\t\t\t\tLtL[30] += X*X;\n\t\t\t\t\tLtL[31] += X*Y;\n\t\t\t\t\tLtL[32] += X;\n\t\t\t\t\tLtL[33] += X*-y*X;\n\t\t\t\t\tLtL[34] += X*-y*Y;\n\t\t\t\t\tLtL[35] += X*-y;\n\t\t\t\t\tLtL[40] += Y*Y;\n\t\t\t\t\tLtL[41] += Y;\n\t\t\t\t\tLtL[42] += Y*-y*X;\n\t\t\t\t\tLtL[43] += Y*-y*Y;\n\t\t\t\t\tLtL[44] += Y*-y;\n\t\t\t\t\tLtL[50] += 1.0;\n\t\t\t\t\tLtL[51] += -y*X;\n\t\t\t\t\tLtL[52] += -y*Y;\n\t\t\t\t\tLtL[53] += -y;\n\t\t\t\t\tLtL[60] += -x*X*-x*X + -y*X*-y*X;\n\t\t\t\t\tLtL[61] += -x*X*-x*Y + -y*X*-y*Y;\n\t\t\t\t\tLtL[62] += -x*X*-x + -y*X*-y;\n\t\t\t\t\tLtL[70] += -x*Y*-x*Y + -y*Y*-y*Y;\n\t\t\t\t\tLtL[71] += -x*Y*-x + -y*Y*-y;\n\t\t\t\t\tLtL[80] += -x*-x + -y*-y;\n\t\t\t\t}\n\t\t\t\t//\n\n\t\t\t\t// symmetry\n\t\t\t    for(i = 0; i < 9; ++i) {\n\t\t\t        for(j = 0; j < i; ++j)\n\t\t\t            LtL[i*9+j] = LtL[j*9+i];\n\t\t\t    }\n\n\t\t\t\tjsfeat.linalg.eigenVV(mLtL, Evec);\n\n\t\t\t\tmd[0]=evd[72], md[1]=evd[73], md[2]=evd[74];\n\t\t\t    md[3]=evd[75], md[4]=evd[76], md[5]=evd[77];\n\t\t\t    md[6]=evd[78], md[7]=evd[79], md[8]=evd[80];\n\n\t\t\t\t// denormalize\n\t\t\t    jsfeat.matmath.multiply_3x3(model, T1, model);\n\t\t\t    jsfeat.matmath.multiply_3x3(model, model, T0);\n\n\t\t\t    // set bottom right to 1.0\n\t\t\t    x = 1.0/md[8];\n\t\t\t    md[0] *= x; md[1] *= x; md[2] *= x;\n\t\t\t    md[3] *= x; md[4] *= x; md[5] *= x;\n\t\t\t    md[6] *= x; md[7] *= x; md[8] = 1.0;\n\n\t\t\t    return 1;\n\t        }\n\n\t        homography2d.prototype.error = function(from, to, model, err, count) {\n\t        \tvar i=0;\n\t        \tvar pt0,pt1,ww=0.0,dx=0.0,dy=0.0;\n\t        \tvar m=model.data;\n\n\t\t\t    for (; i < count; ++i) {\n\t\t\t        pt0 = from[i];\n\t\t\t        pt1 = to[i];\n\n\t\t\t        ww = 1.0/(m[6]*pt0.x + m[7]*pt0.y + 1.0);\n\t\t\t        dx = (m[0]*pt0.x + m[1]*pt0.y + m[2])*ww - pt1.x;\n\t\t\t        dy = (m[3]*pt0.x + m[4]*pt0.y + m[5])*ww - pt1.y;\n\t\t\t        err[i] = (dx*dx + dy*dy);\n\t\t\t    }\n\t        }\n\n\t        homography2d.prototype.check_subset = function(from, to, count) {\n\t        \t// seems to reject good subsets actually\n\t        \t//if( have_collinear_points(from, count) || have_collinear_points(to, count) ) {\n        \t\t\t//return false;\n        \t\t//}\n        \t\tif( count == 4 ) {\n\t\t\t        var negative = 0;\n\n\t\t\t        var fp0=from[0],fp1=from[1],fp2=from[2],fp3=from[3];\n\t\t\t        var tp0=to[0],tp1=to[1],tp2=to[2],tp3=to[3];\n\n\t\t\t        // set1\n\t\t\t        var A11=fp0.x, A12=fp0.y, A13=1.0;\n\t\t\t        var A21=fp1.x, A22=fp1.y, A23=1.0;\n\t\t\t        var A31=fp2.x, A32=fp2.y, A33=1.0;\n\n\t\t\t        var B11=tp0.x, B12=tp0.y, B13=1.0;\n\t\t\t        var B21=tp1.x, B22=tp1.y, B23=1.0;\n\t\t\t        var B31=tp2.x, B32=tp2.y, B33=1.0;\n\n\t\t\t        var detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);\n\t\t\t\t\tvar detB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);\n\n\t\t\t\t\tif(detA*detB < 0) negative++;\n\n\t\t\t\t\t// set2\n\t\t\t\t\tA11=fp1.x, A12=fp1.y;\n\t\t\t        A21=fp2.x, A22=fp2.y;\n\t\t\t        A31=fp3.x, A32=fp3.y;\n\n\t\t\t        B11=tp1.x, B12=tp1.y;\n\t\t\t        B21=tp2.x, B22=tp2.y;\n\t\t\t        B31=tp3.x, B32=tp3.y;\n\n\t\t\t        detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);\n\t\t\t\t\tdetB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);\n\n\t\t\t\t\tif(detA*detB < 0) negative++;\n\n\t\t\t\t\t// set3\n\t\t\t\t\tA11=fp0.x, A12=fp0.y;\n\t\t\t        A21=fp2.x, A22=fp2.y;\n\t\t\t        A31=fp3.x, A32=fp3.y;\n\n\t\t\t        B11=tp0.x, B12=tp0.y;\n\t\t\t        B21=tp2.x, B22=tp2.y;\n\t\t\t        B31=tp3.x, B32=tp3.y;\n\n\t\t\t        detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);\n\t\t\t\t\tdetB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);\n\n\t\t\t\t\tif(detA*detB < 0) negative++;\n\n\t\t\t\t\t// set4\n\t\t\t\t\tA11=fp0.x, A12=fp0.y;\n\t\t\t        A21=fp1.x, A22=fp1.y;\n\t\t\t        A31=fp3.x, A32=fp3.y;\n\n\t\t\t        B11=tp0.x, B12=tp0.y;\n\t\t\t        B21=tp1.x, B22=tp1.y;\n\t\t\t        B31=tp3.x, B32=tp3.y;\n\n\t\t\t        detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);\n\t\t\t\t\tdetB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);\n\n\t\t\t\t\tif(detA*detB < 0) negative++;\n\n\t\t\t        if(negative != 0 && negative != 4) {\n\t\t\t        \treturn false;\n\t\t\t        }\n\t\t\t    }\n\t            return true; // all good\n\t        }\n\n\t        return homography2d;\n\t    })();\n\n\t    return {\n\n    \t\taffine2d:affine2d,\n    \t\thomography2d:homography2d\n\n    \t};\n\n    })();\n\n    var ransac_params_t = (function () {\n        function ransac_params_t(size, thresh, eps, prob) {\n            if (typeof size === \"undefined\") { size=0; }\n            if (typeof thresh === \"undefined\") { thresh=0.5; }\n            if (typeof eps === \"undefined\") { eps=0.5; }\n            if (typeof prob === \"undefined\") { prob=0.99; }\n\n            this.size = size;\n            this.thresh = thresh;\n            this.eps = eps;\n            this.prob = prob;\n        };\n        ransac_params_t.prototype.update_iters = function(_eps, max_iters) {\n\t        var num = Math.log(1 - this.prob);\n\t        var denom = Math.log(1 - Math.pow(1 - _eps, this.size));\n\t        return (denom >= 0 || -num >= max_iters*(-denom) ? max_iters : Math.round(num/denom))|0;\n        };\n        return ransac_params_t;\n    })();\n\n    var motion_estimator = (function() {\n\n    \tvar get_subset = function(kernel, from, to, need_cnt, max_cnt, from_sub, to_sub) {\n    \t\tvar max_try = 1000;\n    \t\tvar indices = [];\n\t\t    var i=0, j=0, ssiter=0, idx_i=0, ok=false;\n\t\t    for(; ssiter < max_try; ++ssiter)  {\n\t\t        i = 0;\n\t\t        for (; i < need_cnt && ssiter < max_try;) {\n\t\t            ok = false;\n\t\t            idx_i = 0;\n\t\t            while (!ok) {\n\t\t                ok = true;\n\t\t                idx_i = indices[i] = Math.floor(Math.random() * max_cnt)|0;\n\t\t                for (j = 0; j < i; ++j) {\n\t\t                    if (idx_i == indices[j])\n\t\t                    { ok = false; break; }\n\t\t                }\n\t\t            }\n\t\t            from_sub[i] = from[idx_i];\n\t\t            to_sub[i] = to[idx_i];\n\t\t            if( !kernel.check_subset( from_sub, to_sub, i+1 ) ) {\n\t\t                ssiter++;\n\t\t                continue;\n\t\t            }\n\t\t            ++i;\n\t\t        }\n\t\t        break;\n\t\t    }\n\n\t\t    return (i == need_cnt && ssiter < max_try);\n    \t}\n\n    \tvar find_inliers = function(kernel, model, from, to, count, thresh, err, mask) {\n    \t\tvar numinliers = 0, i=0, f=0;\n    \t\tvar t = thresh*thresh;\n\n    \t\tkernel.error(from, to, model, err, count);\n\n\t\t    for(; i < count; ++i) {\n\t\t        f = err[i] <= t;\n\t\t        mask[i] = f;\n\t\t        numinliers += f;\n\t\t    }\n\t\t    return numinliers;\n    \t}\n\n    \treturn {\n\n    \t\transac: function(params, kernel, from, to, count, model, mask, max_iters) {\n    \t\t\tif (typeof max_iters === \"undefined\") { max_iters=1000; }\n\n    \t\t\tif(count < params.size) return false;\n\n    \t\t\tvar model_points = params.size;\n\t\t\t    var niters = max_iters, iter=0;\n\t\t\t    var result = false;\n\n\t\t\t    var subset0 = [];\n\t\t\t    var subset1 = [];\n\t\t\t    var found = false;\n\n\t\t\t    var mc=model.cols,mr=model.rows;\n                var dt = model.type | jsfeat.C1_t;\n\n\t\t\t    var m_buff = jsfeat.cache.get_buffer((mc*mr)<<3);\n\t\t\t    var ms_buff = jsfeat.cache.get_buffer(count);\n\t\t\t    var err_buff = jsfeat.cache.get_buffer(count<<2);\n\t\t\t    var M = new jsfeat.matrix_t(mc, mr, dt, m_buff.data);\n\t\t\t    var curr_mask = new jsfeat.matrix_t(count, 1, jsfeat.U8C1_t, ms_buff.data);\n\n\t\t\t    var inliers_max = -1, numinliers=0;\n\t\t\t    var nmodels = 0;\n\n\t\t\t    var err = err_buff.f32;\n\n\t\t\t    // special case\n\t\t\t    if(count == model_points) {\n\t\t\t        if(kernel.run(from, to, M, count) <= 0) {\n\t\t\t        \tjsfeat.cache.put_buffer(m_buff);\n\t\t\t        \tjsfeat.cache.put_buffer(ms_buff);\n\t\t\t        \tjsfeat.cache.put_buffer(err_buff);\n\t\t\t        \treturn false;\n\t\t\t        }\n\n\t\t\t        M.copy_to(model);\n\t\t\t        if(mask) {\n\t\t\t        \twhile(--count >= 0) {\n\t\t\t        \t\tmask.data[count] = 1;\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        jsfeat.cache.put_buffer(m_buff);\n\t\t\t        jsfeat.cache.put_buffer(ms_buff);\n\t\t\t        jsfeat.cache.put_buffer(err_buff);\n\t\t\t        return true;\n\t\t\t    }\n\n\t\t\t    for (; iter < niters; ++iter) {\n\t\t\t        // generate subset\n\t\t\t        found = get_subset(kernel, from, to, model_points, count, subset0, subset1);\n\t\t\t        if(!found) {\n\t\t\t            if(iter == 0) {\n\t\t\t            \tjsfeat.cache.put_buffer(m_buff);\n\t\t\t            \tjsfeat.cache.put_buffer(ms_buff);\n\t\t\t            \tjsfeat.cache.put_buffer(err_buff);\n\t\t\t                return false;\n\t\t\t            }\n\t\t\t            break;\n\t\t\t        }\n\n\t\t\t        nmodels = kernel.run( subset0, subset1, M, model_points );\n\t\t\t        if(nmodels <= 0)\n\t\t\t            continue;\n\n\t\t\t        // TODO handle multimodel output\n\n\t\t\t        numinliers = find_inliers(kernel, M, from, to, count, params.thresh, err, curr_mask.data);\n\n\t\t\t        if( numinliers > Math.max(inliers_max, model_points-1) ) {\n\t\t\t            M.copy_to(model);\n\t\t\t            inliers_max = numinliers;\n\t\t\t            if(mask) curr_mask.copy_to(mask);\n\t\t\t            niters = params.update_iters((count - numinliers)/count, niters);\n\t\t\t            result = true;\n\t\t\t        }\n\t\t\t    }\n\n\t\t\t    jsfeat.cache.put_buffer(m_buff);\n\t\t\t    jsfeat.cache.put_buffer(ms_buff);\n\t\t\t    jsfeat.cache.put_buffer(err_buff);\n\n\t\t\t    return result;\n    \t\t},\n\n    \t\tlmeds: function(params, kernel, from, to, count, model, mask, max_iters) {\n    \t\t\tif (typeof max_iters === \"undefined\") { max_iters=1000; }\n\n    \t\t\tif(count < params.size) return false;\n\n    \t\t\tvar model_points = params.size;\n\t\t\t    var niters = max_iters, iter=0;\n\t\t\t    var result = false;\n\n\t\t\t    var subset0 = [];\n\t\t\t    var subset1 = [];\n\t\t\t    var found = false;\n\n\t\t\t    var mc=model.cols,mr=model.rows;\n                var dt = model.type | jsfeat.C1_t;\n\n\t\t\t    var m_buff = jsfeat.cache.get_buffer((mc*mr)<<3);\n\t\t\t    var ms_buff = jsfeat.cache.get_buffer(count);\n\t\t\t    var err_buff = jsfeat.cache.get_buffer(count<<2);\n\t\t\t    var M = new jsfeat.matrix_t(mc, mr, dt, m_buff.data);\n\t\t\t    var curr_mask = new jsfeat.matrix_t(count, 1, jsfeat.U8_t|jsfeat.C1_t, ms_buff.data);\n\n\t\t\t    var numinliers=0;\n\t\t\t    var nmodels = 0;\n\n\t\t\t    var err = err_buff.f32;\n\t\t\t    var min_median = 1000000000.0, sigma=0.0, median=0.0;\n\n\t\t\t    params.eps = 0.45;\n\t\t\t    niters = params.update_iters(params.eps, niters);\n\n\t\t\t    // special case\n\t\t\t    if(count == model_points) {\n\t\t\t        if(kernel.run(from, to, M, count) <= 0) {\n\t\t\t        \tjsfeat.cache.put_buffer(m_buff);\n\t\t\t        \tjsfeat.cache.put_buffer(ms_buff);\n\t\t\t        \tjsfeat.cache.put_buffer(err_buff);\n\t\t\t        \treturn false;\n\t\t\t        }\n\n\t\t\t        M.copy_to(model);\n\t\t\t        if(mask) {\n\t\t\t        \twhile(--count >= 0) {\n\t\t\t        \t\tmask.data[count] = 1;\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        jsfeat.cache.put_buffer(m_buff);\n\t\t\t        jsfeat.cache.put_buffer(ms_buff);\n\t\t\t        jsfeat.cache.put_buffer(err_buff);\n\t\t\t        return true;\n\t\t\t    }\n\n\t\t\t    for (; iter < niters; ++iter) {\n\t\t\t        // generate subset\n\t\t\t        found = get_subset(kernel, from, to, model_points, count, subset0, subset1);\n\t\t\t        if(!found) {\n\t\t\t            if(iter == 0) {\n\t\t\t            \tjsfeat.cache.put_buffer(m_buff);\n\t\t\t            \tjsfeat.cache.put_buffer(ms_buff);\n\t\t\t            \tjsfeat.cache.put_buffer(err_buff);\n\t\t\t                return false;\n\t\t\t            }\n\t\t\t            break;\n\t\t\t        }\n\n\t\t\t        nmodels = kernel.run( subset0, subset1, M, model_points );\n\t\t\t        if(nmodels <= 0)\n\t\t\t            continue;\n\n\t\t\t        // TODO handle multimodel output\n\n\t\t\t        kernel.error(from, to, M, err, count);\n\t\t\t        median = jsfeat.math.median(err, 0, count-1);\n\n\t\t\t        if(median < min_median) {\n\t\t\t            min_median = median;\n\t\t\t            M.copy_to(model);\n\t\t\t            result = true;\n\t\t\t        }\n\t\t\t    }\n\n\t\t\t    if(result) {\n\t\t\t        sigma = 2.5*1.4826*(1 + 5.0/(count - model_points))*Math.sqrt(min_median);\n\t\t\t        sigma = Math.max(sigma, 0.001);\n\n\t\t\t        numinliers = find_inliers(kernel, model, from, to, count, sigma, err, curr_mask.data);\n\t\t\t        if(mask) curr_mask.copy_to(mask);\n\t\t\t        \n\t\t\t        result = numinliers >= model_points;\n\t\t\t    }\n\n\t\t\t    jsfeat.cache.put_buffer(m_buff);\n\t\t\t    jsfeat.cache.put_buffer(ms_buff);\n\t\t\t    jsfeat.cache.put_buffer(err_buff);\n\n\t\t\t    return result;\n    \t\t}\n\n    \t};\n\n    })();\n\n    global.ransac_params_t = ransac_params_t;\n    global.motion_model = motion_model;\n    global.motion_estimator = motion_estimator;\n\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var imgproc = (function() {\n\n        var _resample_u8 = function(src, dst, nw, nh) {\n            var xofs_count=0;\n            var ch=src.channel,w=src.cols,h=src.rows;\n            var src_d=src.data,dst_d=dst.data;\n            var scale_x = w / nw, scale_y = h / nh;\n            var inv_scale_256 = (scale_x * scale_y * 0x10000)|0;\n            var dx=0,dy=0,sx=0,sy=0,sx1=0,sx2=0,i=0,k=0,fsx1=0.0,fsx2=0.0;\n            var a=0,b=0,dxn=0,alpha=0,beta=0,beta1=0;\n\n            var buf_node = jsfeat.cache.get_buffer((nw*ch)<<2);\n            var sum_node = jsfeat.cache.get_buffer((nw*ch)<<2);\n            var xofs_node = jsfeat.cache.get_buffer((w*2*3)<<2);\n\n            var buf = buf_node.i32;\n            var sum = sum_node.i32;\n            var xofs = xofs_node.i32;\n\n            for (; dx < nw; dx++) {\n                fsx1 = dx * scale_x, fsx2 = fsx1 + scale_x;\n                sx1 = (fsx1 + 1.0 - 1e-6)|0, sx2 = fsx2|0;\n                sx1 = Math.min(sx1, w - 1);\n                sx2 = Math.min(sx2, w - 1);\n\n                if(sx1 > fsx1) {\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = ((sx1 - 1)*ch)|0; \n                    xofs[k++] = ((sx1 - fsx1) * 0x100)|0;\n                    xofs_count++;\n                }\n                for(sx = sx1; sx < sx2; sx++){\n                    xofs_count++;\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = (sx * ch)|0;\n                    xofs[k++] = 256;\n                }\n                if(fsx2 - sx2 > 1e-3) {\n                    xofs_count++;\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = (sx2 * ch)|0;\n                    xofs[k++] = ((fsx2 - sx2) * 256)|0;\n                }\n            }\n\n            for (dx = 0; dx < nw * ch; dx++) {\n                buf[dx] = sum[dx] = 0;\n            }\n            dy = 0;\n            for (sy = 0; sy < h; sy++) {\n                a = w * sy;\n                for (k = 0; k < xofs_count; k++) {\n                    dxn = xofs[k*3];\n                    sx1 = xofs[k*3+1];\n                    alpha = xofs[k*3+2];\n                    for (i = 0; i < ch; i++) {\n                        buf[dxn + i] += src_d[a+sx1+i] * alpha;\n                    }\n                }\n                if ((dy + 1) * scale_y <= sy + 1 || sy == h - 1) {\n                    beta = (Math.max(sy + 1 - (dy + 1) * scale_y, 0.0) * 256)|0;\n                    beta1 = 256 - beta;\n                    b = nw * dy;\n                    if (beta <= 0) {\n                        for (dx = 0; dx < nw * ch; dx++) {\n                            dst_d[b+dx] = Math.min(Math.max((sum[dx] + buf[dx] * 256) / inv_scale_256, 0), 255);\n                            sum[dx] = buf[dx] = 0;\n                        }\n                    } else {\n                        for (dx = 0; dx < nw * ch; dx++) {\n                            dst_d[b+dx] = Math.min(Math.max((sum[dx] + buf[dx] * beta1) / inv_scale_256, 0), 255);\n                            sum[dx] = buf[dx] * beta;\n                            buf[dx] = 0;\n                        }\n                    }\n                    dy++;\n                } else {\n                    for(dx = 0; dx < nw * ch; dx++) {\n                        sum[dx] += buf[dx] * 256;\n                        buf[dx] = 0;\n                    }\n                }\n            }\n\n            jsfeat.cache.put_buffer(sum_node);\n            jsfeat.cache.put_buffer(buf_node);\n            jsfeat.cache.put_buffer(xofs_node);\n        }\n\n        var _resample = function(src, dst, nw, nh) {\n            var xofs_count=0;\n            var ch=src.channel,w=src.cols,h=src.rows;\n            var src_d=src.data,dst_d=dst.data;\n            var scale_x = w / nw, scale_y = h / nh;\n            var scale = 1.0 / (scale_x * scale_y);\n            var dx=0,dy=0,sx=0,sy=0,sx1=0,sx2=0,i=0,k=0,fsx1=0.0,fsx2=0.0;\n            var a=0,b=0,dxn=0,alpha=0.0,beta=0.0,beta1=0.0;\n\n            var buf_node = jsfeat.cache.get_buffer((nw*ch)<<2);\n            var sum_node = jsfeat.cache.get_buffer((nw*ch)<<2);\n            var xofs_node = jsfeat.cache.get_buffer((w*2*3)<<2);\n\n            var buf = buf_node.f32;\n            var sum = sum_node.f32;\n            var xofs = xofs_node.f32;\n\n            for (; dx < nw; dx++) {\n                fsx1 = dx * scale_x, fsx2 = fsx1 + scale_x;\n                sx1 = (fsx1 + 1.0 - 1e-6)|0, sx2 = fsx2|0;\n                sx1 = Math.min(sx1, w - 1);\n                sx2 = Math.min(sx2, w - 1);\n\n                if(sx1 > fsx1) {\n                    xofs_count++;\n                    xofs[k++] = ((sx1 - 1)*ch)|0;\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = (sx1 - fsx1) * scale;\n                }\n                for(sx = sx1; sx < sx2; sx++){\n                    xofs_count++;\n                    xofs[k++] = (sx * ch)|0;\n                    xofs[k++] = (dx * ch)|0; \n                    xofs[k++] = scale;\n                }\n                if(fsx2 - sx2 > 1e-3) {\n                    xofs_count++;\n                    xofs[k++] = (sx2 * ch)|0;\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = (fsx2 - sx2) * scale;\n                }\n            }\n\n            for (dx = 0; dx < nw * ch; dx++) {\n                buf[dx] = sum[dx] = 0;\n            }\n            dy = 0;\n            for (sy = 0; sy < h; sy++) {\n                a = w * sy;\n                for (k = 0; k < xofs_count; k++) {\n                    sx1 = xofs[k*3]|0;\n                    dxn = xofs[k*3+1]|0;\n                    alpha = xofs[k*3+2];\n                    for (i = 0; i < ch; i++) {\n                        buf[dxn + i] += src_d[a+sx1+i] * alpha;\n                    }\n                }\n                if ((dy + 1) * scale_y <= sy + 1 || sy == h - 1) {\n                    beta = Math.max(sy + 1 - (dy + 1) * scale_y, 0.0);\n                    beta1 = 1.0 - beta;\n                    b = nw * dy;\n                    if (Math.abs(beta) < 1e-3) {\n                        for (dx = 0; dx < nw * ch; dx++) {\n                            dst_d[b+dx] = sum[dx] + buf[dx];\n                            sum[dx] = buf[dx] = 0;\n                        }\n                    } else {\n                        for (dx = 0; dx < nw * ch; dx++) {\n                            dst_d[b+dx] = sum[dx] + buf[dx] * beta1;\n                            sum[dx] = buf[dx] * beta;\n                            buf[dx] = 0;\n                        }\n                    }\n                    dy++;\n                } else {\n                    for(dx = 0; dx < nw * ch; dx++) {\n                        sum[dx] += buf[dx]; \n                        buf[dx] = 0;\n                    }\n                }\n            }\n            jsfeat.cache.put_buffer(sum_node);\n            jsfeat.cache.put_buffer(buf_node);\n            jsfeat.cache.put_buffer(xofs_node);\n        }\n\n        var _convol_u8 = function(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel) {\n            var i=0,j=0,k=0,sp=0,dp=0,sum=0,sum1=0,sum2=0,sum3=0,f0=filter[0],fk=0;\n            var w2=w<<1,w3=w*3,w4=w<<2;\n            // hor pass\n            for (; i < h; ++i) { \n                sum = src_d[sp];\n                for (j = 0; j < half_kernel; ++j) {\n                    buf[j] = sum;\n                }\n                for (j = 0; j <= w-2; j+=2) {\n                    buf[j + half_kernel] = src_d[sp+j];\n                    buf[j + half_kernel+1] = src_d[sp+j+1];\n                }\n                for (; j < w; ++j) {\n                    buf[j + half_kernel] = src_d[sp+j];\n                }\n                sum = src_d[sp+w-1];\n                for (j = w; j < half_kernel + w; ++j) {\n                    buf[j + half_kernel] = sum;\n                }\n                for (j = 0; j <= w-4; j+=4) {\n                    sum = buf[j] * f0, \n                    sum1 = buf[j+1] * f0,\n                    sum2 = buf[j+2] * f0,\n                    sum3 = buf[j+3] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        fk = filter[k];\n                        sum += buf[k + j] * fk;\n                        sum1 += buf[k + j+1] * fk;\n                        sum2 += buf[k + j+2] * fk;\n                        sum3 += buf[k + j+3] * fk;\n                    }\n                    dst_d[dp+j] = Math.min(sum >> 8, 255);\n                    dst_d[dp+j+1] = Math.min(sum1 >> 8, 255);\n                    dst_d[dp+j+2] = Math.min(sum2 >> 8, 255);\n                    dst_d[dp+j+3] = Math.min(sum3 >> 8, 255);\n                }\n                for (; j < w; ++j) {\n                    sum = buf[j] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        sum += buf[k + j] * filter[k];\n                    }\n                    dst_d[dp+j] = Math.min(sum >> 8, 255);\n                }\n                sp += w;\n                dp += w;\n            }\n\n            // vert pass\n            for (i = 0; i < w; ++i) {\n                sum = dst_d[i];\n                for (j = 0; j < half_kernel; ++j) {\n                    buf[j] = sum;\n                }\n                k = i;\n                for (j = 0; j <= h-2; j+=2, k+=w2) {\n                    buf[j+half_kernel] = dst_d[k];\n                    buf[j+half_kernel+1] = dst_d[k+w];\n                }\n                for (; j < h; ++j, k+=w) {\n                    buf[j+half_kernel] = dst_d[k];\n                }\n                sum = dst_d[(h-1)*w + i];\n                for (j = h; j < half_kernel + h; ++j) {\n                    buf[j + half_kernel] = sum;\n                }\n                dp = i;\n                for (j = 0; j <= h-4; j+=4, dp+=w4) { \n                    sum = buf[j] * f0, \n                    sum1 = buf[j+1] * f0,\n                    sum2 = buf[j+2] * f0,\n                    sum3 = buf[j+3] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        fk = filter[k];\n                        sum += buf[k + j] * fk;\n                        sum1 += buf[k + j+1] * fk;\n                        sum2 += buf[k + j+2] * fk;\n                        sum3 += buf[k + j+3] * fk;\n                    }\n                    dst_d[dp] = Math.min(sum >> 8, 255);\n                    dst_d[dp+w] = Math.min(sum1 >> 8, 255);\n                    dst_d[dp+w2] = Math.min(sum2 >> 8, 255);\n                    dst_d[dp+w3] = Math.min(sum3 >> 8, 255);\n                }\n                for (; j < h; ++j, dp+=w) {\n                    sum = buf[j] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        sum += buf[k + j] * filter[k];\n                    }\n                    dst_d[dp] = Math.min(sum >> 8, 255);\n                }\n            }\n        }\n\n        var _convol = function(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel) {\n            var i=0,j=0,k=0,sp=0,dp=0,sum=0.0,sum1=0.0,sum2=0.0,sum3=0.0,f0=filter[0],fk=0.0;\n            var w2=w<<1,w3=w*3,w4=w<<2;\n            // hor pass\n            for (; i < h; ++i) { \n                sum = src_d[sp];\n                for (j = 0; j < half_kernel; ++j) {\n                    buf[j] = sum;\n                }\n                for (j = 0; j <= w-2; j+=2) {\n                    buf[j + half_kernel] = src_d[sp+j];\n                    buf[j + half_kernel+1] = src_d[sp+j+1];\n                }\n                for (; j < w; ++j) {\n                    buf[j + half_kernel] = src_d[sp+j];\n                }\n                sum = src_d[sp+w-1];\n                for (j = w; j < half_kernel + w; ++j) {\n                    buf[j + half_kernel] = sum;\n                }\n                for (j = 0; j <= w-4; j+=4) {\n                    sum = buf[j] * f0, \n                    sum1 = buf[j+1] * f0,\n                    sum2 = buf[j+2] * f0,\n                    sum3 = buf[j+3] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        fk = filter[k];\n                        sum += buf[k + j] * fk;\n                        sum1 += buf[k + j+1] * fk;\n                        sum2 += buf[k + j+2] * fk;\n                        sum3 += buf[k + j+3] * fk;\n                    }\n                    dst_d[dp+j] = sum;\n                    dst_d[dp+j+1] = sum1;\n                    dst_d[dp+j+2] = sum2;\n                    dst_d[dp+j+3] = sum3;\n                }\n                for (; j < w; ++j) {\n                    sum = buf[j] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        sum += buf[k + j] * filter[k];\n                    }\n                    dst_d[dp+j] = sum;\n                }\n                sp += w;\n                dp += w;\n            }\n\n            // vert pass\n            for (i = 0; i < w; ++i) {\n                sum = dst_d[i];\n                for (j = 0; j < half_kernel; ++j) {\n                    buf[j] = sum;\n                }\n                k = i;\n                for (j = 0; j <= h-2; j+=2, k+=w2) {\n                    buf[j+half_kernel] = dst_d[k];\n                    buf[j+half_kernel+1] = dst_d[k+w];\n                }\n                for (; j < h; ++j, k+=w) {\n                    buf[j+half_kernel] = dst_d[k];\n                }\n                sum = dst_d[(h-1)*w + i];\n                for (j = h; j < half_kernel + h; ++j) {\n                    buf[j + half_kernel] = sum;\n                }\n                dp = i;\n                for (j = 0; j <= h-4; j+=4, dp+=w4) { \n                    sum = buf[j] * f0, \n                    sum1 = buf[j+1] * f0,\n                    sum2 = buf[j+2] * f0,\n                    sum3 = buf[j+3] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        fk = filter[k];\n                        sum += buf[k + j] * fk;\n                        sum1 += buf[k + j+1] * fk;\n                        sum2 += buf[k + j+2] * fk;\n                        sum3 += buf[k + j+3] * fk;\n                    }\n                    dst_d[dp] = sum;\n                    dst_d[dp+w] = sum1;\n                    dst_d[dp+w2] = sum2;\n                    dst_d[dp+w3] = sum3;\n                }\n                for (; j < h; ++j, dp+=w) {\n                    sum = buf[j] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        sum += buf[k + j] * filter[k];\n                    }\n                    dst_d[dp] = sum;\n                }\n            }\n        }\n\n        return {\n            // TODO: add support for RGB/BGR order\n            // for raw arrays\n            grayscale: function(src, w, h, dst, code) {\n                // this is default image data representation in browser\n                if (typeof code === \"undefined\") { code = jsfeat.COLOR_RGBA2GRAY; }\n                var x=0, y=0, i=0, j=0, ir=0,jr=0;\n                var coeff_r = 4899, coeff_g = 9617, coeff_b = 1868, cn = 4;\n\n                if(code == jsfeat.COLOR_BGRA2GRAY || code == jsfeat.COLOR_BGR2GRAY) {\n                    coeff_r = 1868;\n                    coeff_b = 4899;\n                }\n                if(code == jsfeat.COLOR_RGB2GRAY || code == jsfeat.COLOR_BGR2GRAY) {\n                    cn = 3;\n                }\n                var cn2 = cn<<1, cn3 = (cn*3)|0;\n\n                dst.resize(w, h, 1);\n                var dst_u8 = dst.data;\n\n                for(y = 0; y < h; ++y, j+=w, i+=w*cn) {\n                    for(x = 0, ir = i, jr = j; x <= w-4; x+=4, ir+=cn<<2, jr+=4) {\n                        dst_u8[jr]     = (src[ir] * coeff_r + src[ir+1] * coeff_g + src[ir+2] * coeff_b + 8192) >> 14;\n                        dst_u8[jr + 1] = (src[ir+cn] * coeff_r + src[ir+cn+1] * coeff_g + src[ir+cn+2] * coeff_b + 8192) >> 14;\n                        dst_u8[jr + 2] = (src[ir+cn2] * coeff_r + src[ir+cn2+1] * coeff_g + src[ir+cn2+2] * coeff_b + 8192) >> 14;\n                        dst_u8[jr + 3] = (src[ir+cn3] * coeff_r + src[ir+cn3+1] * coeff_g + src[ir+cn3+2] * coeff_b + 8192) >> 14;\n                    }\n                    for (; x < w; ++x, ++jr, ir+=cn) {\n                        dst_u8[jr] = (src[ir] * coeff_r + src[ir+1] * coeff_g + src[ir+2] * coeff_b + 8192) >> 14;\n                    }\n                }\n            },\n            // derived from CCV library\n            resample: function(src, dst, nw, nh) {\n                var h=src.rows,w=src.cols;\n                if (h > nh && w > nw) {\n                    dst.resize(nw, nh, src.channel);\n                    // using the fast alternative (fix point scale, 0x100 to avoid overflow)\n                    if (src.type&jsfeat.U8_t && dst.type&jsfeat.U8_t && h * w / (nh * nw) < 0x100) {\n                        _resample_u8(src, dst, nw, nh);\n                    } else {\n                        _resample(src, dst, nw, nh);\n                    }\n                }\n            },\n\n            box_blur_gray: function(src, dst, radius, options) {\n                if (typeof options === \"undefined\") { options = 0; }\n                var w=src.cols, h=src.rows, h2=h<<1, w2=w<<1;\n                var i=0,x=0,y=0,end=0;\n                var windowSize = ((radius << 1) + 1)|0;\n                var radiusPlusOne = (radius + 1)|0, radiusPlus2 = (radiusPlusOne+1)|0;\n                var scale = options&jsfeat.BOX_BLUR_NOSCALE ? 1 : (1.0 / (windowSize*windowSize));\n\n                var tmp_buff = jsfeat.cache.get_buffer((w*h)<<2);\n\n                var sum=0, dstIndex=0, srcIndex = 0, nextPixelIndex=0, previousPixelIndex=0;\n                var data_i32 = tmp_buff.i32; // to prevent overflow\n                var data_u8 = src.data;\n                var hold=0;\n\n                dst.resize(w, h, src.channel);\n\n                // first pass\n                // no need to scale \n                //data_u8 = src.data;\n                //data_i32 = tmp;\n                for (y = 0; y < h; ++y) {\n                    dstIndex = y;\n                    sum = radiusPlusOne * data_u8[srcIndex];\n\n                    for(i = (srcIndex+1)|0, end=(srcIndex+radius)|0; i <= end; ++i) {\n                        sum += data_u8[i];\n                    }\n\n                    nextPixelIndex = (srcIndex + radiusPlusOne)|0;\n                    previousPixelIndex = srcIndex;\n                    hold = data_u8[previousPixelIndex];\n                    for(x = 0; x < radius; ++x, dstIndex += h) {\n                        data_i32[dstIndex] = sum;\n                        sum += data_u8[nextPixelIndex]- hold;\n                        nextPixelIndex ++;\n                    }\n                    for(; x < w-radiusPlus2; x+=2, dstIndex += h2) {\n                        data_i32[dstIndex] = sum;\n                        sum += data_u8[nextPixelIndex]- data_u8[previousPixelIndex];\n\n                        data_i32[dstIndex+h] = sum;\n                        sum += data_u8[nextPixelIndex+1]- data_u8[previousPixelIndex+1];\n\n                        nextPixelIndex +=2;\n                        previousPixelIndex +=2;\n                    }\n                    for(; x < w-radiusPlusOne; ++x, dstIndex += h) {\n                        data_i32[dstIndex] = sum;\n                        sum += data_u8[nextPixelIndex]- data_u8[previousPixelIndex];\n\n                        nextPixelIndex ++;\n                        previousPixelIndex ++;\n                    }\n                    \n                    hold = data_u8[nextPixelIndex-1];\n                    for(; x < w; ++x, dstIndex += h) {\n                        data_i32[dstIndex] = sum;\n\n                        sum += hold- data_u8[previousPixelIndex];\n                        previousPixelIndex ++;\n                    }\n\n                    srcIndex += w;\n                }\n                //\n                // second pass\n                srcIndex = 0;\n                //data_i32 = tmp; // this is a transpose\n                data_u8 = dst.data;\n\n                // dont scale result\n                if(scale == 1) {\n                    for (y = 0; y < w; ++y) {\n                        dstIndex = y;\n                        sum = radiusPlusOne * data_i32[srcIndex];\n\n                        for(i = (srcIndex+1)|0, end=(srcIndex+radius)|0; i <= end; ++i) {\n                            sum += data_i32[i];\n                        }\n\n                        nextPixelIndex = srcIndex + radiusPlusOne;\n                        previousPixelIndex = srcIndex;\n                        hold = data_i32[previousPixelIndex];\n\n                        for(x = 0; x < radius; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum;\n                            sum += data_i32[nextPixelIndex]- hold;\n                            nextPixelIndex ++;\n                        }\n                        for(; x < h-radiusPlus2; x+=2, dstIndex += w2) {\n                            data_u8[dstIndex] = sum;\n                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];\n\n                            data_u8[dstIndex+w] = sum;\n                            sum += data_i32[nextPixelIndex+1]- data_i32[previousPixelIndex+1];\n\n                            nextPixelIndex +=2;\n                            previousPixelIndex +=2;\n                        }\n                        for(; x < h-radiusPlusOne; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum;\n\n                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];\n                            nextPixelIndex ++;\n                            previousPixelIndex ++;\n                        }\n                        hold = data_i32[nextPixelIndex-1];\n                        for(; x < h; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum;\n\n                            sum += hold- data_i32[previousPixelIndex];\n                            previousPixelIndex ++;\n                        }\n\n                        srcIndex += h;\n                    }\n                } else {\n                    for (y = 0; y < w; ++y) {\n                        dstIndex = y;\n                        sum = radiusPlusOne * data_i32[srcIndex];\n\n                        for(i = (srcIndex+1)|0, end=(srcIndex+radius)|0; i <= end; ++i) {\n                            sum += data_i32[i];\n                        }\n\n                        nextPixelIndex = srcIndex + radiusPlusOne;\n                        previousPixelIndex = srcIndex;\n                        hold = data_i32[previousPixelIndex];\n\n                        for(x = 0; x < radius; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum*scale;\n                            sum += data_i32[nextPixelIndex]- hold;\n                            nextPixelIndex ++;\n                        }\n                        for(; x < h-radiusPlus2; x+=2, dstIndex += w2) {\n                            data_u8[dstIndex] = sum*scale;\n                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];\n\n                            data_u8[dstIndex+w] = sum*scale;\n                            sum += data_i32[nextPixelIndex+1]- data_i32[previousPixelIndex+1];\n\n                            nextPixelIndex +=2;\n                            previousPixelIndex +=2;\n                        }\n                        for(; x < h-radiusPlusOne; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum*scale;\n\n                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];\n                            nextPixelIndex ++;\n                            previousPixelIndex ++;\n                        }\n                        hold = data_i32[nextPixelIndex-1];\n                        for(; x < h; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum*scale;\n\n                            sum += hold- data_i32[previousPixelIndex];\n                            previousPixelIndex ++;\n                        }\n\n                        srcIndex += h;\n                    }\n                }\n\n                jsfeat.cache.put_buffer(tmp_buff);\n            },\n\n            gaussian_blur: function(src, dst, kernel_size, sigma) {\n                if (typeof sigma === \"undefined\") { sigma = 0.0; }\n                if (typeof kernel_size === \"undefined\") { kernel_size = 0; }\n                kernel_size = kernel_size == 0 ? (Math.max(1, (4.0 * sigma + 1.0 - 1e-8)) * 2 + 1)|0 : kernel_size;\n                var half_kernel = kernel_size >> 1;\n                var w = src.cols, h = src.rows;\n                var data_type = src.type, is_u8 = data_type&jsfeat.U8_t;\n\n                dst.resize(w, h, src.channel);\n\n                var src_d = src.data, dst_d = dst.data;\n                var buf,filter,buf_sz=(kernel_size + Math.max(h, w))|0;\n\n                var buf_node = jsfeat.cache.get_buffer(buf_sz<<2);\n                var filt_node = jsfeat.cache.get_buffer(kernel_size<<2);\n\n                if(is_u8) {\n                    buf = buf_node.i32;\n                    filter = filt_node.i32;\n                } else if(data_type&jsfeat.S32_t) {\n                    buf = buf_node.i32;\n                    filter = filt_node.f32;\n                } else {\n                    buf = buf_node.f32;\n                    filter = filt_node.f32;\n                }\n\n                jsfeat.math.get_gaussian_kernel(kernel_size, sigma, filter, data_type);\n\n                if(is_u8) {\n                    _convol_u8(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel);\n                } else {\n                    _convol(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel);\n                }\n\n                jsfeat.cache.put_buffer(buf_node);\n                jsfeat.cache.put_buffer(filt_node);\n            },\n            // assume we always need it for u8 image\n            pyrdown: function(src, dst, sx, sy) {\n                // this is needed for bbf\n                if (typeof sx === \"undefined\") { sx = 0; }\n                if (typeof sy === \"undefined\") { sy = 0; }\n\n                var w = src.cols, h = src.rows;\n                var w2 = w >> 1, h2 = h >> 1;\n                var _w2 = w2 - (sx << 1), _h2 = h2 - (sy << 1);\n                var x=0,y=0,sptr=sx+sy*w,sline=0,dptr=0,dline=0;\n\n                dst.resize(w2, h2, src.channel);\n\n                var src_d = src.data, dst_d = dst.data;\n\n                for(y = 0; y < _h2; ++y) {\n                    sline = sptr;\n                    dline = dptr;\n                    for(x = 0; x <= _w2-2; x+=2, dline+=2, sline += 4) {\n                        dst_d[dline] = (src_d[sline] + src_d[sline+1] +\n                                            src_d[sline+w] + src_d[sline+w+1] + 2) >> 2;\n                        dst_d[dline+1] = (src_d[sline+2] + src_d[sline+3] +\n                                            src_d[sline+w+2] + src_d[sline+w+3] + 2) >> 2;\n                    }\n                    for(; x < _w2; ++x, ++dline, sline += 2) {\n                        dst_d[dline] = (src_d[sline] + src_d[sline+1] +\n                                            src_d[sline+w] + src_d[sline+w+1] + 2) >> 2;\n                    }\n                    sptr += w << 1;\n                    dptr += w2;\n                }\n            },\n\n            // dst: [gx,gy,...]\n            scharr_derivatives: function(src, dst) {\n                var w = src.cols, h = src.rows;\n                var dstep = w<<1,x=0,y=0,x1=0,a,b,c,d,e,f;\n                var srow0=0,srow1=0,srow2=0,drow=0;\n                var trow0,trow1;\n\n                dst.resize(w, h, 2); // 2 channel output gx, gy\n\n                var img = src.data, gxgy=dst.data;\n\n                var buf0_node = jsfeat.cache.get_buffer((w+2)<<2);\n                var buf1_node = jsfeat.cache.get_buffer((w+2)<<2);\n\n                if(src.type&jsfeat.U8_t || src.type&jsfeat.S32_t) {\n                    trow0 = buf0_node.i32;\n                    trow1 = buf1_node.i32;\n                } else {\n                    trow0 = buf0_node.f32;\n                    trow1 = buf1_node.f32;\n                }\n\n                for(; y < h; ++y, srow1+=w) {\n                    srow0 = ((y > 0 ? y-1 : 1)*w)|0;\n                    srow2 = ((y < h-1 ? y+1 : h-2)*w)|0;\n                    drow = (y*dstep)|0;\n                    // do vertical convolution\n                    for(x = 0, x1 = 1; x <= w-2; x+=2, x1+=2) {\n                        a = img[srow0+x], b = img[srow2+x];\n                        trow0[x1] = ( (a + b)*3 + (img[srow1+x])*10 );\n                        trow1[x1] = ( b - a );\n                        //\n                        a = img[srow0+x+1], b = img[srow2+x+1];\n                        trow0[x1+1] = ( (a + b)*3 + (img[srow1+x+1])*10 );\n                        trow1[x1+1] = ( b - a );\n                    }\n                    for(; x < w; ++x, ++x1) {\n                        a = img[srow0+x], b = img[srow2+x];\n                        trow0[x1] = ( (a + b)*3 + (img[srow1+x])*10 );\n                        trow1[x1] = ( b - a );\n                    }\n                    // make border\n                    x = (w + 1)|0;\n                    trow0[0] = trow0[1]; trow0[x] = trow0[w];\n                    trow1[0] = trow1[1]; trow1[x] = trow1[w];\n                    // do horizontal convolution, interleave the results and store them\n                    for(x = 0; x <= w-4; x+=4) {\n                        a = trow1[x+2], b = trow1[x+1], c = trow1[x+3], d = trow1[x+4],\n                        e = trow0[x+2], f = trow0[x+3];\n                        gxgy[drow++] = ( e - trow0[x] );\n                        gxgy[drow++] = ( (a + trow1[x])*3 + b*10 );\n                        gxgy[drow++] = ( f - trow0[x+1] );\n                        gxgy[drow++] = ( (c + b)*3 + a*10 );\n\n                        gxgy[drow++] = ( (trow0[x+4] - e) );\n                        gxgy[drow++] = ( ((d + a)*3 + c*10) );\n                        gxgy[drow++] = ( (trow0[x+5] - f) );\n                        gxgy[drow++] = ( ((trow1[x+5] + c)*3 + d*10) );\n                    }\n                    for(; x < w; ++x) {\n                        gxgy[drow++] = ( (trow0[x+2] - trow0[x]) );\n                        gxgy[drow++] = ( ((trow1[x+2] + trow1[x])*3 + trow1[x+1]*10) );\n                    }\n                }\n                jsfeat.cache.put_buffer(buf0_node);\n                jsfeat.cache.put_buffer(buf1_node);\n            },\n\n            // compute gradient using Sobel kernel [1 2 1] * [-1 0 1]^T\n            // dst: [gx,gy,...]\n            sobel_derivatives: function(src, dst) {\n                var w = src.cols, h = src.rows;\n                var dstep = w<<1,x=0,y=0,x1=0,a,b,c,d,e,f;\n                var srow0=0,srow1=0,srow2=0,drow=0;\n                var trow0,trow1;\n\n                dst.resize(w, h, 2); // 2 channel output gx, gy\n\n                var img = src.data, gxgy=dst.data;\n\n                var buf0_node = jsfeat.cache.get_buffer((w+2)<<2);\n                var buf1_node = jsfeat.cache.get_buffer((w+2)<<2);\n\n                if(src.type&jsfeat.U8_t || src.type&jsfeat.S32_t) {\n                    trow0 = buf0_node.i32;\n                    trow1 = buf1_node.i32;\n                } else {\n                    trow0 = buf0_node.f32;\n                    trow1 = buf1_node.f32;\n                }\n\n                for(; y < h; ++y, srow1+=w) {\n                    srow0 = ((y > 0 ? y-1 : 1)*w)|0;\n                    srow2 = ((y < h-1 ? y+1 : h-2)*w)|0;\n                    drow = (y*dstep)|0;\n                    // do vertical convolution\n                    for(x = 0, x1 = 1; x <= w-2; x+=2, x1+=2) {\n                        a = img[srow0+x], b = img[srow2+x];\n                        trow0[x1] = ( (a + b) + (img[srow1+x]*2) );\n                        trow1[x1] = ( b - a );\n                        //\n                        a = img[srow0+x+1], b = img[srow2+x+1];\n                        trow0[x1+1] = ( (a + b) + (img[srow1+x+1]*2) );\n                        trow1[x1+1] = ( b - a );\n                    }\n                    for(; x < w; ++x, ++x1) {\n                        a = img[srow0+x], b = img[srow2+x];\n                        trow0[x1] = ( (a + b) + (img[srow1+x]*2) );\n                        trow1[x1] = ( b - a );\n                    }\n                    // make border\n                    x = (w + 1)|0;\n                    trow0[0] = trow0[1]; trow0[x] = trow0[w];\n                    trow1[0] = trow1[1]; trow1[x] = trow1[w];\n                    // do horizontal convolution, interleave the results and store them\n                    for(x = 0; x <= w-4; x+=4) {\n                        a = trow1[x+2], b = trow1[x+1], c = trow1[x+3], d = trow1[x+4],\n                        e = trow0[x+2], f = trow0[x+3];\n                        gxgy[drow++] = ( e - trow0[x] );\n                        gxgy[drow++] = ( a + trow1[x] + b*2 );\n                        gxgy[drow++] = ( f - trow0[x+1] );\n                        gxgy[drow++] = ( c + b + a*2 );\n\n                        gxgy[drow++] = ( trow0[x+4] - e );\n                        gxgy[drow++] = ( d + a + c*2 );\n                        gxgy[drow++] = ( trow0[x+5] - f );\n                        gxgy[drow++] = ( trow1[x+5] + c + d*2 );\n                    }\n                    for(; x < w; ++x) {\n                        gxgy[drow++] = ( trow0[x+2] - trow0[x] );\n                        gxgy[drow++] = ( trow1[x+2] + trow1[x] + trow1[x+1]*2 );\n                    }\n                }\n                jsfeat.cache.put_buffer(buf0_node);\n                jsfeat.cache.put_buffer(buf1_node);\n            },\n\n            // please note: \n            // dst_(type) size should be cols = src.cols+1, rows = src.rows+1\n            compute_integral_image: function(src, dst_sum, dst_sqsum, dst_tilted) {\n                var w0=src.cols|0,h0=src.rows|0,src_d=src.data;\n                var w1=(w0+1)|0;\n                var s=0,s2=0,p=0,pup=0,i=0,j=0,v=0,k=0;\n\n                if(dst_sum && dst_sqsum) {\n                    // fill first row with zeros\n                    for(; i < w1; ++i) {\n                        dst_sum[i] = 0, dst_sqsum[i] = 0;\n                    }\n                    p = (w1+1)|0, pup = 1;\n                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n                        s = s2 = 0;\n                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {\n                            v = src_d[k];\n                            s += v, s2 += v*v;\n                            dst_sum[p] = dst_sum[pup] + s;\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\n\n                            v = src_d[k+1];\n                            s += v, s2 += v*v;\n                            dst_sum[p+1] = dst_sum[pup+1] + s;\n                            dst_sqsum[p+1] = dst_sqsum[pup+1] + s2;\n                        }\n                        for(; j < w0; ++j, ++k, ++p, ++pup) {\n                            v = src_d[k];\n                            s += v, s2 += v*v;\n                            dst_sum[p] = dst_sum[pup] + s;\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\n                        }\n                    }\n                } else if(dst_sum) {\n                    // fill first row with zeros\n                    for(; i < w1; ++i) {\n                        dst_sum[i] = 0;\n                    }\n                    p = (w1+1)|0, pup = 1;\n                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n                        s = 0;\n                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {\n                            s += src_d[k];\n                            dst_sum[p] = dst_sum[pup] + s;\n                            s += src_d[k+1];\n                            dst_sum[p+1] = dst_sum[pup+1] + s;\n                        }\n                        for(; j < w0; ++j, ++k, ++p, ++pup) {\n                            s += src_d[k];\n                            dst_sum[p] = dst_sum[pup] + s;\n                        }\n                    }\n                } else if(dst_sqsum) {\n                    // fill first row with zeros\n                    for(; i < w1; ++i) {\n                        dst_sqsum[i] = 0;\n                    }\n                    p = (w1+1)|0, pup = 1;\n                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n                        s2 = 0;\n                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {\n                            v = src_d[k];\n                            s2 += v*v;\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\n                            v = src_d[k+1];\n                            s2 += v*v;\n                            dst_sqsum[p+1] = dst_sqsum[pup+1] + s2;\n                        }\n                        for(; j < w0; ++j, ++k, ++p, ++pup) {\n                            v = src_d[k];\n                            s2 += v*v;\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\n                        }\n                    }\n                }\n\n                if(dst_tilted) {\n                    // fill first row with zeros\n                    for(i = 0; i < w1; ++i) {\n                        dst_tilted[i] = 0;\n                    }\n                    // diagonal\n                    p = (w1+1)|0, pup = 0;\n                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {\n                            dst_tilted[p] = src_d[k] + dst_tilted[pup];\n                            dst_tilted[p+1] = src_d[k+1] + dst_tilted[pup+1];\n                        }\n                        for(; j < w0; ++j, ++k, ++p, ++pup) {\n                            dst_tilted[p] = src_d[k] + dst_tilted[pup];\n                        }\n                    }\n                    // diagonal\n                    p = (w1+w0)|0, pup = w0;\n                    for(i = 0; i < h0; ++i, p+=w1, pup+=w1) {\n                        dst_tilted[p] += dst_tilted[pup];\n                    }\n\n                    for(j = w0-1; j > 0; --j) {\n                        p = j+h0*w1, pup=p-w1;\n                        for(i = h0; i > 0; --i, p-=w1, pup-=w1) {\n                            dst_tilted[p] += dst_tilted[pup] + dst_tilted[pup+1];\n                        }\n                    }\n                }\n            },\n            equalize_histogram: function(src, dst) {\n                var w=src.cols,h=src.rows,src_d=src.data;\n\n                dst.resize(w, h, src.channel);\n\n                var dst_d=dst.data,size=w*h;\n                var i=0,prev=0,hist0,norm;\n\n                var hist0_node = jsfeat.cache.get_buffer(256<<2);\n                hist0 = hist0_node.i32;\n                for(; i < 256; ++i) hist0[i] = 0;\n                for (i = 0; i < size; ++i) {\n                    ++hist0[src_d[i]];\n                }\n\n                prev = hist0[0];\n                for (i = 1; i < 256; ++i) {\n                    prev = hist0[i] += prev;\n                }\n\n                norm = 255 / size;\n                for (i = 0; i < size; ++i) {\n                    dst_d[i] = (hist0[src_d[i]] * norm + 0.5)|0;\n                }\n                jsfeat.cache.put_buffer(hist0_node);\n            },\n\n            canny: function(src, dst, low_thresh, high_thresh) {\n                var w=src.cols,h=src.rows,src_d=src.data;\n\n                dst.resize(w, h, src.channel);\n                \n                var dst_d=dst.data;\n                var i=0,j=0,grad=0,w2=w<<1,_grad=0,suppress=0,f=0,x=0,y=0,s=0;\n                var tg22x=0,tg67x=0;\n\n                // cache buffers\n                var dxdy_node = jsfeat.cache.get_buffer((h * w2)<<2);\n                var buf_node = jsfeat.cache.get_buffer((3 * (w + 2))<<2);\n                var map_node = jsfeat.cache.get_buffer(((h+2) * (w + 2))<<2);\n                var stack_node = jsfeat.cache.get_buffer((h * w)<<2);\n                \n\n                var buf = buf_node.i32;\n                var map = map_node.i32;\n                var stack = stack_node.i32;\n                var dxdy = dxdy_node.i32;\n                var dxdy_m = new jsfeat.matrix_t(w, h, jsfeat.S32C2_t, dxdy_node.data);\n                var row0=1,row1=(w+2+1)|0,row2=(2*(w+2)+1)|0,map_w=(w+2)|0,map_i=(map_w+1)|0,stack_i=0;\n\n                this.sobel_derivatives(src, dxdy_m);\n\n                if(low_thresh > high_thresh) {\n                    i = low_thresh;\n                    low_thresh = high_thresh;\n                    high_thresh = i;\n                }\n\n                i = (3 * (w + 2))|0;\n                while(--i>=0) {\n                    buf[i] = 0;\n                }\n\n                i = ((h+2) * (w + 2))|0;\n                while(--i>=0) {\n                    map[i] = 0;\n                }\n\n                for (; j < w; ++j, grad+=2) {\n                    //buf[row1+j] = Math.abs(dxdy[grad]) + Math.abs(dxdy[grad+1]);\n                    x = dxdy[grad], y = dxdy[grad+1];\n                    //buf[row1+j] = x*x + y*y;\n                    buf[row1+j] = ((x ^ (x >> 31)) - (x >> 31)) + ((y ^ (y >> 31)) - (y >> 31));\n                }\n\n                for(i=1; i <= h; ++i, grad+=w2) {\n                    if(i == h) {\n                        j = row2+w;\n                        while(--j>=row2) {\n                            buf[j] = 0;\n                        }\n                    } else {\n                        for (j = 0; j < w; j++) {\n                            //buf[row2+j] =  Math.abs(dxdy[grad+(j<<1)]) + Math.abs(dxdy[grad+(j<<1)+1]);\n                            x = dxdy[grad+(j<<1)], y = dxdy[grad+(j<<1)+1];\n                            //buf[row2+j] = x*x + y*y;\n                            buf[row2+j] = ((x ^ (x >> 31)) - (x >> 31)) + ((y ^ (y >> 31)) - (y >> 31));\n                        }\n                    }\n                    _grad = (grad - w2)|0;\n                    map[map_i-1] = 0;\n                    suppress = 0;\n                    for(j = 0; j < w; ++j, _grad+=2) {\n                        f = buf[row1+j];\n                        if (f > low_thresh) {\n                            x = dxdy[_grad];\n                            y = dxdy[_grad+1];\n                            s = x ^ y;\n                            // seems ot be faster than Math.abs\n                            x = ((x ^ (x >> 31)) - (x >> 31))|0;\n                            y = ((y ^ (y >> 31)) - (y >> 31))|0;\n                            //x * tan(22.5) x * tan(67.5) == 2 * x + x * tan(22.5)\n                            tg22x = x * 13573;\n                            tg67x = tg22x + ((x + x) << 15);\n                            y <<= 15;\n                            if (y < tg22x) {\n                                if (f > buf[row1+j-1] && f >= buf[row1+j+1]) {\n                                    if (f > high_thresh && !suppress && map[map_i+j-map_w] != 2) {\n                                        map[map_i+j] = 2;\n                                        suppress = 1;\n                                        stack[stack_i++] = map_i + j;\n                                    } else {\n                                        map[map_i+j] = 1;\n                                    }\n                                    continue;\n                                }\n                            } else if (y > tg67x) {\n                                if (f > buf[row0+j] && f >= buf[row2+j]) {\n                                    if (f > high_thresh && !suppress && map[map_i+j-map_w] != 2) {\n                                        map[map_i+j] = 2;\n                                        suppress = 1;\n                                        stack[stack_i++] = map_i + j;\n                                    } else {\n                                        map[map_i+j] = 1;\n                                    }\n                                    continue;\n                                }\n                            } else {\n                                s = s < 0 ? -1 : 1;\n                                if (f > buf[row0+j-s] && f > buf[row2+j+s]) {\n                                    if (f > high_thresh && !suppress && map[map_i+j-map_w] != 2) {\n                                        map[map_i+j] = 2;\n                                        suppress = 1;\n                                        stack[stack_i++] = map_i + j;\n                                    } else {\n                                        map[map_i+j] = 1;\n                                    }\n                                    continue;\n                                }\n                            }\n                        }\n                        map[map_i+j] = 0;\n                        suppress = 0;\n                    }\n                    map[map_i+w] = 0;\n                    map_i += map_w;\n                    j = row0;\n                    row0 = row1;\n                    row1 = row2;\n                    row2 = j;\n                }\n\n                j = map_i - map_w - 1;\n                for(i = 0; i < map_w; ++i, ++j) {\n                    map[j] = 0;\n                }\n                // path following\n                while(stack_i > 0) {\n                    map_i = stack[--stack_i];\n                    map_i -= map_w+1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += 1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += 1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += map_w;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i -= 2;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += map_w;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += 1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += 1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                }\n\n                map_i = map_w + 1;\n                row0 = 0;\n                for(i = 0; i < h; ++i, map_i+=map_w) {\n                    for(j = 0; j < w; ++j) {\n                        dst_d[row0++] = (map[map_i+j] == 2) * 0xff;\n                    }\n                }\n\n                // free buffers\n                jsfeat.cache.put_buffer(dxdy_node);\n                jsfeat.cache.put_buffer(buf_node);\n                jsfeat.cache.put_buffer(map_node);\n                jsfeat.cache.put_buffer(stack_node);\n            },\n            // transform is 3x3 matrix_t\n            warp_perspective: function(src, dst, transform, fill_value) {\n                if (typeof fill_value === \"undefined\") { fill_value = 0; }\n                var src_width=src.cols|0, src_height=src.rows|0, dst_width=dst.cols|0, dst_height=dst.rows|0;\n                var src_d=src.data, dst_d=dst.data;\n                var x=0,y=0,off=0,ixs=0,iys=0,xs=0.0,ys=0.0,xs0=0.0,ys0=0.0,ws=0.0,sc=0.0,a=0.0,b=0.0,p0=0.0,p1=0.0;\n                var td=transform.data;\n                var m00=td[0],m01=td[1],m02=td[2],\n                    m10=td[3],m11=td[4],m12=td[5],\n                    m20=td[6],m21=td[7],m22=td[8];\n\n                for(var dptr = 0; y < dst_height; ++y) {\n                    xs0 = m01 * y + m02,\n                    ys0 = m11 * y + m12,\n                    ws  = m21 * y + m22;\n                    for(x = 0; x < dst_width; ++x, ++dptr, xs0+=m00, ys0+=m10, ws+=m20) {\n                        sc = 1.0 / ws;\n                        xs = xs0 * sc, ys = ys0 * sc;\n                        ixs = xs | 0, iys = ys | 0;\n\n                        if(xs > 0 && ys > 0 && ixs < (src_width - 1) && iys < (src_height - 1)) {\n                            a = Math.max(xs - ixs, 0.0);\n                            b = Math.max(ys - iys, 0.0);\n                            off = (src_width*iys + ixs)|0;\n\n                            p0 = src_d[off] +  a * (src_d[off+1] - src_d[off]);\n                            p1 = src_d[off+src_width] + a * (src_d[off+src_width+1] - src_d[off+src_width]);\n\n                            dst_d[dptr] = p0 + b * (p1 - p0);\n                        }\n                        else dst_d[dptr] = fill_value;\n                    }\n                }\n            },\n            // transform is 3x3 or 2x3 matrix_t only first 6 values referenced\n            warp_affine: function(src, dst, transform, fill_value) {\n                if (typeof fill_value === \"undefined\") { fill_value = 0; }\n                var src_width=src.cols, src_height=src.rows, dst_width=dst.cols, dst_height=dst.rows;\n                var src_d=src.data, dst_d=dst.data;\n                var x=0,y=0,off=0,ixs=0,iys=0,xs=0.0,ys=0.0,a=0.0,b=0.0,p0=0.0,p1=0.0;\n                var td=transform.data;\n                var m00=td[0],m01=td[1],m02=td[2],\n                    m10=td[3],m11=td[4],m12=td[5];\n\n                for(var dptr = 0; y < dst_height; ++y) {\n                    xs = m01 * y + m02;\n                    ys = m11 * y + m12;\n                    for(x = 0; x < dst_width; ++x, ++dptr, xs+=m00, ys+=m10) {\n                        ixs = xs | 0; iys = ys | 0;\n\n                        if(ixs >= 0 && iys >= 0 && ixs < (src_width - 1) && iys < (src_height - 1)) {\n                            a = xs - ixs;\n                            b = ys - iys;\n                            off = src_width*iys + ixs;\n\n                            p0 = src_d[off] +  a * (src_d[off+1] - src_d[off]);\n                            p1 = src_d[off+src_width] + a * (src_d[off+src_width+1] - src_d[off+src_width]);\n\n                            dst_d[dptr] = p0 + b * (p1 - p0);\n                        }\n                        else dst_d[dptr] = fill_value;\n                    }\n                }\n            },\n            \n            // Basic RGB Skin detection filter\n            // from http://popscan.blogspot.fr/2012/08/skin-detection-in-digital-images.html\n            skindetector: function(src,dst) {\n                var r,g,b,j;\n                var i = src.width*src.height;\n                while(i--){\n                    j = i*4;\n                    r = src.data[j];\n                    g = src.data[j+1];\n                    b = src.data[j+2];\n                    if((r>95)&&(g>40)&&(b>20)\n                     &&(r>g)&&(r>b)\n                     &&(r-Math.min(g,b)>15)\n                     &&(Math.abs(r-g)>15)){\n                         dst[i] = 255;\n                    } else {\n                        dst[i] = 0;\n                    }\n                }                \n            }\n        };\n    })();\n\n    global.imgproc = imgproc;\n\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * This is FAST corner detector, contributed to OpenCV by the author, Edward Rosten.\r\n */\r\n\r\n/*\r\nThe references are:\r\n * Machine learning for high-speed corner detection,\r\n   E. Rosten and T. Drummond, ECCV 2006\r\n * Faster and better: A machine learning approach to corner detection\r\n   E. Rosten, R. Porter and T. Drummond, PAMI, 2009  \r\n*/\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n    var fast_corners = (function() {\r\n\r\n        var offsets16 = new Int32Array([0, 3, 1, 3, 2, 2, 3, 1, 3, 0, 3, -1, 2, -2, 1, -3, 0, -3, -1, -3, -2, -2, -3, -1, -3, 0, -3, 1, -2, 2, -1, 3]);\r\n\r\n        var threshold_tab = new Uint8Array(512);\r\n        var pixel_off = new Int32Array(25);\r\n        var score_diff = new Int32Array(25);\r\n\r\n        // private functions\r\n        var _cmp_offsets = function(pixel, step, pattern_size) {\r\n            var k = 0;\r\n            var offsets = offsets16;\r\n            for( ; k < pattern_size; ++k ) {\r\n                pixel[k] = offsets[k<<1] + offsets[(k<<1)+1] * step;\r\n            }\r\n            for( ; k < 25; ++k ) {\r\n                pixel[k] = pixel[k - pattern_size];\r\n            }\r\n        },\r\n\r\n        _cmp_score_16 = function(src, off, pixel, d, threshold) {\r\n            var N = 25, k = 0, v = src[off];\r\n            var a0 = threshold,a=0,b0=0,b=0;\r\n\r\n            for( ; k < N; ++k ) {\r\n                d[k] = v - src[off+pixel[k]];\r\n            }\r\n\r\n            for( k = 0; k < 16; k += 2 ) {\r\n                a = Math.min(d[k+1], d[k+2]);\r\n                a = Math.min(a, d[k+3]);\r\n\r\n                if( a <= a0 ) continue;\r\n\r\n                a = Math.min(a, d[k+4]);\r\n                a = Math.min(a, d[k+5]);\r\n                a = Math.min(a, d[k+6]);\r\n                a = Math.min(a, d[k+7]);\r\n                a = Math.min(a, d[k+8]);\r\n                a0 = Math.max(a0, Math.min(a, d[k]));\r\n                a0 = Math.max(a0, Math.min(a, d[k+9]));\r\n            }\r\n\r\n            b0 = -a0;\r\n            for( k = 0; k < 16; k += 2 ) {\r\n                b = Math.max(d[k+1], d[k+2]);\r\n                b = Math.max(b, d[k+3]);\r\n                b = Math.max(b, d[k+4]);\r\n                b = Math.max(b, d[k+5]);\r\n\r\n                if( b >= b0 ) continue;\r\n                b = Math.max(b, d[k+6]);\r\n                b = Math.max(b, d[k+7]);\r\n                b = Math.max(b, d[k+8]);\r\n                b0 = Math.min(b0, Math.max(b, d[k]));\r\n                b0 = Math.min(b0, Math.max(b, d[k+9]));\r\n            }\r\n\r\n            return -b0-1;\r\n        };\r\n\r\n        var _threshold = 20;\r\n\r\n        return {\r\n            set_threshold: function(threshold) {\r\n                _threshold = Math.min(Math.max(threshold, 0), 255);\r\n                for (var i = -255; i <= 255; ++i) {\r\n                    threshold_tab[(i + 255)] = (i < -_threshold ? 1 : (i > _threshold ? 2 : 0));\r\n                }\r\n                return _threshold;\r\n            },\r\n            \r\n            detect: function(src, corners, border) {\r\n                if (typeof border === \"undefined\") { border = 3; }\r\n\r\n                var K = 8, N = 25;\r\n                var img = src.data, w = src.cols, h = src.rows;\r\n                var i=0, j=0, k=0, vt=0, x=0, m3=0;\r\n                var buf_node = jsfeat.cache.get_buffer(3 * w);\r\n                var cpbuf_node = jsfeat.cache.get_buffer(((w+1)*3)<<2);\r\n                var buf = buf_node.u8;\r\n                var cpbuf = cpbuf_node.i32;\r\n                var pixel = pixel_off;\r\n                var sd = score_diff;\r\n                var sy = Math.max(3, border);\r\n                var ey = Math.min((h-2), (h-border));\r\n                var sx = Math.max(3, border);\r\n                var ex = Math.min((w - 3), (w - border));\r\n                var _count = 0, corners_cnt = 0, pt;\r\n                var score_func = _cmp_score_16;\r\n                var thresh_tab = threshold_tab;\r\n                var threshold = _threshold;\r\n\r\n                var v=0,tab=0,d=0,ncorners=0,cornerpos=0,curr=0,ptr=0,prev=0,pprev=0;\r\n                var jp1=0,jm1=0,score=0;\r\n\r\n                _cmp_offsets(pixel, w, 16);\r\n\r\n                // local vars are faster?\r\n                var pixel0 = pixel[0];\r\n                var pixel1 = pixel[1];\r\n                var pixel2 = pixel[2];\r\n                var pixel3 = pixel[3];\r\n                var pixel4 = pixel[4];\r\n                var pixel5 = pixel[5];\r\n                var pixel6 = pixel[6];\r\n                var pixel7 = pixel[7];\r\n                var pixel8 = pixel[8];\r\n                var pixel9 = pixel[9];\r\n                var pixel10 = pixel[10];\r\n                var pixel11 = pixel[11];\r\n                var pixel12 = pixel[12];\r\n                var pixel13 = pixel[13];\r\n                var pixel14 = pixel[14];\r\n                var pixel15 = pixel[15];\r\n\r\n                for(i = 0; i < w*3; ++i) {\r\n                    buf[i] = 0;\r\n                }\r\n\r\n                for(i = sy; i < ey; ++i) {\r\n                    ptr = ((i * w) + sx)|0;\r\n                    m3 = (i - 3)%3;\r\n                    curr = (m3*w)|0;\r\n                    cornerpos = (m3*(w+1))|0;\r\n                    for (j = 0; j < w; ++j) buf[curr+j] = 0;\r\n                    ncorners = 0;\r\n                    \r\n                    if( i < (ey - 1) ) {\r\n                        j = sx;\r\n                        \r\n                        for( ; j < ex; ++j, ++ptr ) {\r\n                            v = img[ptr];\r\n                            tab = ( - v + 255 );\r\n                            d = ( thresh_tab[tab+img[ptr+pixel0]] | thresh_tab[tab+img[ptr+pixel8]] );\r\n                            \r\n                            if( d == 0 ) {\r\n                                continue;\r\n                            }\r\n                            \r\n                            d &= ( thresh_tab[tab+img[ptr+pixel2]] | thresh_tab[tab+img[ptr+pixel10]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel4]] | thresh_tab[tab+img[ptr+pixel12]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel6]] | thresh_tab[tab+img[ptr+pixel14]] );\r\n                            \r\n                            if( d == 0 ) {\r\n                                continue;\r\n                            }\r\n                            \r\n                            d &= ( thresh_tab[tab+img[ptr+pixel1]] | thresh_tab[tab+img[ptr+pixel9]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel3]] | thresh_tab[tab+img[ptr+pixel11]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel5]] | thresh_tab[tab+img[ptr+pixel13]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel7]] | thresh_tab[tab+img[ptr+pixel15]] );\r\n                            \r\n                            if( d & 1 ) {\r\n                                vt = (v - threshold);\r\n                                _count = 0;\r\n                                \r\n                                for( k = 0; k < N; ++k ) {\r\n                                    x = img[(ptr+pixel[k])];\r\n                                    if(x < vt) {\r\n                                        ++_count;\r\n                                        if( _count > K ) {\r\n                                            ++ncorners;\r\n                                            cpbuf[cornerpos+ncorners] = j;\r\n                                            buf[curr+j] = score_func(img, ptr, pixel, sd, threshold);\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        _count = 0;\r\n                                    }\r\n                                }\r\n                            }\r\n                            \r\n                            if( d & 2 ) {\r\n                                vt = (v + threshold);\r\n                                _count = 0;\r\n                                \r\n                                for( k = 0; k < N; ++k ) {\r\n                                    x = img[(ptr+pixel[k])];\r\n                                    if(x > vt) {\r\n                                        ++_count;\r\n                                        if( _count > K ) {\r\n                                            ++ncorners;\r\n                                            cpbuf[cornerpos+ncorners] = j;\r\n                                            buf[curr+j] = score_func(img, ptr, pixel, sd, threshold);\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        _count = 0;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    cpbuf[cornerpos+w] = ncorners;\r\n            \r\n                    if ( i == sy ) {\r\n                        continue;\r\n                    }\r\n                    \r\n                    m3 = (i - 4 + 3)%3;\r\n                    prev = (m3*w)|0;\r\n                    cornerpos = (m3*(w+1))|0;\r\n                    m3 = (i - 5 + 3)%3;\r\n                    pprev = (m3*w)|0;\r\n\r\n                    ncorners = cpbuf[cornerpos+w];\r\n                    \r\n                    for( k = 0; k < ncorners; ++k ) {\r\n                        j = cpbuf[cornerpos+k];\r\n                        jp1 = (j+1)|0;\r\n                        jm1 = (j-1)|0;\r\n                        score = buf[prev+j];\r\n                        if( (score > buf[prev+jp1] && score > buf[prev+jm1] &&\r\n                            score > buf[pprev+jm1] && score > buf[pprev+j] && score > buf[pprev+jp1] &&\r\n                            score > buf[curr+jm1] && score > buf[curr+j] && score > buf[curr+jp1]) ) {\r\n                            // save corner\r\n                            pt = corners[corners_cnt];\r\n                            pt.x = j, pt.y = (i-1), pt.score = score;\r\n                            corners_cnt++;\r\n                        }\r\n                    }\r\n                } // y loop\r\n                jsfeat.cache.put_buffer(buf_node);\r\n                jsfeat.cache.put_buffer(cpbuf_node);\r\n                return corners_cnt;\r\n            }\r\n        };\r\n    })();\r\n\r\n    global.fast_corners = fast_corners;\r\n    fast_corners.set_threshold(20); // set default\r\n\r\n})(jsfeat);\r\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n * Copyright 2007 Computer Vision Lab,\n * Ecole Polytechnique Federale de Lausanne (EPFL), Switzerland.\n * @author Vincent Lepetit (http://cvlab.epfl.ch/~lepetit)\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var yape06 = (function() {\n        \n        var compute_laplacian = function(src, dst, w, h, Dxx, Dyy, sx,sy, ex,ey) {\n            var y=0,x=0,yrow=(sy*w+sx)|0,row=yrow;\n\n            for(y = sy; y < ey; ++y, yrow+=w, row = yrow) {\n                for(x = sx; x < ex; ++x, ++row) {\n                    dst[row] = -4 * src[row] + src[row+Dxx] + src[row-Dxx] + src[row+Dyy] + src[row-Dyy];\n                }\n            }\n        }\n\n        var hessian_min_eigen_value = function(src, off, tr, Dxx, Dyy, Dxy, Dyx) {\n            var Ixx = -2 * src[off] + src[off + Dxx] + src[off - Dxx];\n            var Iyy = -2 * src[off] + src[off + Dyy] + src[off - Dyy];\n            var Ixy = src[off + Dxy] + src[off - Dxy] - src[off + Dyx] - src[off - Dyx];\n            var sqrt_delta = ( Math.sqrt(((Ixx - Iyy) * (Ixx - Iyy) + 4 * Ixy * Ixy) ) )|0;\n\n            return Math.min(Math.abs(tr - sqrt_delta), Math.abs(-(tr + sqrt_delta)));\n        }\n\n        return {\n\n            laplacian_threshold: 30,\n            min_eigen_value_threshold: 25,\n\n            detect: function(src, points, border) {\n                if (typeof border === \"undefined\") { border = 5; }\n                var x=0,y=0;\n                var w=src.cols, h=src.rows, srd_d=src.data;\n                var Dxx = 5, Dyy = (5 * w)|0;\n                var Dxy = (3 + 3 * w)|0, Dyx = (3 - 3 * w)|0;\n                var lap_buf = jsfeat.cache.get_buffer((w*h)<<2);\n                var laplacian = lap_buf.i32;\n                var lv=0, row=0,rowx=0,min_eigen_value=0,pt;\n                var number_of_points = 0;\n                var lap_thresh = this.laplacian_threshold;\n                var eigen_thresh = this.min_eigen_value_threshold;\n\n                var sx = Math.max(5, border)|0;\n                var sy = Math.max(3, border)|0;\n                var ex = Math.min(w-5, w-border)|0;\n                var ey = Math.min(h-3, h-border)|0;\n\n                x = w*h;\n                while(--x>=0) {laplacian[x]=0;}\n                compute_laplacian(srd_d, laplacian, w, h, Dxx, Dyy, sx,sy, ex,ey);\n\n                row = (sy*w+sx)|0;\n                for(y = sy; y < ey; ++y, row += w) {\n                    for(x = sx, rowx=row; x < ex; ++x, ++rowx) {\n\n                        lv = laplacian[rowx];\n                        if ((lv < -lap_thresh &&\n                            lv < laplacian[rowx - 1]      && lv < laplacian[rowx + 1] &&\n                            lv < laplacian[rowx - w]     && lv < laplacian[rowx + w] &&\n                            lv < laplacian[rowx - w - 1] && lv < laplacian[rowx + w - 1] &&\n                            lv < laplacian[rowx - w + 1] && lv < laplacian[rowx + w + 1])\n                            ||\n                            (lv > lap_thresh &&\n                            lv > laplacian[rowx - 1]      && lv > laplacian[rowx + 1] &&\n                            lv > laplacian[rowx - w]     && lv > laplacian[rowx + w] &&\n                            lv > laplacian[rowx - w - 1] && lv > laplacian[rowx + w - 1] &&\n                            lv > laplacian[rowx - w + 1] && lv > laplacian[rowx + w + 1])\n                            ) {\n\n                            min_eigen_value = hessian_min_eigen_value(srd_d, rowx, lv, Dxx, Dyy, Dxy, Dyx);\n                            if (min_eigen_value > eigen_thresh) {\n                                pt = points[number_of_points];\n                                pt.x = x, pt.y = y, pt.score = min_eigen_value;\n                                ++number_of_points;\n                                ++x, ++rowx; // skip next pixel since this is maxima in 3x3\n                            }\n                        }\n                    }\n                }\n\n                jsfeat.cache.put_buffer(lap_buf);\n\n                return number_of_points;\n            }\n\n        };\n    })();\n\n    global.yape06 = yape06;\n\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * Copyright 2007 Computer Vision Lab,\r\n * Ecole Polytechnique Federale de Lausanne (EPFL), Switzerland.\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    var yape = (function() {\r\n\r\n        var precompute_directions = function(step, dirs, R) {\r\n            var i = 0;\r\n            var x, y;\r\n\r\n            x = R;\r\n            for(y = 0; y < x; y++, i++)\r\n            {\r\n                x = (Math.sqrt((R * R - y * y)) + 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(x-- ; x < y && x >= 0; x--, i++)\r\n            {\r\n                y = (Math.sqrt((R * R - x * x)) + 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for( ; -x < y; x--, i++)\r\n            {\r\n                y = (Math.sqrt((R * R - x * x)) + 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(y-- ; y >= 0; y--, i++)\r\n            {\r\n                x = (-Math.sqrt((R * R - y * y)) - 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(; y > x; y--, i++)\r\n            {\r\n                x = (-Math.sqrt((R * R - y * y)) - 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(x++ ; x <= 0; x++, i++)\r\n            {\r\n                y = (-Math.sqrt((R * R - x * x)) - 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for( ; x < -y; x++, i++)\r\n            {\r\n                y = (-Math.sqrt((R * R - x * x)) - 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(y++ ; y < 0; y++, i++)\r\n            {\r\n                x = (Math.sqrt((R * R - y * y)) + 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n\r\n            dirs[i] = dirs[0];\r\n            dirs[i + 1] = dirs[1];\r\n            return i;\r\n        }\r\n\r\n        var third_check = function (Sb, off, step) {\r\n            var n = 0;\r\n            if(Sb[off+1]   != 0) n++;\r\n            if(Sb[off-1]   != 0) n++;\r\n            if(Sb[off+step]   != 0) n++;\r\n            if(Sb[off+step+1] != 0) n++;\r\n            if(Sb[off+step-1] != 0) n++;\r\n            if(Sb[off-step]   != 0) n++;\r\n            if(Sb[off-step+1] != 0) n++;\r\n            if(Sb[off-step-1] != 0) n++;\r\n\r\n            return n;\r\n        }\r\n\r\n        var is_local_maxima = function(p, off, v, step, neighborhood) {\r\n            var x, y;\r\n\r\n            if (v > 0) {\r\n                off -= step*neighborhood;\r\n                for (y= -neighborhood; y<=neighborhood; ++y) {\r\n                    for (x= -neighborhood; x<=neighborhood; ++x) {\r\n                        if (p[off+x] > v) return false;\r\n                    }\r\n                    off += step;\r\n                }\r\n            } else {\r\n                off -= step*neighborhood;\r\n                for (y= -neighborhood; y<=neighborhood; ++y) {\r\n                    for (x= -neighborhood; x<=neighborhood; ++x) {\r\n                        if (p[off+x] < v) return false;\r\n                    }\r\n                    off += step;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        var perform_one_point = function(I, x, Scores, Im, Ip, dirs, opposite, dirs_nb) {\r\n          var score = 0;\r\n          var a = 0, b = (opposite - 1)|0;\r\n          var A=0, B0=0, B1=0, B2=0;\r\n          var state=0;\r\n\r\n          // WE KNOW THAT NOT(A ~ I0 & B1 ~ I0):\r\n          A = I[x+dirs[a]];\r\n          if ((A <= Ip)) {\r\n            if ((A >= Im)) { // A ~ I0\r\n              B0 = I[x+dirs[b]];\r\n              if ((B0 <= Ip)) {\r\n                if ((B0 >= Im)) { Scores[x] = 0; return; }\r\n                else {\r\n                  b++; B1 = I[x+dirs[b]];\r\n                  if ((B1 > Ip)) {\r\n                    b++; B2 = I[x+dirs[b]];\r\n                    if ((B2 > Ip)) state = 3;\r\n                    else if ((B2 < Im)) state = 6;\r\n                    else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n                  }\r\n                  else/* if ((B1 < Im))*/ {\r\n                    b++; B2 = I[x+dirs[b]];\r\n                    if ((B2 > Ip)) state = 7;\r\n                    else if ((B2 < Im)) state = 2;\r\n                    else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n                  }\r\n                  //else { Scores[x] = 0; return; } // A ~ I0, B1 ~ I0\r\n                }\r\n              }\r\n              else { // B0 < I0\r\n                b++; B1 = I[x+dirs[b]];\r\n                if ((B1 > Ip)) {\r\n                  b++; B2 = I[x+dirs[b]];\r\n                  if ((B2 > Ip)) state = 3;\r\n                  else if ((B2 < Im)) state = 6;\r\n                  else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n                }\r\n                else if ((B1 < Im)) {\r\n                  b++; B2 = I[x+dirs[b]];\r\n                  if ((B2 > Ip)) state = 7;\r\n                  else if ((B2 < Im)) state = 2;\r\n                  else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n                }\r\n                else { Scores[x] = 0; return; } // A ~ I0, B1 ~ I0\r\n              }\r\n            }\r\n            else { // A > I0\r\n              B0 = I[x+dirs[b]];\r\n              if ((B0 > Ip)) { Scores[x] = 0; return; }\r\n                b++; B1 = I[x+dirs[b]];\r\n              if ((B1 > Ip)) { Scores[x] = 0; return; }\r\n                b++; B2 = I[x+dirs[b]];\r\n              if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                state = 1;\r\n            }\r\n          }\r\n          else // A < I0\r\n          {\r\n            B0 = I[x+dirs[b]];\r\n            if ((B0 < Im)) { Scores[x] = 0; return; }\r\n              b++; B1 = I[x+dirs[b]];\r\n            if ((B1 < Im)) { Scores[x] = 0; return; }\r\n              b++; B2 = I[x+dirs[b]];\r\n            if ((B2 < Im)) { Scores[x] = 0; return; }\r\n              state = 0;\r\n          }\r\n\r\n          for(a = 1; a <= opposite; a++)\r\n          {\r\n            A = I[x+dirs[a]];\r\n\r\n            switch(state)\r\n            {\r\n            case 0:\r\n              if ((A > Ip)) {\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 0; break; };\r\n              }\r\n              if ((A < Im)) {\r\n                if ((B1 > Ip)) { Scores[x] = 0; return; }\r\n                  if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                    B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 8; break; };\r\n              } \r\n              // A ~ I0\r\n              if ((B1 <= Ip)) { Scores[x] = 0; return; }\r\n                if ((B2 <= Ip)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              if ((B2 > Ip)) { score -= A + B1; state = 3; break; };\r\n              if ((B2 < Im)) { score -= A + B1; state = 6; break; };\r\n              { Scores[x] = 0; return; }\r\n\r\n            case 1:\r\n              if ((A < Im)) {\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 1; break; };\r\n              }\r\n              if ((A > Ip)) {\r\n                if ((B1 < Im)) { Scores[x] = 0; return; }\r\n                  if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                    B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 9; break; };\r\n              }\r\n              // A ~ I0\r\n              if ((B1 >= Im)) { Scores[x] = 0; return; }\r\n                if ((B2 >= Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              if ((B2 < Im)) { score -= A + B1; state = 2; break; };\r\n              if ((B2 > Ip)) { score -= A + B1; state = 7; break; };\r\n              { Scores[x] = 0; return; }\r\n\r\n            case 2:\r\n              if ((A > Ip)) { Scores[x] = 0; return; }\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              if ((A < Im))\r\n              {\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 4; break; };\r\n              } \r\n              // A ~ I0\r\n              if ((B2 > Ip)) { score -= A + B1; state = 7; break; };\r\n              if ((B2 < Im)) { score -= A + B1; state = 2; break; };\r\n              { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n\r\n            case 3:\r\n              if ((A < Im)) { Scores[x] = 0; return; }\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              if ((A > Ip)) {\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 5; break; };\r\n              }\r\n              // A ~ I0\r\n              if ((B2 > Ip)) { score -= A + B1; state = 3; break; };\r\n              if ((B2 < Im)) { score -= A + B1; state = 6; break; };\r\n              { Scores[x] = 0; return; }\r\n\r\n            case 4:\r\n              if ((A > Ip)) { Scores[x] = 0; return; }\r\n                if ((A < Im)) {\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                  if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                    { score -= A + B1; state = 1; break; };\r\n                }\r\n                if ((B2 >= Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { score -= A + B1; state = 2; break; };\r\n                if ((B2 > Ip)) { score -= A + B1; state = 7; break; };\r\n                { Scores[x] = 0; return; }\r\n\r\n            case 5:\r\n              if ((A < Im)) { Scores[x] = 0; return; }\r\n                if ((A > Ip)) {\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                  if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                    { score -= A + B1; state = 0; break; };\r\n                }\r\n                // A ~ I0\r\n                if ((B2 <= Ip)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { score -= A + B1; state = 3; break; };\r\n                if ((B2 < Im)) { score -= A + B1; state = 6; break; };\r\n                { Scores[x] = 0; return; }\r\n\r\n            case 7:\r\n              if ((A > Ip)) { Scores[x] = 0; return; }\r\n                if ((A < Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              // A ~ I0\r\n              if ((B2 > Ip)) { score -= A + B1; state = 3; break; };\r\n              if ((B2 < Im)) { score -= A + B1; state = 6; break; };\r\n              { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n\r\n            case 6:\r\n              if ((A > Ip)) { Scores[x] = 0; return; }\r\n                if ((A < Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              // A ~ I0\r\n              if ((B2 < Im)) { score -= A + B1; state = 2; break; };\r\n              if ((B2 > Ip)) { score -= A + B1; state = 7; break; };\r\n              { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n\r\n            case 8:\r\n              if ((A > Ip)) {\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 9; break; };\r\n              }\r\n              if ((A < Im)) {\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 1; break; };\r\n              }\r\n              { Scores[x] = 0; return; }\r\n\r\n            case 9:\r\n              if ((A < Im)) {\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 8; break; };\r\n              }\r\n              if ((A > Ip)) {\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 0; break; };\r\n              }\r\n              { Scores[x] = 0; return; }\r\n\r\n            default:\r\n              //\"PB default\";\r\n              break;\r\n            } // switch(state)\r\n          } // for(a...)\r\n\r\n          Scores[x] = (score + dirs_nb * I[x]);\r\n        }\r\n\r\n        var lev_table_t = (function () {\r\n            function lev_table_t(w, h, r) {\r\n                this.dirs = new Int32Array(1024);\r\n                this.dirs_count = precompute_directions(w, this.dirs, r)|0;\r\n                this.scores = new Int32Array(w*h);\r\n                this.radius = r|0;\r\n            }\r\n            return lev_table_t;\r\n        })();\r\n        \r\n        return {\r\n\r\n            level_tables: [],\r\n            tau: 7,\r\n\r\n            init: function(width, height, radius, pyramid_levels) {\r\n                if (typeof pyramid_levels === \"undefined\") { pyramid_levels = 1; }\r\n                var i;\r\n                radius = Math.min(radius, 7);\r\n                radius = Math.max(radius, 3);\r\n                for(i = 0; i < pyramid_levels; ++i) {\r\n                    this.level_tables[i] = new lev_table_t(width>>i, height>>i, radius);\r\n                }\r\n            },\r\n\r\n            detect: function(src, points, border) {\r\n                if (typeof border === \"undefined\") { border = 4; }\r\n                var t = this.level_tables[0];\r\n                var R = t.radius|0, Rm1 = (R-1)|0;\r\n                var dirs = t.dirs;\r\n                var dirs_count = t.dirs_count|0;\r\n                var opposite = dirs_count >> 1;\r\n                var img = src.data, w=src.cols|0, h=src.rows|0,hw=w>>1;\r\n                var scores = t.scores;\r\n                var x=0,y=0,row=0,rowx=0,ip=0,im=0,abs_score=0, score=0;\r\n                var tau = this.tau|0;\r\n                var number_of_points = 0, pt;\r\n\r\n                var sx = Math.max(R+1, border)|0;\r\n                var sy = Math.max(R+1, border)|0;\r\n                var ex = Math.min(w-R-2, w-border)|0;\r\n                var ey = Math.min(h-R-2, h-border)|0;\r\n\r\n                row = (sy*w+sx)|0;\r\n                for(y = sy; y < ey; ++y, row+=w) {\r\n                    for(x = sx, rowx = row; x < ex; ++x, ++rowx) {\r\n                        ip = img[rowx] + tau, im = img[rowx] - tau;\r\n\r\n                        if (im<img[rowx+R] && img[rowx+R]<ip && im<img[rowx-R] && img[rowx-R]<ip) {\r\n                            scores[rowx] = 0;\r\n                        } else {\r\n                            perform_one_point(img, rowx, scores, im, ip, dirs, opposite, dirs_count);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // local maxima\r\n                row = (sy*w+sx)|0;\r\n                for(y = sy; y < ey; ++y, row+=w) {\r\n                    for(x = sx, rowx = row; x < ex; ++x, ++rowx) {\r\n                        score = scores[rowx];\r\n                        abs_score = Math.abs(score);\r\n                        if(abs_score < 5) {\r\n                            // if this pixel is 0, the next one will not be good enough. Skip it.\r\n                            ++x, ++rowx;\r\n                        } else {\r\n                            if(third_check(scores, rowx, w) >= 3 && is_local_maxima(scores, rowx, score, hw, R)) {\r\n                                pt = points[number_of_points];\r\n                                pt.x = x, pt.y = y, pt.score = abs_score;\r\n                                ++number_of_points;\r\n\r\n                                x += Rm1, rowx += Rm1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return number_of_points;\r\n            }\r\n        };\r\n\r\n    })();\r\n\r\n    global.yape = yape;\r\n\r\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n * Original implementation derived from OpenCV,\n * @authors Ethan Rublee, Vincent Rabaud, Gary Bradski\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var orb = (function() {\n\n    \tvar bit_pattern_31_ = new Int32Array([\n\t\t    8,-3, 9,5/*mean (0), correlation (0)*/,\n\t\t    4,2, 7,-12/*mean (1.12461e-05), correlation (0.0437584)*/,\n\t\t    -11,9, -8,2/*mean (3.37382e-05), correlation (0.0617409)*/,\n\t\t    7,-12, 12,-13/*mean (5.62303e-05), correlation (0.0636977)*/,\n\t\t    2,-13, 2,12/*mean (0.000134953), correlation (0.085099)*/,\n\t\t    1,-7, 1,6/*mean (0.000528565), correlation (0.0857175)*/,\n\t\t    -2,-10, -2,-4/*mean (0.0188821), correlation (0.0985774)*/,\n\t\t    -13,-13, -11,-8/*mean (0.0363135), correlation (0.0899616)*/,\n\t\t    -13,-3, -12,-9/*mean (0.121806), correlation (0.099849)*/,\n\t\t    10,4, 11,9/*mean (0.122065), correlation (0.093285)*/,\n\t\t    -13,-8, -8,-9/*mean (0.162787), correlation (0.0942748)*/,\n\t\t    -11,7, -9,12/*mean (0.21561), correlation (0.0974438)*/,\n\t\t    7,7, 12,6/*mean (0.160583), correlation (0.130064)*/,\n\t\t    -4,-5, -3,0/*mean (0.228171), correlation (0.132998)*/,\n\t\t    -13,2, -12,-3/*mean (0.00997526), correlation (0.145926)*/,\n\t\t    -9,0, -7,5/*mean (0.198234), correlation (0.143636)*/,\n\t\t    12,-6, 12,-1/*mean (0.0676226), correlation (0.16689)*/,\n\t\t    -3,6, -2,12/*mean (0.166847), correlation (0.171682)*/,\n\t\t    -6,-13, -4,-8/*mean (0.101215), correlation (0.179716)*/,\n\t\t    11,-13, 12,-8/*mean (0.200641), correlation (0.192279)*/,\n\t\t    4,7, 5,1/*mean (0.205106), correlation (0.186848)*/,\n\t\t    5,-3, 10,-3/*mean (0.234908), correlation (0.192319)*/,\n\t\t    3,-7, 6,12/*mean (0.0709964), correlation (0.210872)*/,\n\t\t    -8,-7, -6,-2/*mean (0.0939834), correlation (0.212589)*/,\n\t\t    -2,11, -1,-10/*mean (0.127778), correlation (0.20866)*/,\n\t\t    -13,12, -8,10/*mean (0.14783), correlation (0.206356)*/,\n\t\t    -7,3, -5,-3/*mean (0.182141), correlation (0.198942)*/,\n\t\t    -4,2, -3,7/*mean (0.188237), correlation (0.21384)*/,\n\t\t    -10,-12, -6,11/*mean (0.14865), correlation (0.23571)*/,\n\t\t    5,-12, 6,-7/*mean (0.222312), correlation (0.23324)*/,\n\t\t    5,-6, 7,-1/*mean (0.229082), correlation (0.23389)*/,\n\t\t    1,0, 4,-5/*mean (0.241577), correlation (0.215286)*/,\n\t\t    9,11, 11,-13/*mean (0.00338507), correlation (0.251373)*/,\n\t\t    4,7, 4,12/*mean (0.131005), correlation (0.257622)*/,\n\t\t    2,-1, 4,4/*mean (0.152755), correlation (0.255205)*/,\n\t\t    -4,-12, -2,7/*mean (0.182771), correlation (0.244867)*/,\n\t\t    -8,-5, -7,-10/*mean (0.186898), correlation (0.23901)*/,\n\t\t    4,11, 9,12/*mean (0.226226), correlation (0.258255)*/,\n\t\t    0,-8, 1,-13/*mean (0.0897886), correlation (0.274827)*/,\n\t\t    -13,-2, -8,2/*mean (0.148774), correlation (0.28065)*/,\n\t\t    -3,-2, -2,3/*mean (0.153048), correlation (0.283063)*/,\n\t\t    -6,9, -4,-9/*mean (0.169523), correlation (0.278248)*/,\n\t\t    8,12, 10,7/*mean (0.225337), correlation (0.282851)*/,\n\t\t    0,9, 1,3/*mean (0.226687), correlation (0.278734)*/,\n\t\t    7,-5, 11,-10/*mean (0.00693882), correlation (0.305161)*/,\n\t\t    -13,-6, -11,0/*mean (0.0227283), correlation (0.300181)*/,\n\t\t    10,7, 12,1/*mean (0.125517), correlation (0.31089)*/,\n\t\t    -6,-3, -6,12/*mean (0.131748), correlation (0.312779)*/,\n\t\t    10,-9, 12,-4/*mean (0.144827), correlation (0.292797)*/,\n\t\t    -13,8, -8,-12/*mean (0.149202), correlation (0.308918)*/,\n\t\t    -13,0, -8,-4/*mean (0.160909), correlation (0.310013)*/,\n\t\t    3,3, 7,8/*mean (0.177755), correlation (0.309394)*/,\n\t\t    5,7, 10,-7/*mean (0.212337), correlation (0.310315)*/,\n\t\t    -1,7, 1,-12/*mean (0.214429), correlation (0.311933)*/,\n\t\t    3,-10, 5,6/*mean (0.235807), correlation (0.313104)*/,\n\t\t    2,-4, 3,-10/*mean (0.00494827), correlation (0.344948)*/,\n\t\t    -13,0, -13,5/*mean (0.0549145), correlation (0.344675)*/,\n\t\t    -13,-7, -12,12/*mean (0.103385), correlation (0.342715)*/,\n\t\t    -13,3, -11,8/*mean (0.134222), correlation (0.322922)*/,\n\t\t    -7,12, -4,7/*mean (0.153284), correlation (0.337061)*/,\n\t\t    6,-10, 12,8/*mean (0.154881), correlation (0.329257)*/,\n\t\t    -9,-1, -7,-6/*mean (0.200967), correlation (0.33312)*/,\n\t\t    -2,-5, 0,12/*mean (0.201518), correlation (0.340635)*/,\n\t\t    -12,5, -7,5/*mean (0.207805), correlation (0.335631)*/,\n\t\t    3,-10, 8,-13/*mean (0.224438), correlation (0.34504)*/,\n\t\t    -7,-7, -4,5/*mean (0.239361), correlation (0.338053)*/,\n\t\t    -3,-2, -1,-7/*mean (0.240744), correlation (0.344322)*/,\n\t\t    2,9, 5,-11/*mean (0.242949), correlation (0.34145)*/,\n\t\t    -11,-13, -5,-13/*mean (0.244028), correlation (0.336861)*/,\n\t\t    -1,6, 0,-1/*mean (0.247571), correlation (0.343684)*/,\n\t\t    5,-3, 5,2/*mean (0.000697256), correlation (0.357265)*/,\n\t\t    -4,-13, -4,12/*mean (0.00213675), correlation (0.373827)*/,\n\t\t    -9,-6, -9,6/*mean (0.0126856), correlation (0.373938)*/,\n\t\t    -12,-10, -8,-4/*mean (0.0152497), correlation (0.364237)*/,\n\t\t    10,2, 12,-3/*mean (0.0299933), correlation (0.345292)*/,\n\t\t    7,12, 12,12/*mean (0.0307242), correlation (0.366299)*/,\n\t\t    -7,-13, -6,5/*mean (0.0534975), correlation (0.368357)*/,\n\t\t    -4,9, -3,4/*mean (0.099865), correlation (0.372276)*/,\n\t\t    7,-1, 12,2/*mean (0.117083), correlation (0.364529)*/,\n\t\t    -7,6, -5,1/*mean (0.126125), correlation (0.369606)*/,\n\t\t    -13,11, -12,5/*mean (0.130364), correlation (0.358502)*/,\n\t\t    -3,7, -2,-6/*mean (0.131691), correlation (0.375531)*/,\n\t\t    7,-8, 12,-7/*mean (0.160166), correlation (0.379508)*/,\n\t\t    -13,-7, -11,-12/*mean (0.167848), correlation (0.353343)*/,\n\t\t    1,-3, 12,12/*mean (0.183378), correlation (0.371916)*/,\n\t\t    2,-6, 3,0/*mean (0.228711), correlation (0.371761)*/,\n\t\t    -4,3, -2,-13/*mean (0.247211), correlation (0.364063)*/,\n\t\t    -1,-13, 1,9/*mean (0.249325), correlation (0.378139)*/,\n\t\t    7,1, 8,-6/*mean (0.000652272), correlation (0.411682)*/,\n\t\t    1,-1, 3,12/*mean (0.00248538), correlation (0.392988)*/,\n\t\t    9,1, 12,6/*mean (0.0206815), correlation (0.386106)*/,\n\t\t    -1,-9, -1,3/*mean (0.0364485), correlation (0.410752)*/,\n\t\t    -13,-13, -10,5/*mean (0.0376068), correlation (0.398374)*/,\n\t\t    7,7, 10,12/*mean (0.0424202), correlation (0.405663)*/,\n\t\t    12,-5, 12,9/*mean (0.0942645), correlation (0.410422)*/,\n\t\t    6,3, 7,11/*mean (0.1074), correlation (0.413224)*/,\n\t\t    5,-13, 6,10/*mean (0.109256), correlation (0.408646)*/,\n\t\t    2,-12, 2,3/*mean (0.131691), correlation (0.416076)*/,\n\t\t    3,8, 4,-6/*mean (0.165081), correlation (0.417569)*/,\n\t\t    2,6, 12,-13/*mean (0.171874), correlation (0.408471)*/,\n\t\t    9,-12, 10,3/*mean (0.175146), correlation (0.41296)*/,\n\t\t    -8,4, -7,9/*mean (0.183682), correlation (0.402956)*/,\n\t\t    -11,12, -4,-6/*mean (0.184672), correlation (0.416125)*/,\n\t\t    1,12, 2,-8/*mean (0.191487), correlation (0.386696)*/,\n\t\t    6,-9, 7,-4/*mean (0.192668), correlation (0.394771)*/,\n\t\t    2,3, 3,-2/*mean (0.200157), correlation (0.408303)*/,\n\t\t    6,3, 11,0/*mean (0.204588), correlation (0.411762)*/,\n\t\t    3,-3, 8,-8/*mean (0.205904), correlation (0.416294)*/,\n\t\t    7,8, 9,3/*mean (0.213237), correlation (0.409306)*/,\n\t\t    -11,-5, -6,-4/*mean (0.243444), correlation (0.395069)*/,\n\t\t    -10,11, -5,10/*mean (0.247672), correlation (0.413392)*/,\n\t\t    -5,-8, -3,12/*mean (0.24774), correlation (0.411416)*/,\n\t\t    -10,5, -9,0/*mean (0.00213675), correlation (0.454003)*/,\n\t\t    8,-1, 12,-6/*mean (0.0293635), correlation (0.455368)*/,\n\t\t    4,-6, 6,-11/*mean (0.0404971), correlation (0.457393)*/,\n\t\t    -10,12, -8,7/*mean (0.0481107), correlation (0.448364)*/,\n\t\t    4,-2, 6,7/*mean (0.050641), correlation (0.455019)*/,\n\t\t    -2,0, -2,12/*mean (0.0525978), correlation (0.44338)*/,\n\t\t    -5,-8, -5,2/*mean (0.0629667), correlation (0.457096)*/,\n\t\t    7,-6, 10,12/*mean (0.0653846), correlation (0.445623)*/,\n\t\t    -9,-13, -8,-8/*mean (0.0858749), correlation (0.449789)*/,\n\t\t    -5,-13, -5,-2/*mean (0.122402), correlation (0.450201)*/,\n\t\t    8,-8, 9,-13/*mean (0.125416), correlation (0.453224)*/,\n\t\t    -9,-11, -9,0/*mean (0.130128), correlation (0.458724)*/,\n\t\t    1,-8, 1,-2/*mean (0.132467), correlation (0.440133)*/,\n\t\t    7,-4, 9,1/*mean (0.132692), correlation (0.454)*/,\n\t\t    -2,1, -1,-4/*mean (0.135695), correlation (0.455739)*/,\n\t\t    11,-6, 12,-11/*mean (0.142904), correlation (0.446114)*/,\n\t\t    -12,-9, -6,4/*mean (0.146165), correlation (0.451473)*/,\n\t\t    3,7, 7,12/*mean (0.147627), correlation (0.456643)*/,\n\t\t    5,5, 10,8/*mean (0.152901), correlation (0.455036)*/,\n\t\t    0,-4, 2,8/*mean (0.167083), correlation (0.459315)*/,\n\t\t    -9,12, -5,-13/*mean (0.173234), correlation (0.454706)*/,\n\t\t    0,7, 2,12/*mean (0.18312), correlation (0.433855)*/,\n\t\t    -1,2, 1,7/*mean (0.185504), correlation (0.443838)*/,\n\t\t    5,11, 7,-9/*mean (0.185706), correlation (0.451123)*/,\n\t\t    3,5, 6,-8/*mean (0.188968), correlation (0.455808)*/,\n\t\t    -13,-4, -8,9/*mean (0.191667), correlation (0.459128)*/,\n\t\t    -5,9, -3,-3/*mean (0.193196), correlation (0.458364)*/,\n\t\t    -4,-7, -3,-12/*mean (0.196536), correlation (0.455782)*/,\n\t\t    6,5, 8,0/*mean (0.1972), correlation (0.450481)*/,\n\t\t    -7,6, -6,12/*mean (0.199438), correlation (0.458156)*/,\n\t\t    -13,6, -5,-2/*mean (0.211224), correlation (0.449548)*/,\n\t\t    1,-10, 3,10/*mean (0.211718), correlation (0.440606)*/,\n\t\t    4,1, 8,-4/*mean (0.213034), correlation (0.443177)*/,\n\t\t    -2,-2, 2,-13/*mean (0.234334), correlation (0.455304)*/,\n\t\t    2,-12, 12,12/*mean (0.235684), correlation (0.443436)*/,\n\t\t    -2,-13, 0,-6/*mean (0.237674), correlation (0.452525)*/,\n\t\t    4,1, 9,3/*mean (0.23962), correlation (0.444824)*/,\n\t\t    -6,-10, -3,-5/*mean (0.248459), correlation (0.439621)*/,\n\t\t    -3,-13, -1,1/*mean (0.249505), correlation (0.456666)*/,\n\t\t    7,5, 12,-11/*mean (0.00119208), correlation (0.495466)*/,\n\t\t    4,-2, 5,-7/*mean (0.00372245), correlation (0.484214)*/,\n\t\t    -13,9, -9,-5/*mean (0.00741116), correlation (0.499854)*/,\n\t\t    7,1, 8,6/*mean (0.0208952), correlation (0.499773)*/,\n\t\t    7,-8, 7,6/*mean (0.0220085), correlation (0.501609)*/,\n\t\t    -7,-4, -7,1/*mean (0.0233806), correlation (0.496568)*/,\n\t\t    -8,11, -7,-8/*mean (0.0236505), correlation (0.489719)*/,\n\t\t    -13,6, -12,-8/*mean (0.0268781), correlation (0.503487)*/,\n\t\t    2,4, 3,9/*mean (0.0323324), correlation (0.501938)*/,\n\t\t    10,-5, 12,3/*mean (0.0399235), correlation (0.494029)*/,\n\t\t    -6,-5, -6,7/*mean (0.0420153), correlation (0.486579)*/,\n\t\t    8,-3, 9,-8/*mean (0.0548021), correlation (0.484237)*/,\n\t\t    2,-12, 2,8/*mean (0.0616622), correlation (0.496642)*/,\n\t\t    -11,-2, -10,3/*mean (0.0627755), correlation (0.498563)*/,\n\t\t    -12,-13, -7,-9/*mean (0.0829622), correlation (0.495491)*/,\n\t\t    -11,0, -10,-5/*mean (0.0843342), correlation (0.487146)*/,\n\t\t    5,-3, 11,8/*mean (0.0929937), correlation (0.502315)*/,\n\t\t    -2,-13, -1,12/*mean (0.113327), correlation (0.48941)*/,\n\t\t    -1,-8, 0,9/*mean (0.132119), correlation (0.467268)*/,\n\t\t    -13,-11, -12,-5/*mean (0.136269), correlation (0.498771)*/,\n\t\t    -10,-2, -10,11/*mean (0.142173), correlation (0.498714)*/,\n\t\t    -3,9, -2,-13/*mean (0.144141), correlation (0.491973)*/,\n\t\t    2,-3, 3,2/*mean (0.14892), correlation (0.500782)*/,\n\t\t    -9,-13, -4,0/*mean (0.150371), correlation (0.498211)*/,\n\t\t    -4,6, -3,-10/*mean (0.152159), correlation (0.495547)*/,\n\t\t    -4,12, -2,-7/*mean (0.156152), correlation (0.496925)*/,\n\t\t    -6,-11, -4,9/*mean (0.15749), correlation (0.499222)*/,\n\t\t    6,-3, 6,11/*mean (0.159211), correlation (0.503821)*/,\n\t\t    -13,11, -5,5/*mean (0.162427), correlation (0.501907)*/,\n\t\t    11,11, 12,6/*mean (0.16652), correlation (0.497632)*/,\n\t\t    7,-5, 12,-2/*mean (0.169141), correlation (0.484474)*/,\n\t\t    -1,12, 0,7/*mean (0.169456), correlation (0.495339)*/,\n\t\t    -4,-8, -3,-2/*mean (0.171457), correlation (0.487251)*/,\n\t\t    -7,1, -6,7/*mean (0.175), correlation (0.500024)*/,\n\t\t    -13,-12, -8,-13/*mean (0.175866), correlation (0.497523)*/,\n\t\t    -7,-2, -6,-8/*mean (0.178273), correlation (0.501854)*/,\n\t\t    -8,5, -6,-9/*mean (0.181107), correlation (0.494888)*/,\n\t\t    -5,-1, -4,5/*mean (0.190227), correlation (0.482557)*/,\n\t\t    -13,7, -8,10/*mean (0.196739), correlation (0.496503)*/,\n\t\t    1,5, 5,-13/*mean (0.19973), correlation (0.499759)*/,\n\t\t    1,0, 10,-13/*mean (0.204465), correlation (0.49873)*/,\n\t\t    9,12, 10,-1/*mean (0.209334), correlation (0.49063)*/,\n\t\t    5,-8, 10,-9/*mean (0.211134), correlation (0.503011)*/,\n\t\t    -1,11, 1,-13/*mean (0.212), correlation (0.499414)*/,\n\t\t    -9,-3, -6,2/*mean (0.212168), correlation (0.480739)*/,\n\t\t    -1,-10, 1,12/*mean (0.212731), correlation (0.502523)*/,\n\t\t    -13,1, -8,-10/*mean (0.21327), correlation (0.489786)*/,\n\t\t    8,-11, 10,-6/*mean (0.214159), correlation (0.488246)*/,\n\t\t    2,-13, 3,-6/*mean (0.216993), correlation (0.50287)*/,\n\t\t    7,-13, 12,-9/*mean (0.223639), correlation (0.470502)*/,\n\t\t    -10,-10, -5,-7/*mean (0.224089), correlation (0.500852)*/,\n\t\t    -10,-8, -8,-13/*mean (0.228666), correlation (0.502629)*/,\n\t\t    4,-6, 8,5/*mean (0.22906), correlation (0.498305)*/,\n\t\t    3,12, 8,-13/*mean (0.233378), correlation (0.503825)*/,\n\t\t    -4,2, -3,-3/*mean (0.234323), correlation (0.476692)*/,\n\t\t    5,-13, 10,-12/*mean (0.236392), correlation (0.475462)*/,\n\t\t    4,-13, 5,-1/*mean (0.236842), correlation (0.504132)*/,\n\t\t    -9,9, -4,3/*mean (0.236977), correlation (0.497739)*/,\n\t\t    0,3, 3,-9/*mean (0.24314), correlation (0.499398)*/,\n\t\t    -12,1, -6,1/*mean (0.243297), correlation (0.489447)*/,\n\t\t    3,2, 4,-8/*mean (0.00155196), correlation (0.553496)*/,\n\t\t    -10,-10, -10,9/*mean (0.00239541), correlation (0.54297)*/,\n\t\t    8,-13, 12,12/*mean (0.0034413), correlation (0.544361)*/,\n\t\t    -8,-12, -6,-5/*mean (0.003565), correlation (0.551225)*/,\n\t\t    2,2, 3,7/*mean (0.00835583), correlation (0.55285)*/,\n\t\t    10,6, 11,-8/*mean (0.00885065), correlation (0.540913)*/,\n\t\t    6,8, 8,-12/*mean (0.0101552), correlation (0.551085)*/,\n\t\t    -7,10, -6,5/*mean (0.0102227), correlation (0.533635)*/,\n\t\t    -3,-9, -3,9/*mean (0.0110211), correlation (0.543121)*/,\n\t\t    -1,-13, -1,5/*mean (0.0113473), correlation (0.550173)*/,\n\t\t    -3,-7, -3,4/*mean (0.0140913), correlation (0.554774)*/,\n\t\t    -8,-2, -8,3/*mean (0.017049), correlation (0.55461)*/,\n\t\t    4,2, 12,12/*mean (0.01778), correlation (0.546921)*/,\n\t\t    2,-5, 3,11/*mean (0.0224022), correlation (0.549667)*/,\n\t\t    6,-9, 11,-13/*mean (0.029161), correlation (0.546295)*/,\n\t\t    3,-1, 7,12/*mean (0.0303081), correlation (0.548599)*/,\n\t\t    11,-1, 12,4/*mean (0.0355151), correlation (0.523943)*/,\n\t\t    -3,0, -3,6/*mean (0.0417904), correlation (0.543395)*/,\n\t\t    4,-11, 4,12/*mean (0.0487292), correlation (0.542818)*/,\n\t\t    2,-4, 2,1/*mean (0.0575124), correlation (0.554888)*/,\n\t\t    -10,-6, -8,1/*mean (0.0594242), correlation (0.544026)*/,\n\t\t    -13,7, -11,1/*mean (0.0597391), correlation (0.550524)*/,\n\t\t    -13,12, -11,-13/*mean (0.0608974), correlation (0.55383)*/,\n\t\t    6,0, 11,-13/*mean (0.065126), correlation (0.552006)*/,\n\t\t    0,-1, 1,4/*mean (0.074224), correlation (0.546372)*/,\n\t\t    -13,3, -9,-2/*mean (0.0808592), correlation (0.554875)*/,\n\t\t    -9,8, -6,-3/*mean (0.0883378), correlation (0.551178)*/,\n\t\t    -13,-6, -8,-2/*mean (0.0901035), correlation (0.548446)*/,\n\t\t    5,-9, 8,10/*mean (0.0949843), correlation (0.554694)*/,\n\t\t    2,7, 3,-9/*mean (0.0994152), correlation (0.550979)*/,\n\t\t    -1,-6, -1,-1/*mean (0.10045), correlation (0.552714)*/,\n\t\t    9,5, 11,-2/*mean (0.100686), correlation (0.552594)*/,\n\t\t    11,-3, 12,-8/*mean (0.101091), correlation (0.532394)*/,\n\t\t    3,0, 3,5/*mean (0.101147), correlation (0.525576)*/,\n\t\t    -1,4, 0,10/*mean (0.105263), correlation (0.531498)*/,\n\t\t    3,-6, 4,5/*mean (0.110785), correlation (0.540491)*/,\n\t\t    -13,0, -10,5/*mean (0.112798), correlation (0.536582)*/,\n\t\t    5,8, 12,11/*mean (0.114181), correlation (0.555793)*/,\n\t\t    8,9, 9,-6/*mean (0.117431), correlation (0.553763)*/,\n\t\t    7,-4, 8,-12/*mean (0.118522), correlation (0.553452)*/,\n\t\t    -10,4, -10,9/*mean (0.12094), correlation (0.554785)*/,\n\t\t    7,3, 12,4/*mean (0.122582), correlation (0.555825)*/,\n\t\t    9,-7, 10,-2/*mean (0.124978), correlation (0.549846)*/,\n\t\t    7,0, 12,-2/*mean (0.127002), correlation (0.537452)*/,\n\t\t    -1,-6, 0,-11/*mean (0.127148), correlation (0.547401)*/\n\t\t]);\n\n\t    var H = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n\t    var patch_img = new jsfeat.matrix_t(32, 32, jsfeat.U8_t|jsfeat.C1_t);\n\n\t    var rectify_patch = function(src, dst, angle, px, py, psize) {\n\t    \tvar cosine = Math.cos(angle);\n\t    \tvar sine   = Math.sin(angle);\n\n\t        H.data[0] = cosine, H.data[1] = -sine,    H.data[2] = (-cosine + sine  ) * psize*0.5 + px,\n\t        H.data[3] = sine,   H.data[4] =  cosine,  H.data[5] = (-sine   - cosine) * psize*0.5 + py;\n\n\t        jsfeat.imgproc.warp_affine(src, dst, H, 128);\n\t    }\n\n    \treturn {\n\n    \t\tdescribe: function(src, corners, count, descriptors) {\n    \t\t\tvar DESCR_SIZE = 32; // bytes;\n\t\t\t\tvar i=0,b=0,px=0.0,py=0.0,angle=0.0;\n\t\t\t\tvar t0=0, t1=0, val=0;\n\t\t\t\tvar img = src.data, w = src.cols, h = src.rows;\n\t\t\t\tvar patch_d = patch_img.data;\n\t\t\t\tvar patch_off = 16*32 + 16; // center of patch\n\t\t\t\tvar patt=0;\n\n\t\t\t\tif(!(descriptors.type&jsfeat.U8_t)) {\n\t\t\t\t\t// relocate to U8 type\n\t\t\t\t\tdescriptors.type = jsfeat.U8_t;\n\t\t\t\t\tdescriptors.cols = DESCR_SIZE;\n\t                descriptors.rows = count;\n\t                descriptors.channel = 1;\n\t\t\t\t\tdescriptors.allocate();\n\t\t\t\t} else {\n\t\t\t\t\tdescriptors.resize(DESCR_SIZE, count, 1);\n\t\t\t\t}\n\n\t\t\t\tvar descr_d = descriptors.data;\n\t\t\t\tvar descr_off = 0;\n\n\t\t\t\tfor(i = 0; i < count; ++i) {\n\t\t\t\t\tpx = corners[i].x;\n\t\t\t\t\tpy = corners[i].y;\n\t\t\t\t\tangle = corners[i].angle;\n\n\t\t\t\t\trectify_patch(src, patch_img, angle, px, py, 32);\n\n\t\t\t\t\t// describe the patch\n\t\t\t\t\tpatt = 0;\n\t\t\t\t\tfor (b = 0; b < DESCR_SIZE; ++b) {\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val = (t0 < t1)|0;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 1;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 2;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 3;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 4;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 5;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 6;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 7;\n\t\t\t            \n\t\t\t            descr_d[descr_off+b] = val;\n\t\t\t        }\n\t\t\t        descr_off += DESCR_SIZE;\n\t\t\t\t}\n    \t\t}\n    \t};\n    })();\n\n    global.orb = orb;\n\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n * this code is a rewrite from OpenCV's Lucas-Kanade optical flow implementation\n */\n\n(function(global) {\n    \"use strict\";\n    //\n    var optical_flow_lk = (function() {\n\n        // short link to shar deriv\n        var scharr_deriv = jsfeat.imgproc.scharr_derivatives;\n\n        return {\n            track: function(prev_pyr, curr_pyr, prev_xy, curr_xy, count, win_size, max_iter, status, eps, min_eigen_threshold) {\n                if (typeof max_iter === \"undefined\") { max_iter = 30; }\n                if (typeof status === \"undefined\") { status = new Uint8Array(count); }\n                if (typeof eps === \"undefined\") { eps = 0.01; }\n                if (typeof min_eigen_threshold === \"undefined\") { min_eigen_threshold = 0.0001; }\n\n                var half_win = (win_size-1)*0.5;\n                var win_area = (win_size*win_size)|0;\n                var win_area2 = win_area << 1;\n                var prev_imgs = prev_pyr.data, next_imgs = curr_pyr.data;\n                var img_prev=prev_imgs[0].data,img_next=next_imgs[0].data;\n                var w0 = prev_imgs[0].cols, h0 = prev_imgs[0].rows,lw=0,lh=0;\n\n                var iwin_node = jsfeat.cache.get_buffer(win_area<<2);\n                var deriv_iwin_node = jsfeat.cache.get_buffer(win_area2<<2);\n                var deriv_lev_node = jsfeat.cache.get_buffer((h0*(w0<<1))<<2);\n\n                var deriv_m = new jsfeat.matrix_t(w0, h0, jsfeat.S32C2_t, deriv_lev_node.data);\n\n                var iwin_buf = iwin_node.i32;\n                var deriv_iwin = deriv_iwin_node.i32;\n                var deriv_lev = deriv_lev_node.i32;\n\n                var dstep=0,src=0,dsrc=0,iptr=0,diptr=0,jptr=0;\n                var lev_sc=0.0,prev_x=0.0,prev_y=0.0,next_x=0.0,next_y=0.0;\n                var prev_delta_x=0.0,prev_delta_y=0.0,delta_x=0.0,delta_y=0.0;\n                var iprev_x=0,iprev_y=0,inext_x=0,inext_y=0;\n                var i=0,j=0,x=0,y=0,level=0,ptid=0,iter=0;\n                var brd_tl=0,brd_r=0,brd_b=0;\n                var a=0.0,b=0.0,b1=0.0,b2=0.0;\n\n                // fixed point math\n                var W_BITS14 = 14;\n                var W_BITS4 = 14;\n                var W_BITS1m5 = W_BITS4 - 5;\n                var W_BITS1m51 = (1 << ((W_BITS1m5) - 1));\n                var W_BITS14_ = (1 << W_BITS14);\n                var W_BITS41 = (1 << ((W_BITS4) - 1));\n                var FLT_SCALE = 1.0/(1 << 20);\n                var iw00=0,iw01=0,iw10=0,iw11=0,ival=0,ixval=0,iyval=0;\n                var A11=0.0,A12=0.0,A22=0.0,D=0.0,min_eig=0.0;\n\n                var FLT_EPSILON = 0.00000011920929;\n                eps *= eps;\n\n                // reset status\n                for(; i < count; ++i) {\n                    status[i] = 1;\n                }\n\n                var max_level = (prev_pyr.levels - 1)|0;\n                level = max_level;\n\n                for(; level >= 0; --level) {\n                    lev_sc = (1.0/(1 << level));\n                    lw = w0 >> level;\n                    lh = h0 >> level;\n                    dstep = lw << 1;\n                    img_prev = prev_imgs[level].data;\n                    img_next = next_imgs[level].data;\n                    \n                    brd_r = (lw - win_size)|0;\n                    brd_b = (lh - win_size)|0;\n\n                    // calculate level derivatives\n                    scharr_deriv(prev_imgs[level], deriv_m);\n\n                    // iterate through points\n                    for(ptid = 0; ptid < count; ++ptid) {\n                        i = ptid << 1;\n                        j = i + 1;\n                        prev_x = prev_xy[i]*lev_sc;\n                        prev_y = prev_xy[j]*lev_sc;\n\n                        if( level == max_level ) {\n                            next_x = prev_x;\n                            next_y = prev_y;\n                        } else {\n                            next_x = curr_xy[i]*2.0;\n                            next_y = curr_xy[j]*2.0;\n                        }\n                        curr_xy[i] = next_x;\n                        curr_xy[j] = next_y;\n\n                        prev_x -= half_win;\n                        prev_y -= half_win;\n                        iprev_x = prev_x|0;\n                        iprev_y = prev_y|0;\n\n                        // border check\n                        x = (iprev_x <= brd_tl)|(iprev_x >= brd_r)|(iprev_y <= brd_tl)|(iprev_y >= brd_b);\n                        if( x != 0 ) {\n                            if( level == 0 ) {\n                                status[ptid] = 0;\n                            }\n                            continue;\n                        }\n\n                        a = prev_x - iprev_x;\n                        b = prev_y - iprev_y;\n                        iw00 = (((1.0 - a)*(1.0 - b)*W_BITS14_) + 0.5)|0;\n                        iw01 = ((a*(1.0 - b)*W_BITS14_) + 0.5)|0;\n                        iw10 = (((1.0 - a)*b*W_BITS14_) + 0.5)|0;\n                        iw11 = (W_BITS14_ - iw00 - iw01 - iw10);\n\n                        A11 = 0.0, A12 = 0.0, A22 = 0.0;\n\n                        // extract the patch from the first image, compute covariation matrix of derivatives\n                        for( y = 0; y < win_size; ++y ) {\n                            src = ( (y + iprev_y)*lw + iprev_x )|0;\n                            dsrc = src << 1;\n\n                            iptr = (y*win_size)|0;\n                            diptr = iptr << 1;\n                            for(x = 0 ; x < win_size; ++x, ++src, ++iptr, dsrc += 2) {\n                                ival = ( (img_prev[src])*iw00 + (img_prev[src+1])*iw01 +\n                                        (img_prev[src+lw])*iw10 + (img_prev[src+lw+1])*iw11 );\n                                ival = (((ival) + W_BITS1m51) >> (W_BITS1m5));\n\n                                ixval = ( deriv_lev[dsrc]*iw00 + deriv_lev[dsrc+2]*iw01 +\n                                        deriv_lev[dsrc+dstep]*iw10 + deriv_lev[dsrc+dstep+2]*iw11 );\n                                ixval = (((ixval) + W_BITS41) >> (W_BITS4));\n\n                                iyval = ( deriv_lev[dsrc+1]*iw00 + deriv_lev[dsrc+3]*iw01 + deriv_lev[dsrc+dstep+1]*iw10 +\n                                        deriv_lev[dsrc+dstep+3]*iw11 );\n                                iyval = (((iyval) + W_BITS41) >> (W_BITS4));\n\n                                iwin_buf[iptr] = ival;\n                                deriv_iwin[diptr++] = ixval;\n                                deriv_iwin[diptr++] = iyval;\n\n                                A11 += ixval*ixval;\n                                A12 += ixval*iyval;\n                                A22 += iyval*iyval;\n                            }\n                        }\n\n                        A11 *= FLT_SCALE; A12 *= FLT_SCALE; A22 *= FLT_SCALE;\n\n                        D = A11*A22 - A12*A12;\n                        min_eig = (A22 + A11 - Math.sqrt((A11-A22)*(A11-A22) + 4.0*A12*A12)) / win_area2;\n\n                        if( min_eig < min_eigen_threshold || D < FLT_EPSILON )\n                        {\n                            if( level == 0 ) {\n                                status[ptid] = 0;\n                            }\n                            continue;\n                        }\n\n                        D = 1.0/D;\n\n                        next_x -= half_win;\n                        next_y -= half_win;\n                        prev_delta_x = 0.0;\n                        prev_delta_y = 0.0;\n\n                        for( iter = 0; iter < max_iter; ++iter ) {\n                            inext_x = next_x|0;\n                            inext_y = next_y|0;\n\n                            x = (inext_x <= brd_tl)|(inext_x >= brd_r)|(inext_y <= brd_tl)|(inext_y >= brd_b);\n                            if( x != 0 ) {\n                                if( level == 0 ) {\n                                    status[ptid] = 0;\n                                }\n                                break;\n                            }\n\n                            a = next_x - inext_x;\n                            b = next_y - inext_y;\n                            iw00 = (((1.0 - a)*(1.0 - b)*W_BITS14_) + 0.5)|0;\n                            iw01 = ((a*(1.0 - b)*W_BITS14_) + 0.5)|0;\n                            iw10 = (((1.0 - a)*b*W_BITS14_) + 0.5)|0;\n                            iw11 = (W_BITS14_ - iw00 - iw01 - iw10);\n                            b1 = 0.0, b2 = 0.0;\n\n                            for( y = 0; y < win_size; ++y ) {\n                                jptr = ( (y + inext_y)*lw + inext_x )|0;\n\n                                iptr = (y*win_size)|0;\n                                diptr = iptr << 1;\n                                for( x = 0 ; x < win_size; ++x, ++jptr, ++iptr ) {\n                                    ival = ( (img_next[jptr])*iw00 + (img_next[jptr+1])*iw01 +\n                                            (img_next[jptr+lw])*iw10 + (img_next[jptr+lw+1])*iw11 );\n                                    ival = (((ival) + W_BITS1m51) >> (W_BITS1m5));\n                                    ival = (ival - iwin_buf[iptr]);\n\n                                    b1 += ival * deriv_iwin[diptr++];\n                                    b2 += ival * deriv_iwin[diptr++];\n                                }\n                            }\n\n                            b1 *= FLT_SCALE;\n                            b2 *= FLT_SCALE;\n\n                            delta_x = ((A12*b2 - A22*b1) * D);\n                            delta_y = ((A12*b1 - A11*b2) * D);\n\n                            next_x += delta_x;\n                            next_y += delta_y;\n                            curr_xy[i] = next_x + half_win;\n                            curr_xy[j] = next_y + half_win;\n\n                            if( delta_x*delta_x + delta_y*delta_y <= eps ) {\n                                break;\n                            }\n\n                            if( iter > 0 && Math.abs(delta_x + prev_delta_x) < 0.01 &&\n                                            Math.abs(delta_y + prev_delta_y) < 0.01 ) {\n                                curr_xy[i] -= delta_x*0.5;\n                                curr_xy[j] -= delta_y*0.5;\n                                break;\n                            }\n\n                            prev_delta_x = delta_x;\n                            prev_delta_y = delta_y;\n                        }\n                    } // points loop\n                } // levels loop\n\n                jsfeat.cache.put_buffer(iwin_node);\n                jsfeat.cache.put_buffer(deriv_iwin_node);\n                jsfeat.cache.put_buffer(deriv_lev_node);\n            }\n        };\n    })();\n\n    global.optical_flow_lk = optical_flow_lk;\n\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * this code is a rewrite from https://github.com/mtschirs/js-objectdetect implementation\r\n * @author Martin Tschirsich / http://www.tu-darmstadt.de/~m_t\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n    var haar = (function() {\r\n\r\n        var _group_func = function(r1, r2) {\r\n            var distance = (r1.width * 0.25 + 0.5)|0;\r\n\r\n            return r2.x <= r1.x + distance &&\r\n                   r2.x >= r1.x - distance &&\r\n                   r2.y <= r1.y + distance &&\r\n                   r2.y >= r1.y - distance &&\r\n                   r2.width <= (r1.width * 1.5 + 0.5)|0 &&\r\n                   (r2.width * 1.5 + 0.5)|0 >= r1.width;\r\n        }\r\n        \r\n        return {\r\n\r\n            edges_density: 0.07,\r\n\r\n            detect_single_scale: function(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, scale, classifier) {\r\n                var win_w = (classifier.size[0] * scale)|0,\r\n                    win_h = (classifier.size[1] * scale)|0,\r\n                    step_x = (0.5 * scale + 1.5)|0,\r\n                    step_y = step_x;\r\n                var i,j,k,x,y,ex=(width-win_w)|0,ey=(height-win_h)|0;\r\n                var w1=(width+1)|0,edge_dens,mean,variance,std;\r\n                var inv_area = 1.0 / (win_w * win_h);\r\n                var stages,stage,trees,tree,sn,tn,fn,found=true,stage_thresh,stage_sum,tree_sum,feature,features;\r\n                var fi_a,fi_b,fi_c,fi_d,fw,fh;\r\n\r\n                var ii_a=0,ii_b=win_w,ii_c=win_h*w1,ii_d=ii_c+win_w;\r\n                var edges_thresh = ((win_w*win_h) * 0xff * this.edges_density)|0;\r\n                // if too much gradient we also can skip\r\n                //var edges_thresh_high = ((win_w*win_h) * 0xff * 0.3)|0;\r\n\r\n                var rects = [];\r\n                for(y = 0; y < ey; y += step_y) {\r\n                    ii_a = y * w1;\r\n                    for(x = 0; x < ex; x += step_x, ii_a += step_x) {\r\n\r\n                        mean =    int_sum[ii_a] \r\n                                - int_sum[ii_a+ii_b]\r\n                                - int_sum[ii_a+ii_c]\r\n                                + int_sum[ii_a+ii_d];\r\n\r\n                        // canny prune\r\n                        if(int_canny_sum) {\r\n                            edge_dens = (int_canny_sum[ii_a] \r\n                                        - int_canny_sum[ii_a+ii_b]\r\n                                        - int_canny_sum[ii_a+ii_c]\r\n                                        + int_canny_sum[ii_a+ii_d]);\r\n                            if(edge_dens < edges_thresh || mean < 20) {\r\n                                x += step_x, ii_a += step_x;\r\n                                continue;\r\n                            }\r\n                        }\r\n\r\n                        mean *= inv_area;\r\n                        variance = (int_sqsum[ii_a] \r\n                                    - int_sqsum[ii_a+ii_b]\r\n                                    - int_sqsum[ii_a+ii_c]\r\n                                    + int_sqsum[ii_a+ii_d]) * inv_area - mean * mean;\r\n\r\n                        std = variance > 0. ? Math.sqrt(variance) : 1;\r\n\r\n                        stages = classifier.complexClassifiers;\r\n                        sn = stages.length;\r\n                        found =  true;\r\n                        for(i = 0; i < sn; ++i) {\r\n                            stage = stages[i];\r\n                            stage_thresh = stage.threshold;\r\n                            trees = stage.simpleClassifiers;\r\n                            tn = trees.length;\r\n                            stage_sum = 0;\r\n                            for(j = 0; j < tn; ++j) {\r\n                                tree = trees[j];\r\n                                tree_sum = 0;\r\n                                features = tree.features;\r\n                                fn = features.length;\r\n                                if(tree.tilted === 1) {\r\n                                    for(k=0; k < fn; ++k) {\r\n                                        feature = features[k];\r\n                                        fi_a = ~~(x + feature[0] * scale) + ~~(y + feature[1] * scale) * w1;\r\n                                        fw = ~~(feature[2] * scale);\r\n                                        fh = ~~(feature[3] * scale);\r\n                                        fi_b = fw * w1;\r\n                                        fi_c =  fh * w1;\r\n\r\n                                        tree_sum += (int_tilted[fi_a]\r\n                                                    - int_tilted[fi_a + fw + fi_b]\r\n                                                    - int_tilted[fi_a - fh + fi_c]\r\n                                                    + int_tilted[fi_a + fw - fh + fi_b + fi_c]) * feature[4];\r\n                                    }\r\n                                } else {\r\n                                    for(k=0; k < fn; ++k) {\r\n                                        feature = features[k];\r\n                                        fi_a = ~~(x + feature[0] * scale) + ~~(y + feature[1] * scale) * w1;\r\n                                        fw = ~~(feature[2] * scale);\r\n                                        fh = ~~(feature[3] * scale);\r\n                                        fi_c = fh * w1;\r\n\r\n                                        tree_sum += (int_sum[fi_a] \r\n                                                    - int_sum[fi_a+fw]\r\n                                                    - int_sum[fi_a+fi_c]\r\n                                                    + int_sum[fi_a+fi_c+fw]) * feature[4];\r\n                                    }\r\n                                }\r\n                                stage_sum += (tree_sum * inv_area < tree.threshold * std) ? tree.left_val : tree.right_val;\r\n                            }\r\n                            if (stage_sum < stage_thresh) {\r\n                                found = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        \r\n                        if(found) {\r\n                            rects.push({\"x\" : x,\r\n                                        \"y\" : y,\r\n                                        \"width\" : win_w,\r\n                                        \"height\" : win_h,\r\n                                        \"neighbor\" : 1,\r\n                                        \"confidence\" : stage_sum});\r\n                            x += step_x, ii_a += step_x;\r\n                        }\r\n                    }\r\n                }\r\n                return rects;\r\n            },\r\n\r\n            detect_multi_scale: function(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, classifier, scale_factor, scale_min) {\r\n                if (typeof scale_factor === \"undefined\") { scale_factor = 1.2; }\r\n                if (typeof scale_min === \"undefined\") { scale_min = 1.0; }\r\n                var win_w = classifier.size[0];\r\n                var win_h = classifier.size[1];\r\n                var rects = [];\r\n                while (scale_min * win_w < width && scale_min * win_h < height) {\r\n                    rects = rects.concat(this.detect_single_scale(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, scale_min, classifier));\r\n                    scale_min *= scale_factor;\r\n                }\r\n                return rects;\r\n            },\r\n\r\n            // OpenCV method to group detected rectangles\r\n            group_rectangles: function(rects, min_neighbors) {\r\n                if (typeof min_neighbors === \"undefined\") { min_neighbors = 1; }\r\n                var i, j, n = rects.length;\r\n                var node = [];\r\n                for (i = 0; i < n; ++i) {\r\n                    node[i] = {\"parent\" : -1,\r\n                               \"element\" : rects[i],\r\n                               \"rank\" : 0};\r\n                }\r\n                for (i = 0; i < n; ++i) {\r\n                    if (!node[i].element)\r\n                        continue;\r\n                    var root = i;\r\n                    while (node[root].parent != -1)\r\n                        root = node[root].parent;\r\n                    for (j = 0; j < n; ++j) {\r\n                        if( i != j && node[j].element && _group_func(node[i].element, node[j].element)) {\r\n                            var root2 = j;\r\n\r\n                            while (node[root2].parent != -1)\r\n                                root2 = node[root2].parent;\r\n\r\n                            if(root2 != root) {\r\n                                if(node[root].rank > node[root2].rank)\r\n                                    node[root2].parent = root;\r\n                                else {\r\n                                    node[root].parent = root2;\r\n                                    if (node[root].rank == node[root2].rank)\r\n                                    node[root2].rank++;\r\n                                    root = root2;\r\n                                }\r\n\r\n                                /* compress path from node2 to the root: */\r\n                                var temp, node2 = j;\r\n                                while (node[node2].parent != -1) {\r\n                                    temp = node2;\r\n                                    node2 = node[node2].parent;\r\n                                    node[temp].parent = root;\r\n                                }\r\n\r\n                                /* compress path from node to the root: */\r\n                                node2 = i;\r\n                                while (node[node2].parent != -1) {\r\n                                    temp = node2;\r\n                                    node2 = node[node2].parent;\r\n                                    node[temp].parent = root;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                var idx_seq = [];\r\n                var class_idx = 0;\r\n                for(i = 0; i < n; i++) {\r\n                    j = -1;\r\n                    var node1 = i;\r\n                    if(node[node1].element) {\r\n                        while (node[node1].parent != -1)\r\n                            node1 = node[node1].parent;\r\n                        if(node[node1].rank >= 0)\r\n                            node[node1].rank = ~class_idx++;\r\n                        j = ~node[node1].rank;\r\n                    }\r\n                    idx_seq[i] = j;\r\n                }\r\n                \r\n                var comps = [];\r\n                for (i = 0; i < class_idx+1; ++i) {\r\n                    comps[i] = {\"neighbors\" : 0,\r\n                                \"x\" : 0,\r\n                                \"y\" : 0,\r\n                                \"width\" : 0,\r\n                                \"height\" : 0,\r\n                                \"confidence\" : 0};\r\n                }\r\n\r\n                // count number of neighbors\r\n                for(i = 0; i < n; ++i) {\r\n                    var r1 = rects[i];\r\n                    var idx = idx_seq[i];\r\n\r\n                    if (comps[idx].neighbors == 0)\r\n                        comps[idx].confidence = r1.confidence;\r\n\r\n                    ++comps[idx].neighbors;\r\n\r\n                    comps[idx].x += r1.x;\r\n                    comps[idx].y += r1.y;\r\n                    comps[idx].width += r1.width;\r\n                    comps[idx].height += r1.height;\r\n                    comps[idx].confidence = Math.max(comps[idx].confidence, r1.confidence);\r\n                }\r\n\r\n                var seq2 = [];\r\n                // calculate average bounding box\r\n                for(i = 0; i < class_idx; ++i) {\r\n                    n = comps[i].neighbors;\r\n                    if (n >= min_neighbors)\r\n                        seq2.push({\"x\" : (comps[i].x * 2 + n) / (2 * n),\r\n                                   \"y\" : (comps[i].y * 2 + n) / (2 * n),\r\n                                   \"width\" : (comps[i].width * 2 + n) / (2 * n),\r\n                                   \"height\" : (comps[i].height * 2 + n) / (2 * n),\r\n                                   \"neighbors\" : comps[i].neighbors,\r\n                                   \"confidence\" : comps[i].confidence});\r\n                }\r\n\r\n                var result_seq = [];\r\n                n = seq2.length;\r\n                // filter out small face rectangles inside large face rectangles\r\n                for(i = 0; i < n; ++i) {\r\n                    var r1 = seq2[i];\r\n                    var flag = true;\r\n                    for(j = 0; j < n; ++j) {\r\n                        var r2 = seq2[j];\r\n                        var distance = (r2.width * 0.25 + 0.5)|0;\r\n\r\n                        if(i != j &&\r\n                           r1.x >= r2.x - distance &&\r\n                           r1.y >= r2.y - distance &&\r\n                           r1.x + r1.width <= r2.x + r2.width + distance &&\r\n                           r1.y + r1.height <= r2.y + r2.height + distance &&\r\n                           (r2.neighbors > Math.max(3, r1.neighbors) || r1.neighbors < 3)) {\r\n                            flag = false;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(flag)\r\n                        result_seq.push(r1);\r\n                }\r\n                return result_seq;\r\n            }\r\n        };\r\n\r\n    })();\r\n\r\n    global.haar = haar;\r\n\r\n})(jsfeat);\r\n/**\r\n * BBF: Brightness Binary Feature\r\n *\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * this code is a rewrite from https://github.com/liuliu/ccv implementation\r\n * @author Liu Liu / http://liuliu.me/\r\n *\r\n * The original paper refers to: YEF∗ Real-Time Object Detection, Yotam Abramson and Bruno Steux\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n    var bbf = (function() {\r\n\r\n        var _group_func = function(r1, r2) {\r\n            var distance = (r1.width * 0.25 + 0.5)|0;\r\n\r\n            return r2.x <= r1.x + distance &&\r\n                   r2.x >= r1.x - distance &&\r\n                   r2.y <= r1.y + distance &&\r\n                   r2.y >= r1.y - distance &&\r\n                   r2.width <= (r1.width * 1.5 + 0.5)|0 &&\r\n                   (r2.width * 1.5 + 0.5)|0 >= r1.width;\r\n        }\r\n\r\n        var img_pyr = new jsfeat.pyramid_t(1);\r\n\r\n        return {\r\n\r\n            interval: 4,\r\n            scale: 1.1486,\r\n            next: 5,\r\n            scale_to: 1,\r\n\r\n            // make features local copy\r\n            // to avoid array allocation with each scale\r\n            // this is strange but array works faster than Int32 version???\r\n            prepare_cascade: function(cascade) {\r\n                var sn = cascade.stage_classifier.length;\r\n                for (var j = 0; j < sn; j++) {\r\n                    var orig_feature = cascade.stage_classifier[j].feature;\r\n                    var f_cnt = cascade.stage_classifier[j].count;\r\n                    var feature = cascade.stage_classifier[j]._feature = new Array(f_cnt);\r\n                    for (var k = 0; k < f_cnt; k++) {\r\n                        feature[k] = {\"size\" : orig_feature[k].size,\r\n                                      \"px\" : new Array(orig_feature[k].size),\r\n                                      \"pz\" : new Array(orig_feature[k].size),\r\n                                      \"nx\" : new Array(orig_feature[k].size),\r\n                                      \"nz\" : new Array(orig_feature[k].size)};\r\n                    }\r\n                }\r\n            },\r\n\r\n            build_pyramid: function(src, min_width, min_height, interval) {\r\n                if (typeof interval === \"undefined\") { interval = 4; }\r\n\r\n                var sw=src.cols,sh=src.rows;\r\n                var i=0,nw=0,nh=0;\r\n                var new_pyr=false;\r\n                var src0=src,src1=src;\r\n                var data_type = jsfeat.U8_t | jsfeat.C1_t;\r\n\r\n                this.interval = interval;\r\n                this.scale = Math.pow(2, 1 / (this.interval + 1));\r\n                this.next = (this.interval + 1)|0;\r\n                this.scale_to = (Math.log(Math.min(sw / min_width, sh / min_height)) / Math.log(this.scale))|0;\r\n\r\n                var pyr_l = ((this.scale_to + this.next * 2) * 4) | 0;\r\n                if(img_pyr.levels != pyr_l) {\r\n                    img_pyr.levels = pyr_l;\r\n                    img_pyr.data = new Array(pyr_l);\r\n                    new_pyr = true;\r\n                    img_pyr.data[0] = src; // first is src\r\n                }\r\n\r\n                for (i = 1; i <= this.interval; ++i) {\r\n                    nw = (sw / Math.pow(this.scale, i))|0;\r\n                    nh = (sh / Math.pow(this.scale, i))|0;\r\n                    src0 = img_pyr.data[i<<2];\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[i<<2] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[i<<2];\r\n                    }\r\n                    jsfeat.imgproc.resample(src, src0, nw, nh);\r\n                }\r\n                for (i = this.next; i < this.scale_to + this.next * 2; ++i) {\r\n                    src1 = img_pyr.data[(i << 2) - (this.next << 2)];\r\n                    src0 = img_pyr.data[i<<2];\r\n                    nw = src1.cols >> 1;\r\n                    nh = src1.rows >> 1;\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[i<<2] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[i<<2];\r\n                    }\r\n                    jsfeat.imgproc.pyrdown(src1, src0);\r\n                }\r\n                for (i = this.next * 2; i < this.scale_to + this.next * 2; ++i) {\r\n                    src1 = img_pyr.data[(i << 2) - (this.next << 2)];\r\n                    nw = src1.cols >> 1;\r\n                    nh = src1.rows >> 1;\r\n                    src0 = img_pyr.data[(i<<2)+1];\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[(i<<2)+1] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[(i<<2)+1];\r\n                    }\r\n                    jsfeat.imgproc.pyrdown(src1, src0, 1, 0);\r\n                    //\r\n                    src0 = img_pyr.data[(i<<2)+2];\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[(i<<2)+2] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[(i<<2)+2];\r\n                    }\r\n                    jsfeat.imgproc.pyrdown(src1, src0, 0, 1);\r\n                    //\r\n                    src0 = img_pyr.data[(i<<2)+3];\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[(i<<2)+3] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[(i<<2)+3];\r\n                    }\r\n                    jsfeat.imgproc.pyrdown(src1, src0, 1, 1);\r\n                }\r\n                return img_pyr;\r\n            },\r\n\r\n            detect: function(pyramid, cascade) {\r\n                var interval = this.interval;\r\n                var scale = this.scale;\r\n                var next = this.next;\r\n                var scale_upto = this.scale_to;\r\n                var i=0,j=0,k=0,n=0,x=0,y=0,q=0,sn=0,f_cnt=0,q_cnt=0,p=0,pmin=0,nmax=0,f=0,i4=0,qw=0,qh=0;\r\n                var sum=0.0, alpha, feature, orig_feature, feature_k, feature_o, flag = true, shortcut=true;\r\n                var scale_x = 1.0, scale_y = 1.0;\r\n                var dx = [0, 1, 0, 1];\r\n                var dy = [0, 0, 1, 1];\r\n                var seq = [];\r\n                var pyr=pyramid.data, bpp = 1, bpp2 = 2, bpp4 = 4;\r\n\r\n                var u8 = [], u8o = [0,0,0];\r\n                var step = [0,0,0];\r\n                var paddings = [0,0,0];\r\n\r\n                for (i = 0; i < scale_upto; i++) {\r\n                    i4 = (i<<2);\r\n                    qw = pyr[i4 + (next << 3)].cols - (cascade.width >> 2);\r\n                    qh = pyr[i4 + (next << 3)].rows - (cascade.height >> 2);\r\n                    step[0] = pyr[i4].cols * bpp;\r\n                    step[1] = pyr[i4 + (next << 2)].cols * bpp;\r\n                    step[2] = pyr[i4 + (next << 3)].cols * bpp;\r\n                    paddings[0] = (pyr[i4].cols * bpp4) - (qw * bpp4);\r\n                    paddings[1] = (pyr[i4 + (next << 2)].cols * bpp2) - (qw * bpp2);\r\n                    paddings[2] = (pyr[i4 + (next << 3)].cols * bpp) - (qw * bpp);\r\n                    sn = cascade.stage_classifier.length;\r\n                    for (j = 0; j < sn; j++) {\r\n                        orig_feature = cascade.stage_classifier[j].feature;\r\n                        feature = cascade.stage_classifier[j]._feature;\r\n                        f_cnt = cascade.stage_classifier[j].count;\r\n                        for (k = 0; k < f_cnt; k++) {\r\n                            feature_k = feature[k];\r\n                            feature_o = orig_feature[k];\r\n                            q_cnt = feature_o.size|0;\r\n                            for (q = 0; q < q_cnt; q++) {\r\n                                feature_k.px[q] = (feature_o.px[q] * bpp) + feature_o.py[q] * step[feature_o.pz[q]];\r\n                                feature_k.pz[q] = feature_o.pz[q];\r\n                                feature_k.nx[q] = (feature_o.nx[q] * bpp) + feature_o.ny[q] * step[feature_o.nz[q]];\r\n                                feature_k.nz[q] = feature_o.nz[q];\r\n                            }\r\n                        }\r\n                    }\r\n                    u8[0] = pyr[i4].data; u8[1] = pyr[i4 + (next<<2)].data;\r\n                    for (q = 0; q < 4; q++) {\r\n                        u8[2] = pyr[i4 + (next<<3) + q].data;\r\n                        u8o[0] = (dx[q]*bpp2) + dy[q] * (pyr[i4].cols*bpp2); \r\n                        u8o[1] = (dx[q]*bpp) + dy[q] * (pyr[i4 + (next<<2)].cols*bpp); \r\n                        u8o[2] = 0;\r\n                        for (y = 0; y < qh; y++) {\r\n                            for (x = 0; x < qw; x++) {\r\n                                sum = 0;\r\n                                flag = true;\r\n                                sn = cascade.stage_classifier.length;\r\n                                for (j = 0; j < sn; j++) {\r\n                                    sum = 0;\r\n                                    alpha = cascade.stage_classifier[j].alpha;\r\n                                    feature = cascade.stage_classifier[j]._feature;\r\n                                    f_cnt = cascade.stage_classifier[j].count;\r\n                                    for (k = 0; k < f_cnt; k++) {\r\n                                        feature_k = feature[k];\r\n                                        pmin = u8[feature_k.pz[0]][u8o[feature_k.pz[0]] + feature_k.px[0]];\r\n                                        nmax = u8[feature_k.nz[0]][u8o[feature_k.nz[0]] + feature_k.nx[0]];\r\n                                        if (pmin <= nmax) {\r\n                                            sum += alpha[k << 1];\r\n                                        } else {\r\n                                            shortcut = true;\r\n                                            q_cnt = feature_k.size;\r\n                                            for (f = 1; f < q_cnt; f++) {\r\n                                                if (feature_k.pz[f] >= 0) {\r\n                                                    p = u8[feature_k.pz[f]][u8o[feature_k.pz[f]] + feature_k.px[f]];\r\n                                                    if (p < pmin) {\r\n                                                        if (p <= nmax) {\r\n                                                            shortcut = false;\r\n                                                            break;\r\n                                                        }\r\n                                                        pmin = p;\r\n                                                    }\r\n                                                }\r\n                                                if (feature_k.nz[f] >= 0) {\r\n                                                    n = u8[feature_k.nz[f]][u8o[feature_k.nz[f]] + feature_k.nx[f]];\r\n                                                    if (n > nmax) {\r\n                                                        if (pmin <= n) {\r\n                                                            shortcut = false;\r\n                                                            break;\r\n                                                        }\r\n                                                        nmax = n;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            sum += (shortcut) ? alpha[(k << 1) + 1] : alpha[k << 1];\r\n                                        }\r\n                                    }\r\n                                    if (sum < cascade.stage_classifier[j].threshold) {\r\n                                        flag = false;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (flag) {\r\n                                    seq.push({\"x\" : (x * 4 + dx[q] * 2) * scale_x,\r\n                                              \"y\" : (y * 4 + dy[q] * 2) * scale_y,\r\n                                              \"width\" : cascade.width * scale_x,\r\n                                              \"height\" : cascade.height * scale_y,\r\n                                              \"neighbor\" : 1,\r\n                                              \"confidence\" : sum});\r\n                                    ++x;\r\n                                    u8o[0] += bpp4;\r\n                                    u8o[1] += bpp2;\r\n                                    u8o[2] += bpp;\r\n                                }\r\n                                u8o[0] += bpp4;\r\n                                u8o[1] += bpp2;\r\n                                u8o[2] += bpp;\r\n                            }\r\n                            u8o[0] += paddings[0];\r\n                            u8o[1] += paddings[1];\r\n                            u8o[2] += paddings[2];\r\n                        }\r\n                    }\r\n                    scale_x *= scale;\r\n                    scale_y *= scale;\r\n                }\r\n\r\n                return seq;\r\n            },\r\n\r\n            // OpenCV method to group detected rectangles\r\n            group_rectangles: function(rects, min_neighbors) {\r\n                if (typeof min_neighbors === \"undefined\") { min_neighbors = 1; }\r\n                var i, j, n = rects.length;\r\n                var node = [];\r\n                for (i = 0; i < n; ++i) {\r\n                    node[i] = {\"parent\" : -1,\r\n                               \"element\" : rects[i],\r\n                               \"rank\" : 0};\r\n                }\r\n                for (i = 0; i < n; ++i) {\r\n                    if (!node[i].element)\r\n                        continue;\r\n                    var root = i;\r\n                    while (node[root].parent != -1)\r\n                        root = node[root].parent;\r\n                    for (j = 0; j < n; ++j) {\r\n                        if( i != j && node[j].element && _group_func(node[i].element, node[j].element)) {\r\n                            var root2 = j;\r\n\r\n                            while (node[root2].parent != -1)\r\n                                root2 = node[root2].parent;\r\n\r\n                            if(root2 != root) {\r\n                                if(node[root].rank > node[root2].rank)\r\n                                    node[root2].parent = root;\r\n                                else {\r\n                                    node[root].parent = root2;\r\n                                    if (node[root].rank == node[root2].rank)\r\n                                    node[root2].rank++;\r\n                                    root = root2;\r\n                                }\r\n\r\n                                /* compress path from node2 to the root: */\r\n                                var temp, node2 = j;\r\n                                while (node[node2].parent != -1) {\r\n                                    temp = node2;\r\n                                    node2 = node[node2].parent;\r\n                                    node[temp].parent = root;\r\n                                }\r\n\r\n                                /* compress path from node to the root: */\r\n                                node2 = i;\r\n                                while (node[node2].parent != -1) {\r\n                                    temp = node2;\r\n                                    node2 = node[node2].parent;\r\n                                    node[temp].parent = root;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                var idx_seq = [];\r\n                var class_idx = 0;\r\n                for(i = 0; i < n; i++) {\r\n                    j = -1;\r\n                    var node1 = i;\r\n                    if(node[node1].element) {\r\n                        while (node[node1].parent != -1)\r\n                            node1 = node[node1].parent;\r\n                        if(node[node1].rank >= 0)\r\n                            node[node1].rank = ~class_idx++;\r\n                        j = ~node[node1].rank;\r\n                    }\r\n                    idx_seq[i] = j;\r\n                }\r\n                \r\n                var comps = [];\r\n                for (i = 0; i < class_idx+1; ++i) {\r\n                    comps[i] = {\"neighbors\" : 0,\r\n                                \"x\" : 0,\r\n                                \"y\" : 0,\r\n                                \"width\" : 0,\r\n                                \"height\" : 0,\r\n                                \"confidence\" : 0};\r\n                }\r\n\r\n                // count number of neighbors\r\n                for(i = 0; i < n; ++i) {\r\n                    var r1 = rects[i];\r\n                    var idx = idx_seq[i];\r\n\r\n                    if (comps[idx].neighbors == 0)\r\n                        comps[idx].confidence = r1.confidence;\r\n\r\n                    ++comps[idx].neighbors;\r\n\r\n                    comps[idx].x += r1.x;\r\n                    comps[idx].y += r1.y;\r\n                    comps[idx].width += r1.width;\r\n                    comps[idx].height += r1.height;\r\n                    comps[idx].confidence = Math.max(comps[idx].confidence, r1.confidence);\r\n                }\r\n\r\n                var seq2 = [];\r\n                // calculate average bounding box\r\n                for(i = 0; i < class_idx; ++i) {\r\n                    n = comps[i].neighbors;\r\n                    if (n >= min_neighbors)\r\n                        seq2.push({\"x\" : (comps[i].x * 2 + n) / (2 * n),\r\n                                   \"y\" : (comps[i].y * 2 + n) / (2 * n),\r\n                                   \"width\" : (comps[i].width * 2 + n) / (2 * n),\r\n                                   \"height\" : (comps[i].height * 2 + n) / (2 * n),\r\n                                   \"neighbors\" : comps[i].neighbors,\r\n                                   \"confidence\" : comps[i].confidence});\r\n                }\r\n\r\n                var result_seq = [];\r\n                n = seq2.length;\r\n                // filter out small face rectangles inside large face rectangles\r\n                for(i = 0; i < n; ++i) {\r\n                    var r1 = seq2[i];\r\n                    var flag = true;\r\n                    for(j = 0; j < n; ++j) {\r\n                        var r2 = seq2[j];\r\n                        var distance = (r2.width * 0.25 + 0.5)|0;\r\n\r\n                        if(i != j &&\r\n                           r1.x >= r2.x - distance &&\r\n                           r1.y >= r2.y - distance &&\r\n                           r1.x + r1.width <= r2.x + r2.width + distance &&\r\n                           r1.y + r1.height <= r2.y + r2.height + distance &&\r\n                           (r2.neighbors > Math.max(3, r1.neighbors) || r1.neighbors < 3)) {\r\n                            flag = false;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(flag)\r\n                        result_seq.push(r1);\r\n                }\r\n                return result_seq;\r\n            }\r\n\r\n        };\r\n\r\n    })();\r\n\r\n    global.bbf = bbf;\r\n\r\n})(jsfeat);\r\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n */\n\n(function(lib) {\n    \"use strict\";\n\n    if (typeof module === \"undefined\" || typeof module.exports === \"undefined\") {\n        // in a browser, define its namespaces in global\n        window.jsfeat = lib;\n    } else {\n        // in commonjs, or when AMD wrapping has been applied, define its namespaces as exports\n        module.exports = lib;\n    }\n})(jsfeat);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
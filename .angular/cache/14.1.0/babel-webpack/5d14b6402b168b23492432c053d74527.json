{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport { Injectable, NgZone, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Optional, Inject, LOCALE_ID, Directive, Input, EventEmitter, Output, Self, Component, ElementRef, PLATFORM_ID, ContentChildren, QueryList, forwardRef, NgModule } from '@angular/core';\nimport { Observable, BehaviorSubject, from, timer, ReplaySubject, bindCallback, of, throwError, fromEventPattern, merge, Subject } from 'rxjs';\nimport { flatMap, sample, switchMap, map, shareReplay, multicast, startWith, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\n\nclass MapsAPILoader {}\n\nMapsAPILoader.decorators = [{\n  type: Injectable\n}];\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\n\nclass GoogleMapsAPIWrapper {\n  constructor(_loader, _zone) {\n    this._loader = _loader;\n    this._zone = _zone;\n    this._map = new Promise(resolve => {\n      this._mapResolver = resolve;\n    });\n  }\n\n  createMap(el, mapOptions) {\n    return this._zone.runOutsideAngular(() => {\n      return this._loader.load().then(() => {\n        const map = new google.maps.Map(el, mapOptions);\n\n        this._mapResolver(map);\n\n        return;\n      });\n    });\n  }\n\n  setMapOptions(options) {\n    return this._zone.runOutsideAngular(() => {\n      this._map.then(m => {\n        m.setOptions(options);\n      });\n    });\n  }\n  /**\n   * Creates a google map marker with the map context\n   */\n\n\n  createMarker(options = {}, addToMap = true) {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => {\n        if (addToMap) {\n          options.map = map;\n        }\n\n        return new google.maps.Marker(options);\n      });\n    });\n  }\n\n  createInfoWindow(options) {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(() => new google.maps.InfoWindow(options));\n    });\n  }\n  /**\n   * Creates a google.map.Circle for the current map.\n   */\n\n\n  createCircle(options) {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => {\n        options.map = map;\n        return new google.maps.Circle(options);\n      });\n    });\n  }\n  /**\n   * Creates a google.map.Rectangle for the current map.\n   */\n\n\n  createRectangle(options) {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => {\n        options.map = map;\n        return new google.maps.Rectangle(options);\n      });\n    });\n  }\n\n  createPolyline(options) {\n    return this._zone.runOutsideAngular(() => {\n      return this.getNativeMap().then(map => {\n        const line = new google.maps.Polyline(options);\n        line.setMap(map);\n        return line;\n      });\n    });\n  }\n\n  createPolygon(options) {\n    return this._zone.runOutsideAngular(() => {\n      return this.getNativeMap().then(map => {\n        const polygon = new google.maps.Polygon(options);\n        polygon.setMap(map);\n        return polygon;\n      });\n    });\n  }\n  /**\n   * Creates a new google.map.Data layer for the current map\n   */\n\n\n  createDataLayer(options) {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(m => {\n        const data = new google.maps.Data(options);\n        data.setMap(m);\n        return data;\n      });\n    });\n  }\n  /**\n   * Creates a TransitLayer instance for a map\n   * @returns a new transit layer object\n   */\n\n\n  createTransitLayer() {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => {\n        const newLayer = new google.maps.TransitLayer();\n        newLayer.setMap(map);\n        return newLayer;\n      });\n    });\n  }\n  /**\n   * Creates a BicyclingLayer instance for a map\n   * @returns a new bicycling layer object\n   */\n\n\n  createBicyclingLayer() {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => {\n        const newLayer = new google.maps.BicyclingLayer();\n        newLayer.setMap(map);\n        return newLayer;\n      });\n    });\n  }\n  /**\n   * Determines if given coordinates are insite a Polygon path.\n   */\n\n\n  containsLocation(latLng, polygon) {\n    return this._map.then(() => google.maps.geometry.poly.containsLocation(latLng, polygon));\n  }\n\n  subscribeToMapEvent(eventName) {\n    return new Observable(observer => {\n      this._map.then(m => m.addListener(eventName, () => this._zone.run(() => observer.next(arguments[0]))));\n    });\n  }\n\n  clearInstanceListeners() {\n    return this._zone.runOutsideAngular(() => {\n      this._map.then(map => {\n        google.maps.event.clearInstanceListeners(map);\n      });\n    });\n  }\n\n  setCenter(latLng) {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => map.setCenter(latLng));\n    });\n  }\n\n  getZoom() {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => map.getZoom());\n    });\n  }\n\n  getBounds() {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => map.getBounds());\n    });\n  }\n\n  getMapTypeId() {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => map.getMapTypeId());\n    });\n  }\n\n  setZoom(zoom) {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => map.setZoom(zoom));\n    });\n  }\n\n  getCenter() {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => map.getCenter());\n    });\n  }\n\n  panTo(latLng) {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => map.panTo(latLng));\n    });\n  }\n\n  panBy(x, y) {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => map.panBy(x, y));\n    });\n  }\n\n  fitBounds(latLng, padding) {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => map.fitBounds(latLng, padding));\n    });\n  }\n\n  panToBounds(latLng, padding) {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(map => map.panToBounds(latLng, padding));\n    });\n  }\n  /**\n   * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n   */\n\n\n  getNativeMap() {\n    return this._map;\n  }\n  /**\n   * Triggers the given event name on the map instance.\n   */\n\n\n  triggerMapEvent(eventName) {\n    return this._map.then(m => google.maps.event.trigger(m, eventName));\n  }\n\n}\n\nGoogleMapsAPIWrapper.decorators = [{\n  type: Injectable\n}];\n\nGoogleMapsAPIWrapper.ctorParameters = () => [{\n  type: MapsAPILoader\n}, {\n  type: NgZone\n}];\n\nclass CircleManager {\n  constructor(_apiWrapper, _zone) {\n    this._apiWrapper = _apiWrapper;\n    this._zone = _zone;\n    this._circles = new Map();\n  }\n\n  addCircle(circle) {\n    this._apiWrapper.getNativeMap().then(() => this._circles.set(circle, this._apiWrapper.createCircle({\n      center: {\n        lat: circle.latitude,\n        lng: circle.longitude\n      },\n      clickable: circle.clickable,\n      draggable: circle.draggable,\n      editable: circle.editable,\n      fillColor: circle.fillColor,\n      fillOpacity: circle.fillOpacity,\n      radius: circle.radius,\n      strokeColor: circle.strokeColor,\n      strokeOpacity: circle.strokeOpacity,\n      strokePosition: google.maps.StrokePosition[circle.strokePosition],\n      strokeWeight: circle.strokeWeight,\n      visible: circle.visible,\n      zIndex: circle.zIndex\n    })));\n  }\n  /**\n   * Removes the given circle from the map.\n   */\n\n\n  removeCircle(circle) {\n    return this._circles.get(circle).then(c => {\n      c.setMap(null);\n\n      this._circles.delete(circle);\n    });\n  }\n\n  setOptions(circle, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._circles.get(circle).then(c => {\n        const actualParam = options.strokePosition;\n        options.strokePosition = google.maps.StrokePosition[actualParam];\n        c.setOptions(options);\n      });\n    });\n  }\n\n  getBounds(circle) {\n    return this._circles.get(circle).then(c => c.getBounds());\n  }\n\n  getCenter(circle) {\n    return this._circles.get(circle).then(c => c.getCenter());\n  }\n\n  getRadius(circle) {\n    return this._circles.get(circle).then(c => c.getRadius());\n  }\n\n  setCenter(circle) {\n    return this._circles.get(circle).then(c => c.setCenter({\n      lat: circle.latitude,\n      lng: circle.longitude\n    }));\n  }\n\n  setEditable(circle) {\n    return this._circles.get(circle).then(c => c.setEditable(circle.editable));\n  }\n\n  setDraggable(circle) {\n    return this._circles.get(circle).then(c => c.setDraggable(circle.draggable));\n  }\n\n  setVisible(circle) {\n    return this._circles.get(circle).then(c => c.setVisible(circle.visible));\n  }\n\n  setRadius(circle) {\n    return this._circles.get(circle).then(c => c.setRadius(circle.radius));\n  }\n\n  getNativeCircle(circle) {\n    return this._circles.get(circle);\n  }\n\n  createEventObservable(eventName, circle) {\n    return new Observable(observer => {\n      let listener = null;\n\n      this._circles.get(circle).then(c => {\n        listener = c.addListener(eventName, e => this._zone.run(() => observer.next(e)));\n      });\n\n      return () => {\n        if (listener !== null) {\n          listener.remove();\n        }\n      };\n    });\n  }\n\n}\n\nCircleManager.decorators = [{\n  type: Injectable\n}];\n\nCircleManager.ctorParameters = () => [{\n  type: GoogleMapsAPIWrapper\n}, {\n  type: NgZone\n}];\n/**\n * Manages all Data Layers for a Google Map instance.\n */\n\n\nclass DataLayerManager {\n  constructor(_wrapper, _zone) {\n    this._wrapper = _wrapper;\n    this._zone = _zone;\n    this._layers = new Map();\n  }\n  /**\n   * Adds a new Data Layer to the map.\n   */\n\n\n  addDataLayer(layer) {\n    const newLayer = this._wrapper.createDataLayer({\n      style: layer.style\n    }).then(d => {\n      if (layer.geoJson) {\n        // NOTE: accessing \"features\" on google.maps.Data is undocumented\n        this.getDataFeatures(d, layer.geoJson).then(features => d.features = features);\n      }\n\n      return d;\n    });\n\n    this._layers.set(layer, newLayer);\n  }\n\n  deleteDataLayer(layer) {\n    this._layers.get(layer).then(l => {\n      l.setMap(null);\n\n      this._layers.delete(layer);\n    });\n  }\n\n  updateGeoJson(layer, geoJson) {\n    this._layers.get(layer).then(l => {\n      l.forEach(feature => {\n        l.remove(feature); // NOTE: accessing \"features\" on google.maps.Data is undocumented\n\n        const index = l.features.indexOf(feature, 0);\n\n        if (index > -1) {\n          l.features.splice(index, 1);\n        }\n      });\n      this.getDataFeatures(l, geoJson).then(features => l.features = features);\n    });\n  }\n\n  setDataOptions(layer, options) {\n    this._layers.get(layer).then(l => {\n      l.setControlPosition(options.controlPosition);\n      l.setControls(options.controls);\n      l.setDrawingMode(options.drawingMode);\n      l.setStyle(options.style);\n    });\n  }\n  /**\n   * Creates a Google Maps event listener for the given DataLayer as an Observable\n   */\n\n\n  createEventObservable(eventName, layer) {\n    return new Observable(observer => {\n      this._layers.get(layer).then(d => {\n        d.addListener(eventName, e => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n  /**\n   * Extract features from a geoJson using google.maps Data Class\n   * @param d : google.maps.Data class instance\n   * @param geoJson : url or geojson object\n   */\n\n\n  getDataFeatures(d, geoJson) {\n    return new Promise((resolve, reject) => {\n      if (typeof geoJson === 'object') {\n        try {\n          const features = d.addGeoJson(geoJson);\n          resolve(features);\n        } catch (e) {\n          reject(e);\n        }\n      } else if (typeof geoJson === 'string') {\n        d.loadGeoJson(geoJson, null, resolve);\n      } else {\n        reject(`Impossible to extract features from geoJson: wrong argument type`);\n      }\n    });\n  }\n\n}\n\nDataLayerManager.decorators = [{\n  type: Injectable\n}];\n\nDataLayerManager.ctorParameters = () => [{\n  type: GoogleMapsAPIWrapper\n}, {\n  type: NgZone\n}];\n/**\n * Class to implement when you what to be able to make it work with the auto fit bounds feature\n * of AGM.\n */\n\n\nclass FitBoundsAccessor {}\n/**\n * The FitBoundsService is responsible for computing the bounds of the a single map.\n */\n\n\nclass FitBoundsService {\n  constructor(loader) {\n    this._boundsChangeSampleTime$ = new BehaviorSubject(200);\n    this._includeInBounds$ = new BehaviorSubject(new Map());\n    this.bounds$ = from(loader.load()).pipe(flatMap(() => this._includeInBounds$), sample(this._boundsChangeSampleTime$.pipe(switchMap(time => timer(0, time)))), map(includeInBounds => this._generateBounds(includeInBounds)), shareReplay(1));\n  }\n\n  _generateBounds(includeInBounds) {\n    const bounds = new google.maps.LatLngBounds();\n    includeInBounds.forEach(b => bounds.extend(b));\n    return bounds;\n  }\n\n  addToBounds(latLng) {\n    const id = this._createIdentifier(latLng);\n\n    if (this._includeInBounds$.value.has(id)) {\n      return;\n    }\n\n    const boundsMap = this._includeInBounds$.value;\n    boundsMap.set(id, latLng);\n\n    this._includeInBounds$.next(boundsMap);\n  }\n\n  removeFromBounds(latLng) {\n    const boundsMap = this._includeInBounds$.value;\n    boundsMap.delete(this._createIdentifier(latLng));\n\n    this._includeInBounds$.next(boundsMap);\n  }\n\n  changeFitBoundsChangeSampleTime(timeMs) {\n    this._boundsChangeSampleTime$.next(timeMs);\n  }\n\n  getBounds$() {\n    return this.bounds$;\n  }\n\n  _createIdentifier(latLng) {\n    return `${latLng.lat}+${latLng.lng}`;\n  }\n\n}\n\nFitBoundsService.decorators = [{\n  type: Injectable\n}];\n\nFitBoundsService.ctorParameters = () => [{\n  type: MapsAPILoader\n}];\n\nclass AgmGeocoder {\n  constructor(loader) {\n    const connectableGeocoder$ = new Observable(subscriber => {\n      loader.load().then(() => subscriber.next());\n    }).pipe(map(() => this._createGeocoder()), multicast(new ReplaySubject(1)));\n    connectableGeocoder$.connect(); // ignore the subscription\n    // since we will remain subscribed till application exits\n\n    this.geocoder$ = connectableGeocoder$;\n  }\n\n  geocode(request) {\n    return this.geocoder$.pipe(switchMap(geocoder => this._getGoogleResults(geocoder, request)));\n  }\n\n  _getGoogleResults(geocoder, request) {\n    const geocodeObservable = bindCallback(geocoder.geocode);\n    return geocodeObservable(request).pipe(switchMap(([results, status]) => {\n      if (status === google.maps.GeocoderStatus.OK) {\n        return of(results);\n      }\n\n      return throwError(status);\n    }));\n  }\n\n  _createGeocoder() {\n    return new google.maps.Geocoder();\n  }\n\n}\n\nAgmGeocoder.ɵprov = ɵɵdefineInjectable({\n  factory: function AgmGeocoder_Factory() {\n    return new AgmGeocoder(ɵɵinject(MapsAPILoader));\n  },\n  token: AgmGeocoder,\n  providedIn: \"root\"\n});\nAgmGeocoder.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n\nAgmGeocoder.ctorParameters = () => [{\n  type: MapsAPILoader\n}];\n\nclass WindowRef {\n  getNativeWindow() {\n    return window;\n  }\n\n}\n\nclass DocumentRef {\n  getNativeDocument() {\n    return document;\n  }\n\n}\n\nconst BROWSER_GLOBALS_PROVIDERS = [WindowRef, DocumentRef];\nvar GoogleMapsScriptProtocol;\n\n(function (GoogleMapsScriptProtocol) {\n  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTP\"] = 1] = \"HTTP\";\n  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTPS\"] = 2] = \"HTTPS\";\n  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"AUTO\"] = 3] = \"AUTO\";\n})(GoogleMapsScriptProtocol || (GoogleMapsScriptProtocol = {}));\n/**\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\n * LazyMapsAPILoaderConfig}.\n */\n\n\nconst LAZY_MAPS_API_CONFIG = new InjectionToken('angular-google-maps LAZY_MAPS_API_CONFIG');\n\nclass LazyMapsAPILoader extends MapsAPILoader {\n  constructor(config = null, w, d, localeId) {\n    super();\n    this.localeId = localeId;\n    this._SCRIPT_ID = 'agmGoogleMapsApiScript';\n    this.callbackName = `agmLazyMapsAPILoader`;\n    this._config = config || {};\n    this._windowRef = w;\n    this._documentRef = d;\n  }\n\n  load() {\n    const window = this._windowRef.getNativeWindow();\n\n    if (window.google && window.google.maps) {\n      // Google maps already loaded on the page.\n      return Promise.resolve();\n    }\n\n    if (this._scriptLoadingPromise) {\n      return this._scriptLoadingPromise;\n    } // this can happen in HMR situations or Stackblitz.io editors.\n\n\n    const scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\n\n    if (scriptOnPage) {\n      this._assignScriptLoadingPromise(scriptOnPage);\n\n      return this._scriptLoadingPromise;\n    }\n\n    const script = this._documentRef.getNativeDocument().createElement('script');\n\n    script.type = 'text/javascript';\n    script.async = true;\n    script.defer = true;\n    script.id = this._SCRIPT_ID;\n    script.src = this._getScriptSrc(this.callbackName);\n\n    this._assignScriptLoadingPromise(script);\n\n    this._documentRef.getNativeDocument().body.appendChild(script);\n\n    return this._scriptLoadingPromise;\n  }\n\n  _assignScriptLoadingPromise(scriptElem) {\n    this._scriptLoadingPromise = new Promise((resolve, reject) => {\n      this._windowRef.getNativeWindow()[this.callbackName] = () => {\n        resolve();\n      };\n\n      scriptElem.onerror = error => {\n        reject(error);\n      };\n    });\n  }\n\n  _getScriptSrc(callbackName) {\n    const protocolType = this._config && this._config.protocol || GoogleMapsScriptProtocol.HTTPS;\n    let protocol;\n\n    switch (protocolType) {\n      case GoogleMapsScriptProtocol.AUTO:\n        protocol = '';\n        break;\n\n      case GoogleMapsScriptProtocol.HTTP:\n        protocol = 'http:';\n        break;\n\n      case GoogleMapsScriptProtocol.HTTPS:\n        protocol = 'https:';\n        break;\n    }\n\n    const hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n    const queryParams = {\n      v: this._config.apiVersion || 'quarterly',\n      callback: callbackName,\n      key: this._config.apiKey,\n      client: this._config.clientId,\n      channel: this._config.channel,\n      libraries: this._config.libraries,\n      region: this._config.region,\n      language: this._config.language || (this.localeId !== 'en-US' ? this.localeId : null)\n    };\n    const params = Object.keys(queryParams).filter(k => queryParams[k] != null).filter(k => {\n      // remove empty arrays\n      return !Array.isArray(queryParams[k]) || Array.isArray(queryParams[k]) && queryParams[k].length > 0;\n    }).map(k => {\n      // join arrays as comma seperated strings\n      const i = queryParams[k];\n\n      if (Array.isArray(i)) {\n        return {\n          key: k,\n          value: i.join(',')\n        };\n      }\n\n      return {\n        key: k,\n        value: queryParams[k]\n      };\n    }).map(entry => {\n      return `${entry.key}=${entry.value}`;\n    }).join('&');\n    return `${protocol}//${hostAndPath}?${params}`;\n  }\n\n}\n\nLazyMapsAPILoader.decorators = [{\n  type: Injectable\n}];\n\nLazyMapsAPILoader.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [LAZY_MAPS_API_CONFIG]\n  }]\n}, {\n  type: WindowRef\n}, {\n  type: DocumentRef\n}, {\n  type: String,\n  decorators: [{\n    type: Inject,\n    args: [LOCALE_ID]\n  }]\n}];\n\nclass MarkerManager {\n  constructor(_mapsWrapper, _zone) {\n    this._mapsWrapper = _mapsWrapper;\n    this._zone = _zone;\n    this._markers = new Map();\n  }\n\n  convertAnimation(uiAnim) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (uiAnim === null) {\n        return null;\n      } else {\n        return this._mapsWrapper.getNativeMap().then(() => google.maps.Animation[uiAnim]);\n      }\n    });\n  }\n\n  deleteMarker(markerDirective) {\n    const markerPromise = this._markers.get(markerDirective);\n\n    if (markerPromise == null) {\n      // marker already deleted\n      return Promise.resolve();\n    }\n\n    return markerPromise.then(marker => {\n      return this._zone.run(() => {\n        marker.setMap(null);\n\n        this._markers.delete(markerDirective);\n      });\n    });\n  }\n\n  updateMarkerPosition(marker) {\n    return this._markers.get(marker).then(m => m.setPosition({\n      lat: marker.latitude,\n      lng: marker.longitude\n    }));\n  }\n\n  updateTitle(marker) {\n    return this._markers.get(marker).then(m => m.setTitle(marker.title));\n  }\n\n  updateLabel(marker) {\n    return this._markers.get(marker).then(m => {\n      m.setLabel(marker.label);\n    });\n  }\n\n  updateDraggable(marker) {\n    return this._markers.get(marker).then(m => m.setDraggable(marker.draggable));\n  }\n\n  updateIcon(marker) {\n    return this._markers.get(marker).then(m => m.setIcon(marker.iconUrl));\n  }\n\n  updateOpacity(marker) {\n    return this._markers.get(marker).then(m => m.setOpacity(marker.opacity));\n  }\n\n  updateVisible(marker) {\n    return this._markers.get(marker).then(m => m.setVisible(marker.visible));\n  }\n\n  updateZIndex(marker) {\n    return this._markers.get(marker).then(m => m.setZIndex(marker.zIndex));\n  }\n\n  updateClickable(marker) {\n    return this._markers.get(marker).then(m => m.setClickable(marker.clickable));\n  }\n\n  updateAnimation(marker) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const m = yield this._markers.get(marker);\n      m.setAnimation(yield this.convertAnimation(marker.animation));\n    });\n  }\n\n  addMarker(marker) {\n    const markerPromise = new Promise(resolve => __awaiter(this, void 0, void 0, function* () {\n      return this._mapsWrapper.createMarker({\n        position: {\n          lat: marker.latitude,\n          lng: marker.longitude\n        },\n        label: marker.label,\n        draggable: marker.draggable,\n        icon: marker.iconUrl,\n        opacity: marker.opacity,\n        visible: marker.visible,\n        zIndex: marker.zIndex,\n        title: marker.title,\n        clickable: marker.clickable,\n        animation: yield this.convertAnimation(marker.animation)\n      }).then(resolve);\n    }));\n\n    this._markers.set(marker, markerPromise);\n  }\n\n  getNativeMarker(marker) {\n    return this._markers.get(marker);\n  }\n\n  createEventObservable(eventName, marker) {\n    return new Observable(observer => {\n      this._markers.get(marker).then(m => m.addListener(eventName, e => this._zone.run(() => observer.next(e))));\n    });\n  }\n\n}\n\nMarkerManager.decorators = [{\n  type: Injectable\n}];\n\nMarkerManager.ctorParameters = () => [{\n  type: GoogleMapsAPIWrapper\n}, {\n  type: NgZone\n}];\n\nclass InfoWindowManager {\n  constructor(_mapsWrapper, _zone, _markerManager) {\n    this._mapsWrapper = _mapsWrapper;\n    this._zone = _zone;\n    this._markerManager = _markerManager;\n    this._infoWindows = new Map();\n  }\n\n  deleteInfoWindow(infoWindow) {\n    const iWindow = this._infoWindows.get(infoWindow);\n\n    if (iWindow == null) {\n      // info window already deleted\n      return Promise.resolve();\n    }\n\n    return iWindow.then(i => {\n      return this._zone.run(() => {\n        i.close();\n\n        this._infoWindows.delete(infoWindow);\n      });\n    });\n  }\n\n  setPosition(infoWindow) {\n    return this._infoWindows.get(infoWindow).then(i => i.setPosition({\n      lat: infoWindow.latitude,\n      lng: infoWindow.longitude\n    }));\n  }\n\n  setZIndex(infoWindow) {\n    return this._infoWindows.get(infoWindow).then(i => i.setZIndex(infoWindow.zIndex));\n  }\n\n  open(infoWindow) {\n    return this._infoWindows.get(infoWindow).then(w => {\n      if (infoWindow.hostMarker != null) {\n        return this._markerManager.getNativeMarker(infoWindow.hostMarker).then(marker => {\n          return this._mapsWrapper.getNativeMap().then(map => w.open(map, marker));\n        });\n      }\n\n      return this._mapsWrapper.getNativeMap().then(map => w.open(map));\n    });\n  }\n\n  close(infoWindow) {\n    return this._infoWindows.get(infoWindow).then(w => w.close());\n  }\n\n  setOptions(infoWindow, options) {\n    return this._infoWindows.get(infoWindow).then(i => i.setOptions(options));\n  }\n\n  addInfoWindow(infoWindow) {\n    const options = {\n      content: infoWindow.content,\n      maxWidth: infoWindow.maxWidth,\n      zIndex: infoWindow.zIndex,\n      disableAutoPan: infoWindow.disableAutoPan\n    };\n\n    if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\n      options.position = {\n        lat: infoWindow.latitude,\n        lng: infoWindow.longitude\n      };\n    }\n\n    const infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\n\n    this._infoWindows.set(infoWindow, infoWindowPromise);\n  }\n  /**\n   * Creates a Google Maps event listener for the given InfoWindow as an Observable\n   */\n\n\n  createEventObservable(eventName, infoWindow) {\n    return new Observable(observer => {\n      this._infoWindows.get(infoWindow).then(i => {\n        i.addListener(eventName, e => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n}\n\nInfoWindowManager.decorators = [{\n  type: Injectable\n}];\n\nInfoWindowManager.ctorParameters = () => [{\n  type: GoogleMapsAPIWrapper\n}, {\n  type: NgZone\n}, {\n  type: MarkerManager\n}];\n/**\n * Manages all KML Layers for a Google Map instance.\n */\n\n\nclass KmlLayerManager {\n  constructor(_wrapper, _zone) {\n    this._wrapper = _wrapper;\n    this._zone = _zone;\n    this._layers = new Map();\n  }\n  /**\n   * Adds a new KML Layer to the map.\n   */\n\n\n  addKmlLayer(layer) {\n    const newLayer = this._wrapper.getNativeMap().then(m => {\n      return new google.maps.KmlLayer({\n        clickable: layer.clickable,\n        map: m,\n        preserveViewport: layer.preserveViewport,\n        screenOverlays: layer.screenOverlays,\n        suppressInfoWindows: layer.suppressInfoWindows,\n        url: layer.url,\n        zIndex: layer.zIndex\n      });\n    });\n\n    this._layers.set(layer, newLayer);\n  }\n\n  setOptions(layer, options) {\n    this._layers.get(layer).then(l => l.setOptions(options));\n  }\n\n  deleteKmlLayer(layer) {\n    this._layers.get(layer).then(l => {\n      l.setMap(null);\n\n      this._layers.delete(layer);\n    });\n  }\n  /**\n   * Creates a Google Maps event listener for the given KmlLayer as an Observable\n   */\n\n\n  createEventObservable(eventName, layer) {\n    return new Observable(observer => {\n      this._layers.get(layer).then(m => {\n        m.addListener(eventName, e => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n}\n\nKmlLayerManager.decorators = [{\n  type: Injectable\n}];\n\nKmlLayerManager.ctorParameters = () => [{\n  type: GoogleMapsAPIWrapper\n}, {\n  type: NgZone\n}];\n/**\n * This class manages Transit and Bicycling Layers for a Google Map instance.\n */\n\n\nclass LayerManager {\n  constructor(_wrapper) {\n    this._wrapper = _wrapper;\n    this._layers = new Map();\n  }\n  /**\n   * Adds a transit layer to a map instance.\n   * @param layer - a TransitLayer object\n   * @param _options - TransitLayerOptions options\n   * @returns void\n   */\n\n\n  addTransitLayer(layer) {\n    const newLayer = this._wrapper.createTransitLayer();\n\n    this._layers.set(layer, newLayer);\n  }\n  /**\n   * Adds a bicycling layer to a map instance.\n   * @param layer - a bicycling layer object\n   * @param _options - BicyclingLayer options\n   * @returns void\n   */\n\n\n  addBicyclingLayer(layer) {\n    const newLayer = this._wrapper.createBicyclingLayer();\n\n    this._layers.set(layer, newLayer);\n  }\n  /**\n   * Deletes a map layer\n   * @param layer - the layer to delete\n   */\n\n\n  deleteLayer(layer) {\n    return this._layers.get(layer).then(currentLayer => {\n      currentLayer.setMap(null);\n\n      this._layers.delete(layer);\n    });\n  }\n\n}\n\nLayerManager.decorators = [{\n  type: Injectable\n}];\n\nLayerManager.ctorParameters = () => [{\n  type: GoogleMapsAPIWrapper\n}];\n/**\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\n * Tag.\n * It's important that the Google Maps API script gets loaded first on the page.\n */\n\n\nclass NoOpMapsAPILoader {\n  load() {\n    if (!window.google || !window.google.maps) {\n      throw new Error('Google Maps API not loaded on page. Make sure window.google.maps is available!');\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nfunction createMVCEventObservable(array) {\n  const eventNames = ['insert_at', 'remove_at', 'set_at'];\n  return fromEventPattern(handler => eventNames.map(eventName => array.addListener(eventName, (index, previous) => handler.apply(array, [{\n    newArr: array.getArray(),\n    eventName,\n    index,\n    previous\n  }]))), (_handler, evListeners) => evListeners.forEach(evListener => evListener.remove()));\n}\n\nclass MvcArrayMock {\n  constructor() {\n    this.vals = [];\n    this.listeners = {\n      remove_at: [],\n      insert_at: [],\n      set_at: []\n    };\n  }\n\n  clear() {\n    for (let i = this.vals.length - 1; i >= 0; i--) {\n      this.removeAt(i);\n    }\n  }\n\n  getArray() {\n    return [...this.vals];\n  }\n\n  getAt(i) {\n    return this.vals[i];\n  }\n\n  getLength() {\n    return this.vals.length;\n  }\n\n  insertAt(i, elem) {\n    this.vals.splice(i, 0, elem);\n    this.listeners.insert_at.forEach(listener => listener(i));\n  }\n\n  pop() {\n    const deleted = this.vals.pop();\n    this.listeners.remove_at.forEach(listener => listener(this.vals.length, deleted));\n    return deleted;\n  }\n\n  push(elem) {\n    this.vals.push(elem);\n    this.listeners.insert_at.forEach(listener => listener(this.vals.length - 1));\n    return this.vals.length;\n  }\n\n  removeAt(i) {\n    const deleted = this.vals.splice(i, 1)[0];\n    this.listeners.remove_at.forEach(listener => listener(i, deleted));\n    return deleted;\n  }\n\n  setAt(i, elem) {\n    const deleted = this.vals[i];\n    this.vals[i] = elem;\n    this.listeners.set_at.forEach(listener => listener(i, deleted));\n  }\n\n  forEach(callback) {\n    this.vals.forEach(callback);\n  }\n\n  addListener(eventName, handler) {\n    const listenerArr = this.listeners[eventName];\n    listenerArr.push(handler);\n    return {\n      remove: () => {\n        listenerArr.splice(listenerArr.indexOf(handler), 1);\n      }\n    };\n  }\n\n  bindTo() {\n    throw new Error('Not implemented');\n  }\n\n  changed() {\n    throw new Error('Not implemented');\n  }\n\n  get() {\n    throw new Error('Not implemented');\n  }\n\n  notify() {\n    throw new Error('Not implemented');\n  }\n\n  set() {\n    throw new Error('Not implemented');\n  }\n\n  setValues() {\n    throw new Error('Not implemented');\n  }\n\n  unbind() {\n    throw new Error('Not implemented');\n  }\n\n  unbindAll() {\n    throw new Error('Not implemented');\n  }\n\n}\n\nclass PolygonManager {\n  constructor(_mapsWrapper, _zone) {\n    this._mapsWrapper = _mapsWrapper;\n    this._zone = _zone;\n    this._polygons = new Map();\n  }\n\n  addPolygon(path) {\n    const polygonPromise = this._mapsWrapper.createPolygon({\n      clickable: path.clickable,\n      draggable: path.draggable,\n      editable: path.editable,\n      fillColor: path.fillColor,\n      fillOpacity: path.fillOpacity,\n      geodesic: path.geodesic,\n      paths: path.paths,\n      strokeColor: path.strokeColor,\n      strokeOpacity: path.strokeOpacity,\n      strokeWeight: path.strokeWeight,\n      visible: path.visible,\n      zIndex: path.zIndex\n    });\n\n    this._polygons.set(path, polygonPromise);\n  }\n\n  updatePolygon(polygon) {\n    const m = this._polygons.get(polygon);\n\n    if (m == null) {\n      return Promise.resolve();\n    }\n\n    return m.then(l => this._zone.run(() => {\n      l.setPaths(polygon.paths);\n    }));\n  }\n\n  setPolygonOptions(path, options) {\n    return this._polygons.get(path).then(l => {\n      l.setOptions(options);\n    });\n  }\n\n  deletePolygon(paths) {\n    const m = this._polygons.get(paths);\n\n    if (m == null) {\n      return Promise.resolve();\n    }\n\n    return m.then(l => {\n      return this._zone.run(() => {\n        l.setMap(null);\n\n        this._polygons.delete(paths);\n      });\n    });\n  }\n\n  getPath(polygonDirective) {\n    return this._polygons.get(polygonDirective).then(polygon => polygon.getPath().getArray());\n  }\n\n  getPaths(polygonDirective) {\n    return this._polygons.get(polygonDirective).then(polygon => polygon.getPaths().getArray().map(p => p.getArray()));\n  }\n\n  createEventObservable(eventName, path) {\n    return new Observable(observer => {\n      this._polygons.get(path).then(l => {\n        l.addListener(eventName, e => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n  createPathEventObservable(agmPolygon) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const polygon = yield this._polygons.get(agmPolygon);\n      const paths = polygon.getPaths();\n      const pathsChanges$ = createMVCEventObservable(paths);\n      return pathsChanges$.pipe(startWith({\n        newArr: paths.getArray()\n      }), // in order to subscribe to them all\n      switchMap(parentMVEvent => merge(... // rest parameter\n      parentMVEvent.newArr.map((chMVC, index) => createMVCEventObservable(chMVC).pipe(map(chMVCEvent => ({\n        parentMVEvent,\n        chMVCEvent,\n        pathIndex: index\n      }))))).pipe( // start the merged ob with an event signinifing change to parent\n      startWith({\n        parentMVEvent,\n        chMVCEvent: null,\n        pathIndex: null\n      }))), skip(1), // skip the manually added event\n      map(({\n        parentMVEvent,\n        chMVCEvent,\n        pathIndex\n      }) => {\n        let retVal;\n\n        if (!chMVCEvent) {\n          retVal = {\n            newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n            eventName: parentMVEvent.eventName,\n            index: parentMVEvent.index\n          };\n\n          if (parentMVEvent.previous) {\n            retVal.previous = parentMVEvent.previous.getArray();\n          }\n        } else {\n          retVal = {\n            newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n            pathIndex,\n            eventName: chMVCEvent.eventName,\n            index: chMVCEvent.index\n          };\n\n          if (chMVCEvent.previous) {\n            retVal.previous = chMVCEvent.previous;\n          }\n        }\n\n        return retVal;\n      }));\n    });\n  }\n\n}\n\nPolygonManager.decorators = [{\n  type: Injectable\n}];\n\nPolygonManager.ctorParameters = () => [{\n  type: GoogleMapsAPIWrapper\n}, {\n  type: NgZone\n}];\n\nclass PolylineManager {\n  constructor(_mapsWrapper, _zone) {\n    this._mapsWrapper = _mapsWrapper;\n    this._zone = _zone;\n    this._polylines = new Map();\n  }\n\n  static _convertPoints(line) {\n    const path = line._getPoints().map(point => {\n      return {\n        lat: point.latitude,\n        lng: point.longitude\n      };\n    });\n\n    return path;\n  }\n\n  static _convertPath(path) {\n    const symbolPath = google.maps.SymbolPath[path];\n\n    if (typeof symbolPath === 'number') {\n      return symbolPath;\n    } else {\n      return path;\n    }\n  }\n\n  static _convertIcons(line) {\n    const icons = line._getIcons().map(agmIcon => ({\n      fixedRotation: agmIcon.fixedRotation,\n      offset: agmIcon.offset,\n      repeat: agmIcon.repeat,\n      icon: {\n        anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),\n        fillColor: agmIcon.fillColor,\n        fillOpacity: agmIcon.fillOpacity,\n        path: PolylineManager._convertPath(agmIcon.path),\n        rotation: agmIcon.rotation,\n        scale: agmIcon.scale,\n        strokeColor: agmIcon.strokeColor,\n        strokeOpacity: agmIcon.strokeOpacity,\n        strokeWeight: agmIcon.strokeWeight\n      }\n    })); // prune undefineds;\n\n\n    icons.forEach(icon => {\n      Object.entries(icon).forEach(([key, val]) => {\n        if (typeof val === 'undefined') {\n          delete icon[key];\n        }\n      });\n\n      if (typeof icon.icon.anchor.x === 'undefined' || typeof icon.icon.anchor.y === 'undefined') {\n        delete icon.icon.anchor;\n      }\n    });\n    return icons;\n  }\n\n  addPolyline(line) {\n    const polylinePromise = this._mapsWrapper.getNativeMap().then(() => [PolylineManager._convertPoints(line), PolylineManager._convertIcons(line)]).then(([path, icons]) => this._mapsWrapper.createPolyline({\n      clickable: line.clickable,\n      draggable: line.draggable,\n      editable: line.editable,\n      geodesic: line.geodesic,\n      strokeColor: line.strokeColor,\n      strokeOpacity: line.strokeOpacity,\n      strokeWeight: line.strokeWeight,\n      visible: line.visible,\n      zIndex: line.zIndex,\n      path,\n      icons\n    }));\n\n    this._polylines.set(line, polylinePromise);\n  }\n\n  updatePolylinePoints(line) {\n    const path = PolylineManager._convertPoints(line);\n\n    const m = this._polylines.get(line);\n\n    if (m == null) {\n      return Promise.resolve();\n    }\n\n    return m.then(l => this._zone.run(() => l.setPath(path)));\n  }\n\n  updateIconSequences(line) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._mapsWrapper.getNativeMap();\n\n      const icons = PolylineManager._convertIcons(line);\n\n      const m = this._polylines.get(line);\n\n      if (m == null) {\n        return;\n      }\n\n      return m.then(l => this._zone.run(() => l.setOptions({\n        icons\n      })));\n    });\n  }\n\n  setPolylineOptions(line, options) {\n    return this._polylines.get(line).then(l => {\n      l.setOptions(options);\n    });\n  }\n\n  deletePolyline(line) {\n    const m = this._polylines.get(line);\n\n    if (m == null) {\n      return Promise.resolve();\n    }\n\n    return m.then(l => {\n      return this._zone.run(() => {\n        l.setMap(null);\n\n        this._polylines.delete(line);\n      });\n    });\n  }\n\n  getMVCPath(agmPolyline) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const polyline = yield this._polylines.get(agmPolyline);\n      return polyline.getPath();\n    });\n  }\n\n  getPath(agmPolyline) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return (yield this.getMVCPath(agmPolyline)).getArray();\n    });\n  }\n\n  createEventObservable(eventName, line) {\n    return new Observable(observer => {\n      this._polylines.get(line).then(l => {\n        l.addListener(eventName, e => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n  createPathEventObservable(line) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const mvcPath = yield this.getMVCPath(line);\n      return createMVCEventObservable(mvcPath);\n    });\n  }\n\n}\n\nPolylineManager.decorators = [{\n  type: Injectable\n}];\n\nPolylineManager.ctorParameters = () => [{\n  type: GoogleMapsAPIWrapper\n}, {\n  type: NgZone\n}];\n\nclass RectangleManager {\n  constructor(_apiWrapper, _zone) {\n    this._apiWrapper = _apiWrapper;\n    this._zone = _zone;\n    this._rectangles = new Map();\n  }\n\n  addRectangle(rectangle) {\n    this._apiWrapper.getNativeMap().then(() => this._rectangles.set(rectangle, this._apiWrapper.createRectangle({\n      bounds: {\n        north: rectangle.north,\n        east: rectangle.east,\n        south: rectangle.south,\n        west: rectangle.west\n      },\n      clickable: rectangle.clickable,\n      draggable: rectangle.draggable,\n      editable: rectangle.editable,\n      fillColor: rectangle.fillColor,\n      fillOpacity: rectangle.fillOpacity,\n      strokeColor: rectangle.strokeColor,\n      strokeOpacity: rectangle.strokeOpacity,\n      strokePosition: google.maps.StrokePosition[rectangle.strokePosition],\n      strokeWeight: rectangle.strokeWeight,\n      visible: rectangle.visible,\n      zIndex: rectangle.zIndex\n    })));\n  }\n  /**\n   * Removes the given rectangle from the map.\n   */\n\n\n  removeRectangle(rectangle) {\n    return this._rectangles.get(rectangle).then(r => {\n      r.setMap(null);\n\n      this._rectangles.delete(rectangle);\n    });\n  }\n\n  setOptions(rectangle, options) {\n    return this._rectangles.get(rectangle).then(r => {\n      const actualStrokePosition = options.strokePosition;\n      options.strokePosition = google.maps.StrokePosition[actualStrokePosition];\n      r.setOptions(options);\n    });\n  }\n\n  getBounds(rectangle) {\n    return this._rectangles.get(rectangle).then(r => r.getBounds());\n  }\n\n  setBounds(rectangle) {\n    return this._rectangles.get(rectangle).then(r => {\n      return r.setBounds({\n        north: rectangle.north,\n        east: rectangle.east,\n        south: rectangle.south,\n        west: rectangle.west\n      });\n    });\n  }\n\n  setEditable(rectangle) {\n    return this._rectangles.get(rectangle).then(r => {\n      return r.setEditable(rectangle.editable);\n    });\n  }\n\n  setDraggable(rectangle) {\n    return this._rectangles.get(rectangle).then(r => {\n      return r.setDraggable(rectangle.draggable);\n    });\n  }\n\n  setVisible(rectangle) {\n    return this._rectangles.get(rectangle).then(r => {\n      return r.setVisible(rectangle.visible);\n    });\n  }\n\n  createEventObservable(eventName, rectangle) {\n    return new Observable(subsrciber => {\n      let listener = null;\n\n      this._rectangles.get(rectangle).then(r => {\n        listener = r.addListener(eventName, e => this._zone.run(() => subsrciber.next(e)));\n      });\n\n      return () => {\n        if (listener !== null) {\n          listener.remove();\n        }\n      };\n    });\n  }\n\n}\n\nRectangleManager.decorators = [{\n  type: Injectable\n}];\n\nRectangleManager.ctorParameters = () => [{\n  type: GoogleMapsAPIWrapper\n}, {\n  type: NgZone\n}];\n\nlet layerId = 0;\n/*\n * This directive adds a bicycling layer to a google map instance\n * <agm-bicycling-layer [visible]=\"true|false\"> <agm-bicycling-layer>\n * */\n\nclass AgmBicyclingLayer {\n  constructor(_manager) {\n    this._manager = _manager;\n    this._addedToManager = false;\n    this._id = (layerId++).toString();\n    /**\n     * Hide/show bicycling layer\n     */\n\n    this.visible = true;\n  }\n\n  ngOnInit() {\n    if (this._addedToManager) {\n      return;\n    }\n\n    this._manager.addBicyclingLayer(this);\n\n    this._addedToManager = true;\n  }\n  /** @internal */\n\n\n  id() {\n    return this._id;\n  }\n  /** @internal */\n\n\n  toString() {\n    return `AgmBicyclingLayer-${this._id.toString()}`;\n  }\n  /** @internal */\n\n\n  ngOnDestroy() {\n    this._manager.deleteLayer(this);\n  }\n\n}\n\nAgmBicyclingLayer.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-bicycling-layer'\n  }]\n}];\n\nAgmBicyclingLayer.ctorParameters = () => [{\n  type: LayerManager\n}];\n\nAgmBicyclingLayer.propDecorators = {\n  visible: [{\n    type: Input\n  }]\n};\n\nclass AgmCircle {\n  constructor(_manager) {\n    this._manager = _manager;\n    /**\n     * Indicates whether this Circle handles mouse events. Defaults to true.\n     */\n\n    this.clickable = true;\n    /**\n     * If set to true, the user can drag this circle over the map. Defaults to false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If set to true, the user can edit this circle by dragging the control points shown at\n     * the center and around the circumference of the circle. Defaults to false.\n     */\n\n    this.editable = false;\n    /**\n     * The radius in meters on the Earth's surface.\n     */\n\n    this.radius = 0;\n    /**\n     * The stroke position. Defaults to CENTER.\n     * This property is not supported on Internet Explorer 8 and earlier.\n     */\n\n    this.strokePosition = 'CENTER';\n    /**\n     * The stroke width in pixels.\n     */\n\n    this.strokeWeight = 0;\n    /**\n     * Whether this circle is visible on the map. Defaults to true.\n     */\n\n    this.visible = true;\n    /**\n     * This event is fired when the circle's center is changed.\n     */\n\n    this.centerChange = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the circle.\n     */\n\n    this.circleClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the circle.\n     */\n\n    this.circleDblClick = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the circle.\n     */\n    // tslint:disable-next-line: no-output-native\n\n    this.drag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the circle.\n     */\n\n    this.dragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the circle.\n     */\n\n    this.dragStart = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousedown event is fired on the circle.\n     */\n\n    this.mouseDown = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousemove event is fired on the circle.\n     */\n\n    this.mouseMove = new EventEmitter();\n    /**\n     * This event is fired on circle mouseout.\n     */\n\n    this.mouseOut = new EventEmitter();\n    /**\n     * This event is fired on circle mouseover.\n     */\n\n    this.mouseOver = new EventEmitter();\n    /**\n     * This event is fired when the DOM mouseup event is fired on the circle.\n     */\n\n    this.mouseUp = new EventEmitter();\n    /**\n     * This event is fired when the circle's radius is changed.\n     */\n\n    this.radiusChange = new EventEmitter();\n    /**\n     * This event is fired when the circle is right-clicked on.\n     */\n\n    this.rightClick = new EventEmitter();\n    this._circleAddedToManager = false;\n    this._eventSubscriptions = [];\n  }\n  /** @internal */\n\n\n  ngOnInit() {\n    this._manager.addCircle(this);\n\n    this._circleAddedToManager = true;\n\n    this._registerEventListeners();\n  }\n  /** @internal */\n\n\n  ngOnChanges(changes) {\n    if (!this._circleAddedToManager) {\n      return;\n    } // tslint:disable: no-string-literal\n\n\n    if (changes['latitude'] || changes['longitude']) {\n      this._manager.setCenter(this);\n    }\n\n    if (changes['editable']) {\n      this._manager.setEditable(this);\n    }\n\n    if (changes['draggable']) {\n      this._manager.setDraggable(this);\n    }\n\n    if (changes['visible']) {\n      this._manager.setVisible(this);\n    }\n\n    if (changes['radius']) {\n      this._manager.setRadius(this);\n    } // tslint:enable: no-string-literal\n\n\n    this._updateCircleOptionsChanges(changes);\n  }\n\n  _updateCircleOptionsChanges(changes) {\n    const options = {};\n    const optionKeys = Object.keys(changes).filter(k => AgmCircle._mapOptions.indexOf(k) !== -1);\n    optionKeys.forEach(k => {\n      options[k] = changes[k].currentValue;\n    });\n\n    if (optionKeys.length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  _registerEventListeners() {\n    const events = new Map();\n    events.set('center_changed', this.centerChange);\n    events.set('click', this.circleClick);\n    events.set('dblclick', this.circleDblClick);\n    events.set('drag', this.drag);\n    events.set('dragend', this.dragEnd);\n    events.set('dragstart', this.dragStart);\n    events.set('mousedown', this.mouseDown);\n    events.set('mousemove', this.mouseMove);\n    events.set('mouseout', this.mouseOut);\n    events.set('mouseover', this.mouseOver);\n    events.set('mouseup', this.mouseUp);\n    events.set('radius_changed', this.radiusChange);\n    events.set('rightclick', this.rightClick);\n    events.forEach((eventEmitter, eventName) => {\n      this._eventSubscriptions.push(this._manager.createEventObservable(eventName, this).subscribe(value => {\n        switch (eventName) {\n          case 'radius_changed':\n            this._manager.getRadius(this).then(radius => eventEmitter.emit(radius));\n\n            break;\n\n          case 'center_changed':\n            this._manager.getCenter(this).then(center => eventEmitter.emit({\n              lat: center.lat(),\n              lng: center.lng()\n            }));\n\n            break;\n\n          default:\n            eventEmitter.emit(value);\n        }\n      }));\n    });\n  }\n  /** @internal */\n\n\n  ngOnDestroy() {\n    this._eventSubscriptions.forEach(s => s.unsubscribe());\n\n    this._eventSubscriptions = null;\n\n    this._manager.removeCircle(this);\n  }\n  /**\n   * Gets the LatLngBounds of this Circle.\n   */\n\n\n  getBounds() {\n    return this._manager.getBounds(this);\n  }\n\n  getCenter() {\n    return this._manager.getCenter(this);\n  }\n\n}\n\nAgmCircle._mapOptions = ['fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'clickable'];\nAgmCircle.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-circle'\n  }]\n}];\n\nAgmCircle.ctorParameters = () => [{\n  type: CircleManager\n}];\n\nAgmCircle.propDecorators = {\n  latitude: [{\n    type: Input\n  }],\n  longitude: [{\n    type: Input\n  }],\n  clickable: [{\n    type: Input\n  }],\n  draggable: [{\n    type: Input,\n    args: ['circleDraggable']\n  }],\n  editable: [{\n    type: Input\n  }],\n  fillColor: [{\n    type: Input\n  }],\n  fillOpacity: [{\n    type: Input\n  }],\n  radius: [{\n    type: Input\n  }],\n  strokeColor: [{\n    type: Input\n  }],\n  strokeOpacity: [{\n    type: Input\n  }],\n  strokePosition: [{\n    type: Input\n  }],\n  strokeWeight: [{\n    type: Input\n  }],\n  visible: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  centerChange: [{\n    type: Output\n  }],\n  circleClick: [{\n    type: Output\n  }],\n  circleDblClick: [{\n    type: Output\n  }],\n  drag: [{\n    type: Output\n  }],\n  dragEnd: [{\n    type: Output\n  }],\n  dragStart: [{\n    type: Output\n  }],\n  mouseDown: [{\n    type: Output\n  }],\n  mouseMove: [{\n    type: Output\n  }],\n  mouseOut: [{\n    type: Output\n  }],\n  mouseOver: [{\n    type: Output\n  }],\n  mouseUp: [{\n    type: Output\n  }],\n  radiusChange: [{\n    type: Output\n  }],\n  rightClick: [{\n    type: Output\n  }]\n};\nlet layerId$1 = 0;\n/**\n * AgmDataLayer enables the user to add data layers to the map.\n *\n * ### Example\n * ```typescript\n * import { Component } from 'angular2/core';\n * import { AgmMap, AgmDataLayer } from\n * 'angular-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [AgmMap, AgmDataLayer],\n *  styles: [`\n *    .agm-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\n * \t  </agm-data-layer>\n * </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = -25.274449;\n *   lng: number = 133.775060;\n *   zoom: number = 5;\n *\n * clicked(clickEvent) {\n *    console.log(clickEvent);\n *  }\n *\n *  styleFunc(feature) {\n *    return ({\n *      clickable: false,\n *      fillColor: feature.getProperty('color'),\n *      strokeWeight: 1\n *    });\n *  }\n *\n *  geoJsonObject: Object = {\n *    \"type\": \"FeatureCollection\",\n *    \"features\": [\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"G\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"71\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\n *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\n *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\n *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\n *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\n *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\n *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\n *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"red\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\n *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\n *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\n *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\n *            ],\n *            [\n *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\n *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"yellow\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\n *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\n *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\n *              [132.71, -25.64], [131.87, -25.76]\n *            ],\n *            [\n *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\n *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"g\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"103\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\n *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\n *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\n *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\n *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\n *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\n *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\n *            ],\n *            [\n *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\n *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"l\",\n *          \"color\": \"green\",\n *          \"rank\": \"12\",\n *          \"ascii\": \"108\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"e\",\n *          \"color\": \"red\",\n *          \"rank\": \"5\",\n *          \"ascii\": \"101\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\n *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\n *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\n *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\n *              [144.31, -28.26], [144.14, -27.41]\n *            ],\n *            [\n *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\n *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\n *            ]\n *          ]\n *        }\n *      }\n *    ]\n *  };\n * }\n * ```\n */\n\nclass AgmDataLayer {\n  constructor(_manager) {\n    this._manager = _manager;\n    this._addedToManager = false;\n    this._id = (layerId$1++).toString();\n    this._subscriptions = [];\n    /**\n     * This event is fired when a feature in the layer is clicked.\n     */\n\n    this.layerClick = new EventEmitter();\n    /**\n     * The geoJson to be displayed\n     */\n\n    this.geoJson = null;\n  }\n\n  ngOnInit() {\n    if (this._addedToManager) {\n      return;\n    }\n\n    this._manager.addDataLayer(this);\n\n    this._addedToManager = true;\n\n    this._addEventListeners();\n  }\n\n  _addEventListeners() {\n    const listeners = [{\n      name: 'click',\n      handler: ev => this.layerClick.emit(ev)\n    }];\n    listeners.forEach(obj => {\n      const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n\n      this._subscriptions.push(os);\n    });\n  }\n  /** @internal */\n\n\n  id() {\n    return this._id;\n  }\n  /** @internal */\n\n\n  toString() {\n    return `AgmDataLayer-${this._id.toString()}`;\n  }\n  /** @internal */\n\n\n  ngOnDestroy() {\n    this._manager.deleteDataLayer(this); // unsubscribe all registered observable subscriptions\n\n\n    this._subscriptions.forEach(s => s.unsubscribe());\n  }\n  /** @internal */\n\n\n  ngOnChanges(changes) {\n    if (!this._addedToManager) {\n      return;\n    } // tslint:disable-next-line: no-string-literal\n\n\n    const geoJsonChange = changes['geoJson'];\n\n    if (geoJsonChange) {\n      this._manager.updateGeoJson(this, geoJsonChange.currentValue);\n    }\n\n    const dataOptions = AgmDataLayer._dataOptionsAttributes.reduce((options, k) => options[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : this[k], {});\n\n    this._manager.setDataOptions(this, dataOptions);\n  }\n\n}\n\nAgmDataLayer._dataOptionsAttributes = ['style'];\nAgmDataLayer.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-data-layer'\n  }]\n}];\n\nAgmDataLayer.ctorParameters = () => [{\n  type: DataLayerManager\n}];\n\nAgmDataLayer.propDecorators = {\n  layerClick: [{\n    type: Output\n  }],\n  geoJson: [{\n    type: Input\n  }],\n  style: [{\n    type: Input\n  }]\n};\n/**\n * Adds the given directive to the auto fit bounds feature when the value is true.\n * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\n * @example\n * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\n */\n\nclass AgmFitBounds {\n  constructor(_fitBoundsAccessor, _fitBoundsService) {\n    this._fitBoundsAccessor = _fitBoundsAccessor;\n    this._fitBoundsService = _fitBoundsService;\n    /**\n     * If the value is true, the element gets added to the bounds of the map.\n     * Default: true.\n     */\n\n    this.agmFitBounds = true;\n    this._destroyed$ = new Subject();\n    this._latestFitBoundsDetails = null;\n  }\n  /**\n   * @internal\n   */\n\n\n  ngOnChanges() {\n    this._updateBounds();\n  }\n  /**\n   * @internal\n   */\n\n\n  ngOnInit() {\n    this._fitBoundsAccessor.getFitBoundsDetails$().pipe(distinctUntilChanged((x, y) => x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng), takeUntil(this._destroyed$)).subscribe(details => this._updateBounds(details));\n  }\n  /*\n   Either the location changed, or visible status changed.\n   Possible state changes are\n   invisible -> visible\n   visible -> invisible\n   visible -> visible (new location)\n  */\n\n\n  _updateBounds(newFitBoundsDetails) {\n    // either visibility will change, or location, so remove the old one anyway\n    if (this._latestFitBoundsDetails) {\n      this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng); // don't set latestFitBoundsDetails to null, because we can toggle visibility from\n      // true -> false -> true, in which case we still need old value cached here\n\n    }\n\n    if (newFitBoundsDetails) {\n      this._latestFitBoundsDetails = newFitBoundsDetails;\n    }\n\n    if (!this._latestFitBoundsDetails) {\n      return;\n    }\n\n    if (this.agmFitBounds === true) {\n      this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  ngOnDestroy() {\n    this._destroyed$.next();\n\n    this._destroyed$.complete();\n\n    if (this._latestFitBoundsDetails !== null) {\n      this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n    }\n  }\n\n}\n\nAgmFitBounds.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[agmFitBounds]'\n  }]\n}];\n\nAgmFitBounds.ctorParameters = () => [{\n  type: FitBoundsAccessor,\n  decorators: [{\n    type: Self\n  }]\n}, {\n  type: FitBoundsService\n}];\n\nAgmFitBounds.propDecorators = {\n  agmFitBounds: [{\n    type: Input\n  }]\n};\nlet infoWindowId = 0;\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\nclass AgmInfoWindow {\n  constructor(_infoWindowManager, _el) {\n    this._infoWindowManager = _infoWindowManager;\n    this._el = _el;\n    /**\n     * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n     */\n\n    this.isOpen = false;\n    /**\n     * Emits an event when the info window is closed.\n     */\n\n    this.infoWindowClose = new EventEmitter();\n    this._infoWindowAddedToManager = false;\n    this._id = (infoWindowId++).toString();\n  }\n\n  ngOnInit() {\n    this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n\n    this._infoWindowManager.addInfoWindow(this);\n\n    this._infoWindowAddedToManager = true;\n\n    this._updateOpenState();\n\n    this._registerEventListeners();\n  }\n  /** @internal */\n\n\n  ngOnChanges(changes) {\n    if (!this._infoWindowAddedToManager) {\n      return;\n    } // tslint:disable: no-string-literal\n\n\n    if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' && typeof this.longitude === 'number') {\n      this._infoWindowManager.setPosition(this);\n    }\n\n    if (changes['zIndex']) {\n      this._infoWindowManager.setZIndex(this);\n    }\n\n    if (changes['isOpen']) {\n      this._updateOpenState();\n    }\n\n    this._setInfoWindowOptions(changes);\n  } // tslint:enable: no-string-literal\n\n\n  _registerEventListeners() {\n    this._infoWindowManager.createEventObservable('closeclick', this).subscribe(() => {\n      this.isOpen = false;\n      this.infoWindowClose.emit();\n    });\n  }\n\n  _updateOpenState() {\n    this.isOpen ? this.open() : this.close();\n  }\n\n  _setInfoWindowOptions(changes) {\n    const options = {};\n    const optionKeys = Object.keys(changes).filter(k => AgmInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1);\n    optionKeys.forEach(k => {\n      options[k] = changes[k].currentValue;\n    });\n\n    this._infoWindowManager.setOptions(this, options);\n  }\n  /**\n   * Opens the info window.\n   */\n\n\n  open() {\n    return this._infoWindowManager.open(this);\n  }\n  /**\n   * Closes the info window.\n   */\n\n\n  close() {\n    return this._infoWindowManager.close(this).then(() => {\n      this.infoWindowClose.emit();\n    });\n  }\n  /** @internal */\n\n\n  id() {\n    return this._id;\n  }\n  /** @internal */\n\n\n  toString() {\n    return 'AgmInfoWindow-' + this._id.toString();\n  }\n  /** @internal */\n\n\n  ngOnDestroy() {\n    this._infoWindowManager.deleteInfoWindow(this);\n  }\n\n}\n\nAgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];\nAgmInfoWindow.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'agm-info-window',\n    template: `<div class='agm-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  `\n  }]\n}];\n\nAgmInfoWindow.ctorParameters = () => [{\n  type: InfoWindowManager\n}, {\n  type: ElementRef\n}];\n\nAgmInfoWindow.propDecorators = {\n  latitude: [{\n    type: Input\n  }],\n  longitude: [{\n    type: Input\n  }],\n  disableAutoPan: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  maxWidth: [{\n    type: Input\n  }],\n  isOpen: [{\n    type: Input\n  }],\n  infoWindowClose: [{\n    type: Output\n  }]\n};\nlet layerId$2 = 0;\n\nclass AgmKmlLayer {\n  constructor(_manager) {\n    this._manager = _manager;\n    this._addedToManager = false;\n    this._id = (layerId$2++).toString();\n    this._subscriptions = [];\n    /**\n     * If true, the layer receives mouse events. Default value is true.\n     */\n\n    this.clickable = true;\n    /**\n     * By default, the input map is centered and zoomed to the bounding box of the contents of the\n     * layer.\n     * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\n     * were never set.\n     */\n\n    this.preserveViewport = false;\n    /**\n     * Whether to render the screen overlays. Default true.\n     */\n\n    this.screenOverlays = true;\n    /**\n     * Suppress the rendering of info windows when layer features are clicked.\n     */\n\n    this.suppressInfoWindows = false;\n    /**\n     * The URL of the KML document to display.\n     */\n\n    this.url = null;\n    /**\n     * The z-index of the layer.\n     */\n\n    this.zIndex = null;\n    /**\n     * This event is fired when a feature in the layer is clicked.\n     */\n\n    this.layerClick = new EventEmitter();\n    /**\n     * This event is fired when the KML layers default viewport has changed.\n     */\n\n    this.defaultViewportChange = new EventEmitter();\n    /**\n     * This event is fired when the KML layer has finished loading.\n     * At this point it is safe to read the status property to determine if the layer loaded\n     * successfully.\n     */\n\n    this.statusChange = new EventEmitter();\n  }\n\n  ngOnInit() {\n    if (this._addedToManager) {\n      return;\n    }\n\n    this._manager.addKmlLayer(this);\n\n    this._addedToManager = true;\n\n    this._addEventListeners();\n  }\n\n  ngOnChanges(changes) {\n    if (!this._addedToManager) {\n      return;\n    }\n\n    this._updatePolygonOptions(changes);\n  }\n\n  _updatePolygonOptions(changes) {\n    const options = Object.keys(changes).filter(k => AgmKmlLayer._kmlLayerOptions.indexOf(k) !== -1).reduce((obj, k) => {\n      obj[k] = changes[k].currentValue;\n      return obj;\n    }, {});\n\n    if (Object.keys(options).length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  _addEventListeners() {\n    const listeners = [{\n      name: 'click',\n      handler: ev => this.layerClick.emit(ev)\n    }, {\n      name: 'defaultviewport_changed',\n      handler: () => this.defaultViewportChange.emit()\n    }, {\n      name: 'status_changed',\n      handler: () => this.statusChange.emit()\n    }];\n    listeners.forEach(obj => {\n      const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n\n      this._subscriptions.push(os);\n    });\n  }\n  /** @internal */\n\n\n  id() {\n    return this._id;\n  }\n  /** @internal */\n\n\n  toString() {\n    return `AgmKmlLayer-${this._id.toString()}`;\n  }\n  /** @internal */\n\n\n  ngOnDestroy() {\n    this._manager.deleteKmlLayer(this); // unsubscribe all registered observable subscriptions\n\n\n    this._subscriptions.forEach(s => s.unsubscribe());\n  }\n\n}\n\nAgmKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\nAgmKmlLayer.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-kml-layer'\n  }]\n}];\n\nAgmKmlLayer.ctorParameters = () => [{\n  type: KmlLayerManager\n}];\n\nAgmKmlLayer.propDecorators = {\n  clickable: [{\n    type: Input\n  }],\n  preserveViewport: [{\n    type: Input\n  }],\n  screenOverlays: [{\n    type: Input\n  }],\n  suppressInfoWindows: [{\n    type: Input\n  }],\n  url: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  layerClick: [{\n    type: Output\n  }],\n  defaultViewportChange: [{\n    type: Output\n  }],\n  statusChange: [{\n    type: Output\n  }]\n};\n\nclass AgmMapControl {}\n\nAgmMapControl.decorators = [{\n  type: Directive\n}];\nAgmMapControl.propDecorators = {\n  position: [{\n    type: Input\n  }]\n};\n\nclass AgmFullscreenControl extends AgmMapControl {\n  getOptions() {\n    return {\n      fullscreenControl: true,\n      fullscreenControlOptions: {\n        position: this.position && google.maps.ControlPosition[this.position]\n      }\n    };\n  }\n\n}\n\nAgmFullscreenControl.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-map agm-fullscreen-control',\n    providers: [{\n      provide: AgmMapControl,\n      useExisting: AgmFullscreenControl\n    }]\n  }]\n}];\n\nclass AgmMapTypeControl extends AgmMapControl {\n  getOptions() {\n    return {\n      mapTypeControl: true,\n      mapTypeControlOptions: {\n        position: this.position && google.maps.ControlPosition[this.position],\n        style: this.style && google.maps.MapTypeControlStyle[this.style],\n        mapTypeIds: this.mapTypeIds && this.mapTypeIds.map(mapTypeId => google.maps.MapTypeId[mapTypeId])\n      }\n    };\n  }\n\n}\n\nAgmMapTypeControl.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-map agm-map-type-control',\n    providers: [{\n      provide: AgmMapControl,\n      useExisting: AgmMapTypeControl\n    }]\n  }]\n}];\nAgmMapTypeControl.propDecorators = {\n  mapTypeIds: [{\n    type: Input\n  }],\n  style: [{\n    type: Input\n  }]\n};\n\nclass AgmPanControl extends AgmMapControl {\n  getOptions() {\n    return {\n      panControl: true,\n      panControlOptions: {\n        position: this.position && google.maps.ControlPosition[this.position]\n      }\n    };\n  }\n\n}\n\nAgmPanControl.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-map agm-pan-control',\n    providers: [{\n      provide: AgmMapControl,\n      useExisting: AgmPanControl\n    }]\n  }]\n}];\n\nclass AgmRotateControl extends AgmMapControl {\n  getOptions() {\n    return {\n      rotateControl: true,\n      rotateControlOptions: {\n        position: this.position && google.maps.ControlPosition[this.position]\n      }\n    };\n  }\n\n}\n\nAgmRotateControl.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-map agm-rotate-control',\n    providers: [{\n      provide: AgmMapControl,\n      useExisting: AgmRotateControl\n    }]\n  }]\n}];\n\nclass AgmScaleControl extends AgmMapControl {\n  getOptions() {\n    return {\n      scaleControl: true\n    };\n  }\n\n}\n\nAgmScaleControl.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-map agm-scale-control',\n    providers: [{\n      provide: AgmMapControl,\n      useExisting: AgmScaleControl\n    }]\n  }]\n}];\n\nclass AgmStreetViewControl extends AgmMapControl {\n  getOptions() {\n    return {\n      streetViewControl: true,\n      streetViewControlOptions: {\n        position: this.position && google.maps.ControlPosition[this.position]\n      }\n    };\n  }\n\n}\n\nAgmStreetViewControl.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-map agm-street-view-control',\n    providers: [{\n      provide: AgmMapControl,\n      useExisting: AgmStreetViewControl\n    }]\n  }]\n}];\n\nclass AgmZoomControl extends AgmMapControl {\n  getOptions() {\n    return {\n      zoomControl: true,\n      zoomControlOptions: {\n        position: this.position && google.maps.ControlPosition[this.position],\n        style: this.style && google.maps.ZoomControlStyle[this.style]\n      }\n    };\n  }\n\n}\n\nAgmZoomControl.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-map agm-zoom-control',\n    providers: [{\n      provide: AgmMapControl,\n      useExisting: AgmZoomControl\n    }]\n  }]\n}];\nAgmZoomControl.propDecorators = {\n  style: [{\n    type: Input\n  }]\n};\n/**\n * AgmMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the\n * element `agm-map`.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\nclass AgmMap {\n  constructor(_elem, _mapsWrapper, // tslint:disable-next-line: ban-types\n  _platformId, _fitBoundsService, _zone) {\n    this._elem = _elem;\n    this._mapsWrapper = _mapsWrapper;\n    this._platformId = _platformId;\n    this._fitBoundsService = _fitBoundsService;\n    this._zone = _zone;\n    /**\n     * The longitude that defines the center of the map.\n     */\n\n    this.longitude = 0;\n    /**\n     * The latitude that defines the center of the map.\n     */\n\n    this.latitude = 0;\n    /**\n     * The zoom level of the map. The default zoom level is 8.\n     */\n\n    this.zoom = 8;\n    /**\n     * Enables/disables if map is draggable.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = true;\n    /**\n     * Enables/disables zoom and center on double click. Enabled by default.\n     */\n\n    this.disableDoubleClickZoom = false;\n    /**\n     * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n     * value cannot get updated.\n     */\n\n    this.disableDefaultUI = false;\n    /**\n     * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n     */\n\n    this.scrollwheel = true;\n    /**\n     * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n     * enabled by default.\n     */\n\n    this.keyboardShortcuts = true;\n    /**\n     * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n     * modes, these styles will only apply to labels and geometry.\n     */\n\n    this.styles = [];\n    /**\n     * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n     * used to\n     * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n     */\n\n    this.usePanning = false;\n    /**\n     * Sets the viewport to contain the given bounds.\n     * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\n     */\n\n    this.fitBounds = false;\n    /**\n     * The map mapTypeId. Defaults to 'roadmap'.\n     */\n\n    this.mapTypeId = 'ROADMAP';\n    /**\n     * When false, map icons are not clickable. A map icon represents a point of interest,\n     * also known as a POI. By default map icons are clickable.\n     */\n\n    this.clickableIcons = true;\n    /**\n     * A map icon represents a point of interest, also known as a POI.\n     * When map icons are clickable by default, an info window is displayed.\n     * When this property is set to false, the info window will not be shown but the click event\n     * will still fire\n     */\n\n    this.showDefaultInfoWindow = true;\n    /**\n     * This setting controls how gestures on the map are handled.\n     * Allowed values:\n     * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n     * - 'greedy'      (All touch gestures pan or zoom the map.)\n     * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n     * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n     */\n\n    this.gestureHandling = 'auto';\n    /**\n     * Controls the automatic switching behavior for the angle of incidence of\n     * the map. The only allowed values are 0 and 45. The value 0 causes the map\n     * to always use a 0° overhead view regardless of the zoom level and\n     * viewport. The value 45 causes the tilt angle to automatically switch to\n     * 45 whenever 45° imagery is available for the current zoom level and\n     * viewport, and switch back to 0 whenever 45° imagery is not available\n     * (this is the default behavior). 45° imagery is only available for\n     * satellite and hybrid map types, within some locations, and at some zoom\n     * levels. Note: getTilt returns the current tilt angle, not the value\n     * specified by this option. Because getTilt and this option refer to\n     * different things, do not bind() the tilt property; doing so may yield\n     * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\n     */\n\n    this.tilt = 0;\n    this._observableSubscriptions = [];\n    /**\n     * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n     * marker or infoWindow).\n     */\n    // tslint:disable-next-line: max-line-length\n\n    this.mapClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n     * on a marker or infoWindow).\n     */\n\n    this.mapRightClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n     * on a marker or infoWindow).\n     */\n\n    this.mapDblClick = new EventEmitter();\n    /**\n     * This event emitter is fired when the map center changes.\n     */\n\n    this.centerChange = new EventEmitter();\n    /**\n     * This event is fired when the viewport bounds have changed.\n     */\n\n    this.boundsChange = new EventEmitter();\n    /**\n     * This event is fired when the mapTypeId property changes.\n     */\n\n    this.mapTypeIdChange = new EventEmitter();\n    /**\n     * This event is fired when the map becomes idle after panning or zooming.\n     */\n\n    this.idle = new EventEmitter();\n    /**\n     * This event is fired when the zoom level has changed.\n     */\n\n    this.zoomChange = new EventEmitter();\n    /**\n     * This event is fired when the google map is fully initialized.\n     * You get the google.maps.Map instance as a result of this EventEmitter.\n     */\n\n    this.mapReady = new EventEmitter();\n    /**\n     * This event is fired when the visible tiles have finished loading.\n     */\n\n    this.tilesLoaded = new EventEmitter();\n  }\n  /** @internal */\n\n\n  ngAfterContentInit() {\n    if (isPlatformServer(this._platformId)) {\n      // The code is running on the server, do nothing\n      return;\n    } // todo: this should be solved with a new component and a viewChild decorator\n\n\n    const container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\n\n    this._initMapInstance(container);\n  }\n\n  _initMapInstance(el) {\n    this._mapsWrapper.createMap(el, {\n      center: {\n        lat: this.latitude || 0,\n        lng: this.longitude || 0\n      },\n      zoom: this.zoom,\n      minZoom: this.minZoom,\n      maxZoom: this.maxZoom,\n      controlSize: this.controlSize,\n      disableDefaultUI: this.disableDefaultUI,\n      disableDoubleClickZoom: this.disableDoubleClickZoom,\n      scrollwheel: this.scrollwheel,\n      backgroundColor: this.backgroundColor,\n      draggable: this.draggable,\n      draggableCursor: this.draggableCursor,\n      draggingCursor: this.draggingCursor,\n      keyboardShortcuts: this.keyboardShortcuts,\n      styles: this.styles,\n      mapTypeId: this.mapTypeId.toLocaleLowerCase(),\n      clickableIcons: this.clickableIcons,\n      gestureHandling: this.gestureHandling,\n      tilt: this.tilt,\n      restriction: this.restriction\n    }).then(() => this._mapsWrapper.getNativeMap()).then(map => this.mapReady.emit(map)); // register event listeners\n\n\n    this._handleMapCenterChange();\n\n    this._handleMapZoomChange();\n\n    this._handleMapMouseEvents();\n\n    this._handleBoundsChange();\n\n    this._handleMapTypeIdChange();\n\n    this._handleTilesLoadedEvent();\n\n    this._handleIdleEvent();\n\n    this._handleControlChange();\n  }\n  /** @internal */\n\n\n  ngOnDestroy() {\n    // unsubscribe all registered observable subscriptions\n    this._observableSubscriptions.forEach(s => s.unsubscribe()); // remove all listeners from the map instance\n\n\n    this._mapsWrapper.clearInstanceListeners();\n\n    if (this._fitBoundsSubscription) {\n      this._fitBoundsSubscription.unsubscribe();\n    }\n  }\n  /* @internal */\n\n\n  ngOnChanges(changes) {\n    this._updateMapOptionsChanges(changes);\n\n    this._updatePosition(changes);\n  }\n\n  _updateMapOptionsChanges(changes) {\n    const options = {};\n    const optionKeys = Object.keys(changes).filter(k => AgmMap._mapOptionsAttributes.indexOf(k) !== -1);\n    optionKeys.forEach(k => {\n      options[k] = changes[k].currentValue;\n    });\n\n    this._mapsWrapper.setMapOptions(options);\n  }\n  /**\n   * Triggers a resize event on the google map instance.\n   * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n   * Returns a promise that gets resolved after the event was triggered.\n   */\n\n\n  triggerResize(recenter = true) {\n    // Note: When we would trigger the resize event and show the map in the same turn (which is a\n    // common case for triggering a resize event), then the resize event would not\n    // work (to show the map), so we trigger the event in a timeout.\n    return new Promise(resolve => {\n      setTimeout(() => {\n        return this._mapsWrapper.triggerMapEvent('resize').then(() => {\n          if (recenter) {\n            this.fitBounds != null ? this._fitBounds() : this._setCenter();\n          }\n\n          resolve();\n        });\n      });\n    });\n  }\n\n  _updatePosition(changes) {\n    // tslint:disable: no-string-literal\n    if (changes['latitude'] == null && changes['longitude'] == null && !changes['fitBounds']) {\n      // no position update needed\n      return;\n    } // tslint:enable: no-string-literal\n    // we prefer fitBounds in changes\n\n\n    if ('fitBounds' in changes) {\n      this._fitBounds();\n\n      return;\n    }\n\n    if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n      return;\n    }\n\n    this._setCenter();\n  }\n\n  _setCenter() {\n    const newCenter = {\n      lat: this.latitude,\n      lng: this.longitude\n    };\n\n    if (this.usePanning) {\n      this._mapsWrapper.panTo(newCenter);\n    } else {\n      this._mapsWrapper.setCenter(newCenter);\n    }\n  }\n\n  _fitBounds() {\n    switch (this.fitBounds) {\n      case true:\n        this._subscribeToFitBoundsUpdates();\n\n        break;\n\n      case false:\n        if (this._fitBoundsSubscription) {\n          this._fitBoundsSubscription.unsubscribe();\n        }\n\n        break;\n\n      default:\n        if (this._fitBoundsSubscription) {\n          this._fitBoundsSubscription.unsubscribe();\n        }\n\n        this._updateBounds(this.fitBounds, this.fitBoundsPadding);\n\n    }\n  }\n\n  _subscribeToFitBoundsUpdates() {\n    this._zone.runOutsideAngular(() => {\n      this._fitBoundsSubscription = this._fitBoundsService.getBounds$().subscribe(b => {\n        this._zone.run(() => this._updateBounds(b, this.fitBoundsPadding));\n      });\n    });\n  }\n\n  _updateBounds(bounds, padding) {\n    if (!bounds) {\n      return;\n    }\n\n    if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {\n      const newBounds = new google.maps.LatLngBounds();\n      newBounds.union(bounds);\n      bounds = newBounds;\n    }\n\n    if (this.usePanning) {\n      this._mapsWrapper.panToBounds(bounds, padding);\n\n      return;\n    }\n\n    this._mapsWrapper.fitBounds(bounds, padding);\n  }\n\n  _isLatLngBoundsLiteral(bounds) {\n    return bounds != null && bounds.extend === undefined;\n  }\n\n  _handleMapCenterChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(() => {\n      this._mapsWrapper.getCenter().then(center => {\n        this.latitude = center.lat();\n        this.longitude = center.lng();\n        this.centerChange.emit({\n          lat: this.latitude,\n          lng: this.longitude\n        });\n      });\n    });\n\n    this._observableSubscriptions.push(s);\n  }\n\n  _handleBoundsChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(() => {\n      this._mapsWrapper.getBounds().then(bounds => {\n        this.boundsChange.emit(bounds);\n      });\n    });\n\n    this._observableSubscriptions.push(s);\n  }\n\n  _handleMapTypeIdChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent('maptypeid_changed').subscribe(() => {\n      this._mapsWrapper.getMapTypeId().then(mapTypeId => {\n        this.mapTypeIdChange.emit(mapTypeId);\n      });\n    });\n\n    this._observableSubscriptions.push(s);\n  }\n\n  _handleMapZoomChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(() => {\n      this._mapsWrapper.getZoom().then(z => {\n        this.zoom = z;\n        this.zoomChange.emit(z);\n      });\n    });\n\n    this._observableSubscriptions.push(s);\n  }\n\n  _handleIdleEvent() {\n    const s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(() => {\n      this.idle.emit(void 0);\n    });\n\n    this._observableSubscriptions.push(s);\n  }\n\n  _handleTilesLoadedEvent() {\n    const s = this._mapsWrapper.subscribeToMapEvent('tilesloaded').subscribe(() => this.tilesLoaded.emit(void 0));\n\n    this._observableSubscriptions.push(s);\n  }\n\n  _handleMapMouseEvents() {\n    const events = [{\n      name: 'click',\n      emitter: this.mapClick\n    }, {\n      name: 'rightclick',\n      emitter: this.mapRightClick\n    }, {\n      name: 'dblclick',\n      emitter: this.mapDblClick\n    }];\n    events.forEach(e => {\n      const s = this._mapsWrapper.subscribeToMapEvent(e.name).subscribe(([event]) => {\n        // the placeId will be undefined in case the event was not an IconMouseEvent (google types)\n        if (event.placeId && !this.showDefaultInfoWindow) {\n          event.stop();\n        }\n\n        e.emitter.emit(event);\n      });\n\n      this._observableSubscriptions.push(s);\n    });\n  }\n\n  _handleControlChange() {\n    this._setControls();\n\n    this.mapControls.changes.subscribe(() => this._setControls());\n  }\n\n  _setControls() {\n    const controlOptions = {\n      fullscreenControl: !this.disableDefaultUI,\n      mapTypeControl: false,\n      panControl: false,\n      rotateControl: false,\n      scaleControl: false,\n      streetViewControl: !this.disableDefaultUI,\n      zoomControl: !this.disableDefaultUI\n    };\n\n    this._mapsWrapper.getNativeMap().then(() => {\n      this.mapControls.forEach(control => Object.assign(controlOptions, control.getOptions()));\n\n      this._mapsWrapper.setMapOptions(controlOptions);\n    });\n  }\n\n}\n/**\n * Map option attributes that can change over time\n */\n\n\nAgmMap._mapOptionsAttributes = ['disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor', 'keyboardShortcuts', 'styles', 'zoom', 'minZoom', 'maxZoom', 'mapTypeId', 'clickableIcons', 'gestureHandling', 'tilt', 'restriction'];\nAgmMap.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'agm-map',\n    providers: [CircleManager, DataLayerManager, DataLayerManager, FitBoundsService, GoogleMapsAPIWrapper, InfoWindowManager, KmlLayerManager, LayerManager, MarkerManager, PolygonManager, PolylineManager, RectangleManager],\n    template: `\n              <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\n              <div class='agm-map-content'>\n                <ng-content></ng-content>\n              </div>\n  `,\n    styles: [`\n    .agm-map-container-inner {\n      width: inherit;\n      height: inherit;\n    }\n    .agm-map-content {\n      display:none;\n    }\n  `]\n  }]\n}];\n\nAgmMap.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: GoogleMapsAPIWrapper\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: FitBoundsService\n}, {\n  type: NgZone\n}];\n\nAgmMap.propDecorators = {\n  longitude: [{\n    type: Input\n  }],\n  latitude: [{\n    type: Input\n  }],\n  zoom: [{\n    type: Input\n  }],\n  minZoom: [{\n    type: Input\n  }],\n  maxZoom: [{\n    type: Input\n  }],\n  controlSize: [{\n    type: Input\n  }],\n  draggable: [{\n    type: Input,\n    args: ['mapDraggable']\n  }],\n  disableDoubleClickZoom: [{\n    type: Input\n  }],\n  disableDefaultUI: [{\n    type: Input\n  }],\n  scrollwheel: [{\n    type: Input\n  }],\n  backgroundColor: [{\n    type: Input\n  }],\n  draggableCursor: [{\n    type: Input\n  }],\n  draggingCursor: [{\n    type: Input\n  }],\n  keyboardShortcuts: [{\n    type: Input\n  }],\n  styles: [{\n    type: Input\n  }],\n  usePanning: [{\n    type: Input\n  }],\n  fitBounds: [{\n    type: Input\n  }],\n  fitBoundsPadding: [{\n    type: Input\n  }],\n  mapTypeId: [{\n    type: Input\n  }],\n  clickableIcons: [{\n    type: Input\n  }],\n  showDefaultInfoWindow: [{\n    type: Input\n  }],\n  gestureHandling: [{\n    type: Input\n  }],\n  tilt: [{\n    type: Input\n  }],\n  restriction: [{\n    type: Input\n  }],\n  mapClick: [{\n    type: Output\n  }],\n  mapRightClick: [{\n    type: Output\n  }],\n  mapDblClick: [{\n    type: Output\n  }],\n  centerChange: [{\n    type: Output\n  }],\n  boundsChange: [{\n    type: Output\n  }],\n  mapTypeIdChange: [{\n    type: Output\n  }],\n  idle: [{\n    type: Output\n  }],\n  zoomChange: [{\n    type: Output\n  }],\n  mapReady: [{\n    type: Output\n  }],\n  tilesLoaded: [{\n    type: Output\n  }],\n  mapControls: [{\n    type: ContentChildren,\n    args: [AgmMapControl]\n  }]\n};\nlet markerId = 0;\n/**\n * AgmMarker renders a map marker inside a {@link AgmMap}.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\nclass AgmMarker {\n  constructor(_markerManager) {\n    this._markerManager = _markerManager;\n    /**\n     * If true, the marker can be dragged. Default value is false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If true, the marker is visible\n     */\n\n    this.visible = true;\n    /**\n     * Whether to automatically open the child info window when the marker is clicked.\n     */\n\n    this.openInfoWindow = true;\n    /**\n     * The marker's opacity between 0.0 and 1.0.\n     */\n\n    this.opacity = 1;\n    /**\n     * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n     * front of markers with lower values. By default, markers are displayed according to their\n     * vertical position on screen, with lower markers appearing in front of markers further up the\n     * screen.\n     */\n\n    this.zIndex = 1;\n    /**\n     * If true, the marker can be clicked. Default value is true.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.clickable = true;\n    /**\n     * This event is fired when the marker's animation property changes.\n     */\n\n    this.animationChange = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the marker.\n     */\n\n    this.markerClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks twice on the marker.\n     */\n\n    this.markerDblClick = new EventEmitter();\n    /**\n     * This event is fired when the user rightclicks on the marker.\n     */\n\n    this.markerRightClick = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the marker.\n     */\n\n    this.dragStart = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the marker.\n     */\n    // tslint:disable-next-line: no-output-native\n\n    this.drag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the marker.\n     */\n\n    this.dragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user mouses over the marker.\n     */\n\n    this.mouseOver = new EventEmitter();\n    /**\n     * This event is fired when the user mouses outside the marker.\n     */\n\n    this.mouseOut = new EventEmitter();\n    /** @internal */\n\n    this.infoWindow = new QueryList();\n    this._markerAddedToManger = false;\n    this._observableSubscriptions = [];\n    this._fitBoundsDetails$ = new ReplaySubject(1);\n    this._id = (markerId++).toString();\n  }\n  /* @internal */\n\n\n  ngAfterContentInit() {\n    this.handleInfoWindowUpdate();\n    this.infoWindow.changes.subscribe(() => this.handleInfoWindowUpdate());\n  }\n\n  handleInfoWindowUpdate() {\n    if (this.infoWindow.length > 1) {\n      throw new Error('Expected no more than one info window.');\n    }\n\n    this.infoWindow.forEach(marker => {\n      marker.hostMarker = this;\n    });\n  }\n  /** @internal */\n\n\n  ngOnChanges(changes) {\n    if (typeof this.latitude === 'string') {\n      this.latitude = Number(this.latitude);\n    }\n\n    if (typeof this.longitude === 'string') {\n      this.longitude = Number(this.longitude);\n    }\n\n    if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n      return;\n    }\n\n    if (!this._markerAddedToManger) {\n      this._markerManager.addMarker(this);\n\n      this._updateFitBoundsDetails();\n\n      this._markerAddedToManger = true;\n\n      this._addEventListeners();\n\n      return;\n    } // tslint:disable: no-string-literal\n\n\n    if (changes['latitude'] || changes['longitude']) {\n      this._markerManager.updateMarkerPosition(this);\n\n      this._updateFitBoundsDetails();\n    }\n\n    if (changes['title']) {\n      this._markerManager.updateTitle(this);\n    }\n\n    if (changes['label']) {\n      this._markerManager.updateLabel(this);\n    }\n\n    if (changes['draggable']) {\n      this._markerManager.updateDraggable(this);\n    }\n\n    if (changes['iconUrl']) {\n      this._markerManager.updateIcon(this);\n    }\n\n    if (changes['opacity']) {\n      this._markerManager.updateOpacity(this);\n    }\n\n    if (changes['visible']) {\n      this._markerManager.updateVisible(this);\n    }\n\n    if (changes['zIndex']) {\n      this._markerManager.updateZIndex(this);\n    }\n\n    if (changes['clickable']) {\n      this._markerManager.updateClickable(this);\n    }\n\n    if (changes['animation']) {\n      this._markerManager.updateAnimation(this);\n    } // tslint:enable: no-string-literal\n\n  }\n  /** @internal */\n\n\n  getFitBoundsDetails$() {\n    return this._fitBoundsDetails$.asObservable();\n  }\n\n  _updateFitBoundsDetails() {\n    this._fitBoundsDetails$.next({\n      latLng: {\n        lat: this.latitude,\n        lng: this.longitude\n      }\n    });\n  }\n\n  _addEventListeners() {\n    const cs = this._markerManager.createEventObservable('click', this).subscribe(() => {\n      if (this.openInfoWindow) {\n        this.infoWindow.forEach(infoWindow => infoWindow.open());\n      }\n\n      this.markerClick.emit(this);\n    });\n\n    this._observableSubscriptions.push(cs);\n\n    const dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(() => {\n      this.markerDblClick.emit(null);\n    });\n\n    this._observableSubscriptions.push(dcs);\n\n    const rc = this._markerManager.createEventObservable('rightclick', this).subscribe(() => {\n      this.markerRightClick.emit(null);\n    });\n\n    this._observableSubscriptions.push(rc);\n\n    const ds = this._markerManager.createEventObservable('dragstart', this).subscribe(e => this.dragStart.emit(e));\n\n    this._observableSubscriptions.push(ds);\n\n    const d = this._markerManager.createEventObservable('drag', this).subscribe(e => this.drag.emit(e));\n\n    this._observableSubscriptions.push(d);\n\n    const de = this._markerManager.createEventObservable('dragend', this).subscribe(e => this.dragEnd.emit(e));\n\n    this._observableSubscriptions.push(de);\n\n    const mover = this._markerManager.createEventObservable('mouseover', this).subscribe(e => this.mouseOver.emit(e));\n\n    this._observableSubscriptions.push(mover);\n\n    const mout = this._markerManager.createEventObservable('mouseout', this).subscribe(e => this.mouseOut.emit(e));\n\n    this._observableSubscriptions.push(mout);\n\n    const anChng = this._markerManager.createEventObservable('animation_changed', this).subscribe(() => {\n      this.animationChange.emit(this.animation);\n    });\n\n    this._observableSubscriptions.push(anChng);\n  }\n  /** @internal */\n\n\n  id() {\n    return this._id;\n  }\n  /** @internal */\n\n\n  toString() {\n    return 'AgmMarker-' + this._id.toString();\n  }\n  /** @internal */\n\n\n  ngOnDestroy() {\n    this._markerManager.deleteMarker(this); // unsubscribe all registered observable subscriptions\n\n\n    this._observableSubscriptions.forEach(s => s.unsubscribe());\n  }\n\n}\n\nAgmMarker.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-marker',\n    providers: [{\n      provide: FitBoundsAccessor,\n      useExisting: forwardRef(() => AgmMarker)\n    }]\n  }]\n}];\n\nAgmMarker.ctorParameters = () => [{\n  type: MarkerManager\n}];\n\nAgmMarker.propDecorators = {\n  latitude: [{\n    type: Input\n  }],\n  longitude: [{\n    type: Input\n  }],\n  title: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  draggable: [{\n    type: Input,\n    args: ['markerDraggable']\n  }],\n  iconUrl: [{\n    type: Input\n  }],\n  visible: [{\n    type: Input\n  }],\n  openInfoWindow: [{\n    type: Input\n  }],\n  opacity: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  clickable: [{\n    type: Input,\n    args: ['markerClickable']\n  }],\n  animation: [{\n    type: Input\n  }],\n  animationChange: [{\n    type: Output\n  }],\n  markerClick: [{\n    type: Output\n  }],\n  markerDblClick: [{\n    type: Output\n  }],\n  markerRightClick: [{\n    type: Output\n  }],\n  dragStart: [{\n    type: Output\n  }],\n  drag: [{\n    type: Output\n  }],\n  dragEnd: [{\n    type: Output\n  }],\n  mouseOver: [{\n    type: Output\n  }],\n  mouseOut: [{\n    type: Output\n  }],\n  infoWindow: [{\n    type: ContentChildren,\n    args: [AgmInfoWindow]\n  }]\n};\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: LatLngLiteral[] = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: LatLngLiteral[][] = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\n\nclass AgmPolygon {\n  constructor(_polygonManager) {\n    this._polygonManager = _polygonManager;\n    /**\n     * Indicates whether this Polygon handles mouse events. Defaults to true.\n     */\n\n    this.clickable = true;\n    /**\n     * If set to true, the user can drag this shape over the map. The geodesic\n     * property defines the mode of dragging. Defaults to false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If set to true, the user can edit this shape by dragging the control\n     * points shown at the vertices and on each segment. Defaults to false.\n     */\n\n    this.editable = false;\n    /**\n     * When true, edges of the polygon are interpreted as geodesic and will\n     * follow the curvature of the Earth. When false, edges of the polygon are\n     * rendered as straight lines in screen space. Note that the shape of a\n     * geodesic polygon may appear to change when dragged, as the dimensions\n     * are maintained relative to the surface of the earth. Defaults to false.\n     */\n\n    this.geodesic = false;\n    /**\n     * The ordered sequence of coordinates that designates a closed loop.\n     * Unlike polylines, a polygon may consist of one or more paths.\n     *  As a result, the paths property may specify one or more arrays of\n     * LatLng coordinates. Paths are closed automatically; do not repeat the\n     * first vertex of the path as the last vertex. Simple polygons may be\n     * defined using a single array of LatLngs. More complex polygons may\n     * specify an array of arrays. Any simple arrays are converted into Arrays.\n     * Inserting or removing LatLngs from the Array will automatically update\n     * the polygon on the map.\n     */\n\n    this.paths = [];\n    /**\n     * This event is fired when the DOM click event is fired on the Polygon.\n     */\n\n    this.polyClick = new EventEmitter();\n    /**\n     * This event is fired when the DOM dblclick event is fired on the Polygon.\n     */\n\n    this.polyDblClick = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the polygon.\n     */\n\n    this.polyDrag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the polygon.\n     */\n\n    this.polyDragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the polygon.\n     */\n\n    this.polyDragStart = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousedown event is fired on the Polygon.\n     */\n\n    this.polyMouseDown = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousemove event is fired on the Polygon.\n     */\n\n    this.polyMouseMove = new EventEmitter();\n    /**\n     * This event is fired on Polygon mouseout.\n     */\n\n    this.polyMouseOut = new EventEmitter();\n    /**\n     * This event is fired on Polygon mouseover.\n     */\n\n    this.polyMouseOver = new EventEmitter();\n    /**\n     * This event is fired whe the DOM mouseup event is fired on the Polygon\n     */\n\n    this.polyMouseUp = new EventEmitter();\n    /**\n     * This event is fired when the Polygon is right-clicked on.\n     */\n\n    this.polyRightClick = new EventEmitter();\n    /**\n     * This event is fired after Polygon first path changes.\n     */\n\n    this.polyPathsChange = new EventEmitter();\n    this._polygonAddedToManager = false;\n    this._subscriptions = [];\n  }\n  /** @internal */\n\n\n  ngAfterContentInit() {\n    if (!this._polygonAddedToManager) {\n      this._init();\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (!this._polygonAddedToManager) {\n      this._init();\n\n      return;\n    }\n\n    this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n  }\n\n  _init() {\n    this._polygonManager.addPolygon(this);\n\n    this._polygonAddedToManager = true;\n\n    this._addEventListeners();\n  }\n\n  _addEventListeners() {\n    const handlers = [{\n      name: 'click',\n      handler: ev => this.polyClick.emit(ev)\n    }, {\n      name: 'dblclick',\n      handler: ev => this.polyDblClick.emit(ev)\n    }, {\n      name: 'drag',\n      handler: ev => this.polyDrag.emit(ev)\n    }, {\n      name: 'dragend',\n      handler: ev => this.polyDragEnd.emit(ev)\n    }, {\n      name: 'dragstart',\n      handler: ev => this.polyDragStart.emit(ev)\n    }, {\n      name: 'mousedown',\n      handler: ev => this.polyMouseDown.emit(ev)\n    }, {\n      name: 'mousemove',\n      handler: ev => this.polyMouseMove.emit(ev)\n    }, {\n      name: 'mouseout',\n      handler: ev => this.polyMouseOut.emit(ev)\n    }, {\n      name: 'mouseover',\n      handler: ev => this.polyMouseOver.emit(ev)\n    }, {\n      name: 'mouseup',\n      handler: ev => this.polyMouseUp.emit(ev)\n    }, {\n      name: 'rightclick',\n      handler: ev => this.polyRightClick.emit(ev)\n    }];\n    handlers.forEach(obj => {\n      const os = this._polygonManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n\n      this._subscriptions.push(os);\n    });\n\n    this._polygonManager.createPathEventObservable(this).then(paths$ => {\n      const os = paths$.subscribe(pathEvent => this.polyPathsChange.emit(pathEvent));\n\n      this._subscriptions.push(os);\n    });\n  }\n\n  _updatePolygonOptions(changes) {\n    return Object.keys(changes).filter(k => AgmPolygon._polygonOptionsAttributes.indexOf(k) !== -1).reduce((obj, k) => {\n      obj[k] = changes[k].currentValue;\n      return obj;\n    }, {});\n  }\n  /** @internal */\n\n\n  id() {\n    return this._id;\n  }\n  /** @internal */\n\n\n  ngOnDestroy() {\n    this._polygonManager.deletePolygon(this); // unsubscribe all registered observable subscriptions\n\n\n    this._subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  getPath() {\n    return this._polygonManager.getPath(this);\n  }\n\n  getPaths() {\n    return this._polygonManager.getPaths(this);\n  }\n\n}\n\nAgmPolygon._polygonOptionsAttributes = ['clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map', 'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable', 'editable', 'visible'];\nAgmPolygon.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-polygon'\n  }]\n}];\n\nAgmPolygon.ctorParameters = () => [{\n  type: PolygonManager\n}];\n\nAgmPolygon.propDecorators = {\n  clickable: [{\n    type: Input\n  }],\n  draggable: [{\n    type: Input,\n    args: ['polyDraggable']\n  }],\n  editable: [{\n    type: Input\n  }],\n  fillColor: [{\n    type: Input\n  }],\n  fillOpacity: [{\n    type: Input\n  }],\n  geodesic: [{\n    type: Input\n  }],\n  paths: [{\n    type: Input\n  }],\n  strokeColor: [{\n    type: Input\n  }],\n  strokeOpacity: [{\n    type: Input\n  }],\n  strokeWeight: [{\n    type: Input\n  }],\n  visible: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  polyClick: [{\n    type: Output\n  }],\n  polyDblClick: [{\n    type: Output\n  }],\n  polyDrag: [{\n    type: Output\n  }],\n  polyDragEnd: [{\n    type: Output\n  }],\n  polyDragStart: [{\n    type: Output\n  }],\n  polyMouseDown: [{\n    type: Output\n  }],\n  polyMouseMove: [{\n    type: Output\n  }],\n  polyMouseOut: [{\n    type: Output\n  }],\n  polyMouseOver: [{\n    type: Output\n  }],\n  polyMouseUp: [{\n    type: Output\n  }],\n  polyRightClick: [{\n    type: Output\n  }],\n  polyPathsChange: [{\n    type: Output\n  }]\n};\n/**\n * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\n * or custom icons either along the entire line, or in a specific part of it.\n * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\n *\n * ### Example\n * ```html\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\n *          </agm-icon-sequence>\n *      </agm-polyline>\n *    </agm-map>\n * ```\n */\n\nclass AgmPolylineIcon {\n  ngOnInit() {\n    if (this.path == null) {\n      throw new Error('Icon Sequence path is required');\n    }\n  }\n\n}\n\nAgmPolylineIcon.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-polyline agm-icon-sequence'\n  }]\n}];\nAgmPolylineIcon.propDecorators = {\n  fixedRotation: [{\n    type: Input\n  }],\n  offset: [{\n    type: Input\n  }],\n  repeat: [{\n    type: Input\n  }],\n  anchorX: [{\n    type: Input\n  }],\n  anchorY: [{\n    type: Input\n  }],\n  fillColor: [{\n    type: Input\n  }],\n  fillOpacity: [{\n    type: Input\n  }],\n  path: [{\n    type: Input\n  }],\n  rotation: [{\n    type: Input\n  }],\n  scale: [{\n    type: Input\n  }],\n  strokeColor: [{\n    type: Input\n  }],\n  strokeOpacity: [{\n    type: Input\n  }],\n  strokeWeight: [{\n    type: Input\n  }]\n};\n/**\n * AgmPolylinePoint represents one element of a polyline within a  {@link\n * AgmPolyline}\n */\n\nclass AgmPolylinePoint {\n  constructor() {\n    /**\n     * This event emitter gets emitted when the position of the point changed.\n     */\n    this.positionChanged = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    // tslint:disable: no-string-literal\n    if (changes['latitude'] || changes['longitude']) {\n      this.positionChanged.emit({\n        lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,\n        lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude\n      });\n    } // tslint:enable: no-string-literal\n\n  }\n  /** @internal */\n\n\n  getFitBoundsDetails$() {\n    return this.positionChanged.pipe(startWith({\n      lat: this.latitude,\n      lng: this.longitude\n    }), map(position => ({\n      latLng: position\n    })));\n  }\n\n}\n\nAgmPolylinePoint.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-polyline-point',\n    providers: [{\n      provide: FitBoundsAccessor,\n      useExisting: forwardRef(() => AgmPolylinePoint)\n    }]\n  }]\n}];\n\nAgmPolylinePoint.ctorParameters = () => [];\n\nAgmPolylinePoint.propDecorators = {\n  latitude: [{\n    type: Input\n  }],\n  longitude: [{\n    type: Input\n  }],\n  positionChanged: [{\n    type: Output\n  }]\n};\nlet polylineId = 0;\n/**\n * AgmPolyline renders a polyline on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n *          </agm-polyline-point>\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n *          </agm-polyline-point>\n *      </agm-polyline>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\nclass AgmPolyline {\n  constructor(_polylineManager) {\n    this._polylineManager = _polylineManager;\n    /**\n     * Indicates whether this Polyline handles mouse events. Defaults to true.\n     */\n\n    this.clickable = true;\n    /**\n     * If set to true, the user can drag this shape over the map. The geodesic property defines the\n     * mode of dragging. Defaults to false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If set to true, the user can edit this shape by dragging the control points shown at the\n     * vertices and on each segment. Defaults to false.\n     */\n\n    this.editable = false;\n    /**\n     * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n     * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n     * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n     * are maintained relative to the surface of the earth. Defaults to false.\n     */\n\n    this.geodesic = false;\n    /**\n     * Whether this polyline is visible on the map. Defaults to true.\n     */\n\n    this.visible = true;\n    /**\n     * This event is fired when the DOM click event is fired on the Polyline.\n     */\n\n    this.lineClick = new EventEmitter();\n    /**\n     * This event is fired when the DOM dblclick event is fired on the Polyline.\n     */\n\n    this.lineDblClick = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the polyline.\n     */\n\n    this.lineDrag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the polyline.\n     */\n\n    this.lineDragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the polyline.\n     */\n\n    this.lineDragStart = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousedown event is fired on the Polyline.\n     */\n\n    this.lineMouseDown = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousemove event is fired on the Polyline.\n     */\n\n    this.lineMouseMove = new EventEmitter();\n    /**\n     * This event is fired on Polyline mouseout.\n     */\n\n    this.lineMouseOut = new EventEmitter();\n    /**\n     * This event is fired on Polyline mouseover.\n     */\n\n    this.lineMouseOver = new EventEmitter();\n    /**\n     * This event is fired whe the DOM mouseup event is fired on the Polyline\n     */\n\n    this.lineMouseUp = new EventEmitter();\n    /**\n     * This event is fired when the Polyline is right-clicked on.\n     */\n\n    this.lineRightClick = new EventEmitter();\n    /**\n     * This event is fired after Polyline's path changes.\n     */\n\n    this.polyPathChange = new EventEmitter();\n    this._polylineAddedToManager = false;\n    this._subscriptions = [];\n    this._id = (polylineId++).toString();\n  }\n  /** @internal */\n\n\n  ngAfterContentInit() {\n    if (this.points.length) {\n      this.points.forEach(point => {\n        const s = point.positionChanged.subscribe(() => {\n          this._polylineManager.updatePolylinePoints(this);\n        });\n\n        this._subscriptions.push(s);\n      });\n    }\n\n    if (!this._polylineAddedToManager) {\n      this._init();\n    }\n\n    const pointSub = this.points.changes.subscribe(() => this._polylineManager.updatePolylinePoints(this));\n\n    this._subscriptions.push(pointSub);\n\n    this._polylineManager.updatePolylinePoints(this);\n\n    const iconSub = this.iconSequences.changes.subscribe(() => this._polylineManager.updateIconSequences(this));\n\n    this._subscriptions.push(iconSub);\n  }\n\n  ngOnChanges(changes) {\n    if (!this._polylineAddedToManager) {\n      this._init();\n\n      return;\n    }\n\n    const options = {};\n    const optionKeys = Object.keys(changes).filter(k => AgmPolyline._polylineOptionsAttributes.indexOf(k) !== -1);\n    optionKeys.forEach(k => options[k] = changes[k].currentValue);\n\n    this._polylineManager.setPolylineOptions(this, options);\n  }\n\n  getPath() {\n    return this._polylineManager.getPath(this);\n  }\n\n  _init() {\n    this._polylineManager.addPolyline(this);\n\n    this._polylineAddedToManager = true;\n\n    this._addEventListeners();\n  }\n\n  _addEventListeners() {\n    const handlers = [{\n      name: 'click',\n      handler: ev => this.lineClick.emit(ev)\n    }, {\n      name: 'dblclick',\n      handler: ev => this.lineDblClick.emit(ev)\n    }, {\n      name: 'drag',\n      handler: ev => this.lineDrag.emit(ev)\n    }, {\n      name: 'dragend',\n      handler: ev => this.lineDragEnd.emit(ev)\n    }, {\n      name: 'dragstart',\n      handler: ev => this.lineDragStart.emit(ev)\n    }, {\n      name: 'mousedown',\n      handler: ev => this.lineMouseDown.emit(ev)\n    }, {\n      name: 'mousemove',\n      handler: ev => this.lineMouseMove.emit(ev)\n    }, {\n      name: 'mouseout',\n      handler: ev => this.lineMouseOut.emit(ev)\n    }, {\n      name: 'mouseover',\n      handler: ev => this.lineMouseOver.emit(ev)\n    }, {\n      name: 'mouseup',\n      handler: ev => this.lineMouseUp.emit(ev)\n    }, {\n      name: 'rightclick',\n      handler: ev => this.lineRightClick.emit(ev)\n    }];\n    handlers.forEach(obj => {\n      const os = this._polylineManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n\n      this._subscriptions.push(os);\n    });\n\n    this._polylineManager.createPathEventObservable(this).then(ob$ => {\n      const os = ob$.subscribe(pathEvent => this.polyPathChange.emit(pathEvent));\n\n      this._subscriptions.push(os);\n    });\n  }\n  /** @internal */\n\n\n  _getPoints() {\n    if (this.points) {\n      return this.points.toArray();\n    }\n\n    return [];\n  }\n\n  _getIcons() {\n    if (this.iconSequences) {\n      return this.iconSequences.toArray();\n    }\n\n    return [];\n  }\n  /** @internal */\n\n\n  id() {\n    return this._id;\n  }\n  /** @internal */\n\n\n  ngOnDestroy() {\n    this._polylineManager.deletePolyline(this); // unsubscribe all registered observable subscriptions\n\n\n    this._subscriptions.forEach(s => s.unsubscribe());\n  }\n\n}\n\nAgmPolyline._polylineOptionsAttributes = ['draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'zIndex'];\nAgmPolyline.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-polyline'\n  }]\n}];\n\nAgmPolyline.ctorParameters = () => [{\n  type: PolylineManager\n}];\n\nAgmPolyline.propDecorators = {\n  clickable: [{\n    type: Input\n  }],\n  draggable: [{\n    type: Input,\n    args: ['polylineDraggable']\n  }],\n  editable: [{\n    type: Input\n  }],\n  geodesic: [{\n    type: Input\n  }],\n  strokeColor: [{\n    type: Input\n  }],\n  strokeOpacity: [{\n    type: Input\n  }],\n  strokeWeight: [{\n    type: Input\n  }],\n  visible: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  lineClick: [{\n    type: Output\n  }],\n  lineDblClick: [{\n    type: Output\n  }],\n  lineDrag: [{\n    type: Output\n  }],\n  lineDragEnd: [{\n    type: Output\n  }],\n  lineDragStart: [{\n    type: Output\n  }],\n  lineMouseDown: [{\n    type: Output\n  }],\n  lineMouseMove: [{\n    type: Output\n  }],\n  lineMouseOut: [{\n    type: Output\n  }],\n  lineMouseOver: [{\n    type: Output\n  }],\n  lineMouseUp: [{\n    type: Output\n  }],\n  lineRightClick: [{\n    type: Output\n  }],\n  polyPathChange: [{\n    type: Output\n  }],\n  points: [{\n    type: ContentChildren,\n    args: [AgmPolylinePoint]\n  }],\n  iconSequences: [{\n    type: ContentChildren,\n    args: [AgmPolylineIcon]\n  }]\n};\n\nclass AgmRectangle {\n  constructor(_manager) {\n    this._manager = _manager;\n    /**\n     * Indicates whether this Rectangle handles mouse events. Defaults to true.\n     */\n\n    this.clickable = true;\n    /**\n     * If set to true, the user can drag this rectangle over the map. Defaults to false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If set to true, the user can edit this rectangle by dragging the control points shown at\n     * the center and around the circumference of the rectangle. Defaults to false.\n     */\n\n    this.editable = false;\n    /**\n     * The stroke position. Defaults to CENTER.\n     * This property is not supported on Internet Explorer 8 and earlier.\n     */\n\n    this.strokePosition = 'CENTER';\n    /**\n     * The stroke width in pixels.\n     */\n\n    this.strokeWeight = 0;\n    /**\n     * Whether this rectangle is visible on the map. Defaults to true.\n     */\n\n    this.visible = true;\n    /**\n     * This event is fired when the rectangle's is changed.\n     */\n\n    this.boundsChange = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the rectangle.\n     */\n\n    this.rectangleClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the rectangle.\n     */\n\n    this.rectangleDblClick = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the rectangle.\n     */\n    // tslint:disable-next-line: no-output-native\n\n    this.drag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the rectangle.\n     */\n\n    this.dragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the rectangle.\n     */\n\n    this.dragStart = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousedown event is fired on the rectangle.\n     */\n\n    this.mouseDown = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousemove event is fired on the rectangle.\n     */\n\n    this.mouseMove = new EventEmitter();\n    /**\n     * This event is fired on rectangle mouseout.\n     */\n\n    this.mouseOut = new EventEmitter();\n    /**\n     * This event is fired on rectangle mouseover.\n     */\n\n    this.mouseOver = new EventEmitter();\n    /**\n     * This event is fired when the DOM mouseup event is fired on the rectangle.\n     */\n\n    this.mouseUp = new EventEmitter();\n    /**\n     * This event is fired when the rectangle is right-clicked on.\n     */\n\n    this.rightClick = new EventEmitter();\n    this._rectangleAddedToManager = false;\n    this._eventSubscriptions = [];\n  }\n  /** @internal */\n\n\n  ngOnInit() {\n    this._manager.addRectangle(this);\n\n    this._rectangleAddedToManager = true;\n\n    this._registerEventListeners();\n  }\n  /** @internal */\n\n\n  ngOnChanges(changes) {\n    if (!this._rectangleAddedToManager) {\n      return;\n    } // tslint:disable: no-string-literal\n\n\n    if (changes['north'] || changes['east'] || changes['south'] || changes['west']) {\n      this._manager.setBounds(this);\n    }\n\n    if (changes['editable']) {\n      this._manager.setEditable(this);\n    }\n\n    if (changes['draggable']) {\n      this._manager.setDraggable(this);\n    }\n\n    if (changes['visible']) {\n      this._manager.setVisible(this);\n    } // tslint:enable: no-string-literal\n\n\n    this._updateRectangleOptionsChanges(changes);\n  }\n\n  _updateRectangleOptionsChanges(changes) {\n    const options = {};\n    const optionKeys = Object.keys(changes).filter(k => AgmRectangle._mapOptions.indexOf(k) !== -1);\n    optionKeys.forEach(k => {\n      options[k] = changes[k].currentValue;\n    });\n\n    if (optionKeys.length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  _registerEventListeners() {\n    const events = new Map();\n    events.set('bounds_changed', this.boundsChange);\n    events.set('click', this.rectangleClick);\n    events.set('dblclick', this.rectangleDblClick);\n    events.set('drag', this.drag);\n    events.set('dragend', this.dragEnd);\n    events.set('dragStart', this.dragStart);\n    events.set('mousedown', this.mouseDown);\n    events.set('mousemove', this.mouseMove);\n    events.set('mouseout', this.mouseOut);\n    events.set('mouseover', this.mouseOver);\n    events.set('mouseup', this.mouseUp);\n    events.set('rightclick', this.rightClick);\n    events.forEach((eventEmitter, eventName) => {\n      this._eventSubscriptions.push(this._manager.createEventObservable(eventName, this).subscribe(value => {\n        switch (eventName) {\n          case 'bounds_changed':\n            this._manager.getBounds(this).then(bounds => eventEmitter.emit({\n              north: bounds.getNorthEast().lat(),\n              east: bounds.getNorthEast().lng(),\n              south: bounds.getSouthWest().lat(),\n              west: bounds.getSouthWest().lng()\n            }));\n\n            break;\n\n          default:\n            eventEmitter.emit(value);\n        }\n      }));\n    });\n  }\n  /** @internal */\n\n\n  ngOnDestroy() {\n    this._eventSubscriptions.forEach(s => s.unsubscribe());\n\n    this._eventSubscriptions = null;\n\n    this._manager.removeRectangle(this);\n  }\n  /**\n   * Gets the LatLngBounds of this Rectangle.\n   */\n\n\n  getBounds() {\n    return this._manager.getBounds(this);\n  }\n\n}\n\nAgmRectangle._mapOptions = ['fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'clickable'];\nAgmRectangle.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-rectangle'\n  }]\n}];\n\nAgmRectangle.ctorParameters = () => [{\n  type: RectangleManager\n}];\n\nAgmRectangle.propDecorators = {\n  north: [{\n    type: Input\n  }],\n  east: [{\n    type: Input\n  }],\n  south: [{\n    type: Input\n  }],\n  west: [{\n    type: Input\n  }],\n  clickable: [{\n    type: Input\n  }],\n  draggable: [{\n    type: Input,\n    args: ['rectangleDraggable']\n  }],\n  editable: [{\n    type: Input\n  }],\n  fillColor: [{\n    type: Input\n  }],\n  fillOpacity: [{\n    type: Input\n  }],\n  strokeColor: [{\n    type: Input\n  }],\n  strokeOpacity: [{\n    type: Input\n  }],\n  strokePosition: [{\n    type: Input\n  }],\n  strokeWeight: [{\n    type: Input\n  }],\n  visible: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  boundsChange: [{\n    type: Output\n  }],\n  rectangleClick: [{\n    type: Output\n  }],\n  rectangleDblClick: [{\n    type: Output\n  }],\n  drag: [{\n    type: Output\n  }],\n  dragEnd: [{\n    type: Output\n  }],\n  dragStart: [{\n    type: Output\n  }],\n  mouseDown: [{\n    type: Output\n  }],\n  mouseMove: [{\n    type: Output\n  }],\n  mouseOut: [{\n    type: Output\n  }],\n  mouseOver: [{\n    type: Output\n  }],\n  mouseUp: [{\n    type: Output\n  }],\n  rightClick: [{\n    type: Output\n  }]\n};\nlet layerId$3 = 0;\n/*\n * This directive adds a transit layer to a google map instance\n * <agm-transit-layer [visible]=\"true|false\"> <agm-transit-layer>\n * */\n\nclass AgmTransitLayer {\n  constructor(_manager) {\n    this._manager = _manager;\n    this._addedToManager = false;\n    this._id = (layerId$3++).toString();\n    /**\n     * Hide/show transit layer\n     */\n\n    this.visible = true;\n  }\n\n  ngOnInit() {\n    if (this._addedToManager) {\n      return;\n    }\n\n    this._manager.addTransitLayer(this);\n\n    this._addedToManager = true;\n  }\n  /** @internal */\n\n\n  id() {\n    return this._id;\n  }\n  /** @internal */\n\n\n  toString() {\n    return `AgmTransitLayer-${this._id.toString()}`;\n  }\n  /** @internal */\n\n\n  ngOnDestroy() {\n    this._manager.deleteLayer(this);\n  }\n\n}\n\nAgmTransitLayer.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'agm-transit-layer'\n  }]\n}];\n\nAgmTransitLayer.ctorParameters = () => [{\n  type: LayerManager\n}];\n\nAgmTransitLayer.propDecorators = {\n  visible: [{\n    type: Input\n  }]\n};\n/**\n * @internal\n */\n\nfunction coreDirectives() {\n  return [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmFullscreenControl, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMapTypeControl, AgmMarker, AgmPanControl, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmTransitLayer, AgmZoomControl];\n}\n/**\n * The angular-google-maps core module. Contains all Directives/Services/Pipes\n * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\n */\n\n\nclass AgmCoreModule {\n  /**\n   * Please use this method when you register the module at the root level.\n   */\n  static forRoot(lazyMapsAPILoaderConfig) {\n    return {\n      ngModule: AgmCoreModule,\n      providers: [...BROWSER_GLOBALS_PROVIDERS, {\n        provide: MapsAPILoader,\n        useClass: LazyMapsAPILoader\n      }, {\n        provide: LAZY_MAPS_API_CONFIG,\n        useValue: lazyMapsAPILoaderConfig\n      }]\n    };\n  }\n\n}\n\nAgmCoreModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: coreDirectives(),\n    exports: coreDirectives()\n  }]\n}];\n/*\n * Public API Surface of core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AgmBicyclingLayer, AgmCircle, AgmCoreModule, AgmDataLayer, AgmFitBounds, AgmFullscreenControl, AgmGeocoder, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMapTypeControl, AgmMarker, AgmPanControl, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmTransitLayer, AgmZoomControl, CircleManager, DataLayerManager, FitBoundsAccessor, GoogleMapsAPIWrapper, GoogleMapsScriptProtocol, InfoWindowManager, KmlLayerManager, LAZY_MAPS_API_CONFIG, LayerManager, LazyMapsAPILoader, MapsAPILoader, MarkerManager, NoOpMapsAPILoader, PolygonManager, PolylineManager, RectangleManager, coreDirectives, FitBoundsService as ɵa, AgmMapControl as ɵb, WindowRef as ɵc, DocumentRef as ɵd, BROWSER_GLOBALS_PROVIDERS as ɵe };","map":{"version":3,"names":["__awaiter","Injectable","NgZone","ɵɵdefineInjectable","ɵɵinject","InjectionToken","Optional","Inject","LOCALE_ID","Directive","Input","EventEmitter","Output","Self","Component","ElementRef","PLATFORM_ID","ContentChildren","QueryList","forwardRef","NgModule","Observable","BehaviorSubject","from","timer","ReplaySubject","bindCallback","of","throwError","fromEventPattern","merge","Subject","flatMap","sample","switchMap","map","shareReplay","multicast","startWith","skip","distinctUntilChanged","takeUntil","isPlatformServer","MapsAPILoader","decorators","type","GoogleMapsAPIWrapper","constructor","_loader","_zone","_map","Promise","resolve","_mapResolver","createMap","el","mapOptions","runOutsideAngular","load","then","google","maps","Map","setMapOptions","options","m","setOptions","createMarker","addToMap","Marker","createInfoWindow","InfoWindow","createCircle","Circle","createRectangle","Rectangle","createPolyline","getNativeMap","line","Polyline","setMap","createPolygon","polygon","Polygon","createDataLayer","data","Data","createTransitLayer","newLayer","TransitLayer","createBicyclingLayer","BicyclingLayer","containsLocation","latLng","geometry","poly","subscribeToMapEvent","eventName","observer","addListener","run","next","arguments","clearInstanceListeners","event","setCenter","getZoom","getBounds","getMapTypeId","setZoom","zoom","getCenter","panTo","panBy","x","y","fitBounds","padding","panToBounds","triggerMapEvent","trigger","ctorParameters","CircleManager","_apiWrapper","_circles","addCircle","circle","set","center","lat","latitude","lng","longitude","clickable","draggable","editable","fillColor","fillOpacity","radius","strokeColor","strokeOpacity","strokePosition","StrokePosition","strokeWeight","visible","zIndex","removeCircle","get","c","delete","actualParam","getRadius","setEditable","setDraggable","setVisible","setRadius","getNativeCircle","createEventObservable","listener","e","remove","DataLayerManager","_wrapper","_layers","addDataLayer","layer","style","d","geoJson","getDataFeatures","features","deleteDataLayer","l","updateGeoJson","forEach","feature","index","indexOf","splice","setDataOptions","setControlPosition","controlPosition","setControls","controls","setDrawingMode","drawingMode","setStyle","reject","addGeoJson","loadGeoJson","FitBoundsAccessor","FitBoundsService","loader","_boundsChangeSampleTime$","_includeInBounds$","bounds$","pipe","time","includeInBounds","_generateBounds","bounds","LatLngBounds","b","extend","addToBounds","id","_createIdentifier","value","has","boundsMap","removeFromBounds","changeFitBoundsChangeSampleTime","timeMs","getBounds$","AgmGeocoder","connectableGeocoder$","subscriber","_createGeocoder","connect","geocoder$","geocode","request","geocoder","_getGoogleResults","geocodeObservable","results","status","GeocoderStatus","OK","Geocoder","ɵprov","factory","AgmGeocoder_Factory","token","providedIn","args","WindowRef","getNativeWindow","window","DocumentRef","getNativeDocument","document","BROWSER_GLOBALS_PROVIDERS","GoogleMapsScriptProtocol","LAZY_MAPS_API_CONFIG","LazyMapsAPILoader","config","w","localeId","_SCRIPT_ID","callbackName","_config","_windowRef","_documentRef","_scriptLoadingPromise","scriptOnPage","getElementById","_assignScriptLoadingPromise","script","createElement","async","defer","src","_getScriptSrc","body","appendChild","scriptElem","onerror","error","protocolType","protocol","HTTPS","AUTO","HTTP","hostAndPath","queryParams","v","apiVersion","callback","key","apiKey","client","clientId","channel","libraries","region","language","params","Object","keys","filter","k","Array","isArray","length","i","join","entry","undefined","String","MarkerManager","_mapsWrapper","_markers","convertAnimation","uiAnim","Animation","deleteMarker","markerDirective","markerPromise","marker","updateMarkerPosition","setPosition","updateTitle","setTitle","title","updateLabel","setLabel","label","updateDraggable","updateIcon","setIcon","iconUrl","updateOpacity","setOpacity","opacity","updateVisible","updateZIndex","setZIndex","updateClickable","setClickable","updateAnimation","setAnimation","animation","addMarker","position","icon","getNativeMarker","InfoWindowManager","_markerManager","_infoWindows","deleteInfoWindow","infoWindow","iWindow","close","open","hostMarker","addInfoWindow","content","maxWidth","disableAutoPan","infoWindowPromise","KmlLayerManager","addKmlLayer","KmlLayer","preserveViewport","screenOverlays","suppressInfoWindows","url","deleteKmlLayer","LayerManager","addTransitLayer","addBicyclingLayer","deleteLayer","currentLayer","NoOpMapsAPILoader","Error","createMVCEventObservable","array","eventNames","handler","previous","apply","newArr","getArray","_handler","evListeners","evListener","MvcArrayMock","vals","listeners","remove_at","insert_at","set_at","clear","removeAt","getAt","getLength","insertAt","elem","pop","deleted","push","setAt","listenerArr","bindTo","changed","notify","setValues","unbind","unbindAll","PolygonManager","_polygons","addPolygon","path","polygonPromise","geodesic","paths","updatePolygon","setPaths","setPolygonOptions","deletePolygon","getPath","polygonDirective","getPaths","p","createPathEventObservable","agmPolygon","pathsChanges$","parentMVEvent","chMVC","chMVCEvent","pathIndex","retVal","subArr","toJSON","PolylineManager","_polylines","_convertPoints","_getPoints","point","_convertPath","symbolPath","SymbolPath","_convertIcons","icons","_getIcons","agmIcon","fixedRotation","offset","repeat","anchor","Point","anchorX","anchorY","rotation","scale","entries","val","addPolyline","polylinePromise","updatePolylinePoints","setPath","updateIconSequences","setPolylineOptions","deletePolyline","getMVCPath","agmPolyline","polyline","mvcPath","RectangleManager","_rectangles","addRectangle","rectangle","north","east","south","west","removeRectangle","r","actualStrokePosition","setBounds","subsrciber","layerId","AgmBicyclingLayer","_manager","_addedToManager","_id","toString","ngOnInit","ngOnDestroy","selector","propDecorators","AgmCircle","centerChange","circleClick","circleDblClick","drag","dragEnd","dragStart","mouseDown","mouseMove","mouseOut","mouseOver","mouseUp","radiusChange","rightClick","_circleAddedToManager","_eventSubscriptions","_registerEventListeners","ngOnChanges","changes","_updateCircleOptionsChanges","optionKeys","_mapOptions","currentValue","events","eventEmitter","subscribe","emit","s","unsubscribe","layerId$1","AgmDataLayer","_subscriptions","layerClick","_addEventListeners","name","ev","obj","os","geoJsonChange","dataOptions","_dataOptionsAttributes","reduce","hasOwnProperty","AgmFitBounds","_fitBoundsAccessor","_fitBoundsService","agmFitBounds","_destroyed$","_latestFitBoundsDetails","_updateBounds","getFitBoundsDetails$","details","newFitBoundsDetails","complete","infoWindowId","AgmInfoWindow","_infoWindowManager","_el","isOpen","infoWindowClose","_infoWindowAddedToManager","nativeElement","querySelector","_updateOpenState","_setInfoWindowOptions","_infoWindowOptionsInputs","template","layerId$2","AgmKmlLayer","defaultViewportChange","statusChange","_updatePolygonOptions","_kmlLayerOptions","AgmMapControl","AgmFullscreenControl","getOptions","fullscreenControl","fullscreenControlOptions","ControlPosition","providers","provide","useExisting","AgmMapTypeControl","mapTypeControl","mapTypeControlOptions","MapTypeControlStyle","mapTypeIds","mapTypeId","MapTypeId","AgmPanControl","panControl","panControlOptions","AgmRotateControl","rotateControl","rotateControlOptions","AgmScaleControl","scaleControl","AgmStreetViewControl","streetViewControl","streetViewControlOptions","AgmZoomControl","zoomControl","zoomControlOptions","ZoomControlStyle","AgmMap","_elem","_platformId","disableDoubleClickZoom","disableDefaultUI","scrollwheel","keyboardShortcuts","styles","usePanning","clickableIcons","showDefaultInfoWindow","gestureHandling","tilt","_observableSubscriptions","mapClick","mapRightClick","mapDblClick","boundsChange","mapTypeIdChange","idle","zoomChange","mapReady","tilesLoaded","ngAfterContentInit","container","_initMapInstance","minZoom","maxZoom","controlSize","backgroundColor","draggableCursor","draggingCursor","toLocaleLowerCase","restriction","_handleMapCenterChange","_handleMapZoomChange","_handleMapMouseEvents","_handleBoundsChange","_handleMapTypeIdChange","_handleTilesLoadedEvent","_handleIdleEvent","_handleControlChange","_fitBoundsSubscription","_updateMapOptionsChanges","_updatePosition","_mapOptionsAttributes","triggerResize","recenter","setTimeout","_fitBounds","_setCenter","newCenter","_subscribeToFitBoundsUpdates","fitBoundsPadding","_isLatLngBoundsLiteral","newBounds","union","z","emitter","placeId","stop","_setControls","mapControls","controlOptions","control","assign","markerId","AgmMarker","openInfoWindow","animationChange","markerClick","markerDblClick","markerRightClick","_markerAddedToManger","_fitBoundsDetails$","handleInfoWindowUpdate","Number","_updateFitBoundsDetails","asObservable","cs","dcs","rc","ds","de","mover","mout","anChng","AgmPolygon","_polygonManager","polyClick","polyDblClick","polyDrag","polyDragEnd","polyDragStart","polyMouseDown","polyMouseMove","polyMouseOut","polyMouseOver","polyMouseUp","polyRightClick","polyPathsChange","_polygonAddedToManager","_init","handlers","paths$","pathEvent","_polygonOptionsAttributes","AgmPolylineIcon","AgmPolylinePoint","positionChanged","polylineId","AgmPolyline","_polylineManager","lineClick","lineDblClick","lineDrag","lineDragEnd","lineDragStart","lineMouseDown","lineMouseMove","lineMouseOut","lineMouseOver","lineMouseUp","lineRightClick","polyPathChange","_polylineAddedToManager","points","pointSub","iconSub","iconSequences","_polylineOptionsAttributes","ob$","toArray","AgmRectangle","rectangleClick","rectangleDblClick","_rectangleAddedToManager","_updateRectangleOptionsChanges","getNorthEast","getSouthWest","layerId$3","AgmTransitLayer","coreDirectives","AgmCoreModule","forRoot","lazyMapsAPILoaderConfig","ngModule","useClass","useValue","declarations","exports","ɵa","ɵb","ɵc","ɵd","ɵe"],"sources":["C:/Users/perez/OneDrive/Escritorio/map/node_modules/@agm/core/fesm2015/agm-core.js"],"sourcesContent":["import { __awaiter } from 'tslib';\nimport { Injectable, NgZone, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Optional, Inject, LOCALE_ID, Directive, Input, EventEmitter, Output, Self, Component, ElementRef, PLATFORM_ID, ContentChildren, QueryList, forwardRef, NgModule } from '@angular/core';\nimport { Observable, BehaviorSubject, from, timer, ReplaySubject, bindCallback, of, throwError, fromEventPattern, merge, Subject } from 'rxjs';\nimport { flatMap, sample, switchMap, map, shareReplay, multicast, startWith, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\n\nclass MapsAPILoader {\n}\nMapsAPILoader.decorators = [\n    { type: Injectable }\n];\n\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\nclass GoogleMapsAPIWrapper {\n    constructor(_loader, _zone) {\n        this._loader = _loader;\n        this._zone = _zone;\n        this._map =\n            new Promise((resolve) => { this._mapResolver = resolve; });\n    }\n    createMap(el, mapOptions) {\n        return this._zone.runOutsideAngular(() => {\n            return this._loader.load().then(() => {\n                const map = new google.maps.Map(el, mapOptions);\n                this._mapResolver(map);\n                return;\n            });\n        });\n    }\n    setMapOptions(options) {\n        return this._zone.runOutsideAngular(() => {\n            this._map.then((m) => { m.setOptions(options); });\n        });\n    }\n    /**\n     * Creates a google map marker with the map context\n     */\n    createMarker(options = {}, addToMap = true) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                if (addToMap) {\n                    options.map = map;\n                }\n                return new google.maps.Marker(options);\n            });\n        });\n    }\n    createInfoWindow(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then(() => new google.maps.InfoWindow(options));\n        });\n    }\n    /**\n     * Creates a google.map.Circle for the current map.\n     */\n    createCircle(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                options.map = map;\n                return new google.maps.Circle(options);\n            });\n        });\n    }\n    /**\n     * Creates a google.map.Rectangle for the current map.\n     */\n    createRectangle(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                options.map = map;\n                return new google.maps.Rectangle(options);\n            });\n        });\n    }\n    createPolyline(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this.getNativeMap().then((map) => {\n                const line = new google.maps.Polyline(options);\n                line.setMap(map);\n                return line;\n            });\n        });\n    }\n    createPolygon(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this.getNativeMap().then((map) => {\n                const polygon = new google.maps.Polygon(options);\n                polygon.setMap(map);\n                return polygon;\n            });\n        });\n    }\n    /**\n     * Creates a new google.map.Data layer for the current map\n     */\n    createDataLayer(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then(m => {\n                const data = new google.maps.Data(options);\n                data.setMap(m);\n                return data;\n            });\n        });\n    }\n    /**\n     * Creates a TransitLayer instance for a map\n     * @returns a new transit layer object\n     */\n    createTransitLayer() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                const newLayer = new google.maps.TransitLayer();\n                newLayer.setMap(map);\n                return newLayer;\n            });\n        });\n    }\n    /**\n     * Creates a BicyclingLayer instance for a map\n     * @returns a new bicycling layer object\n     */\n    createBicyclingLayer() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                const newLayer = new google.maps.BicyclingLayer();\n                newLayer.setMap(map);\n                return newLayer;\n            });\n        });\n    }\n    /**\n     * Determines if given coordinates are insite a Polygon path.\n     */\n    containsLocation(latLng, polygon) {\n        return this._map.then(() => google.maps.geometry.poly.containsLocation(latLng, polygon));\n    }\n    subscribeToMapEvent(eventName) {\n        return new Observable((observer) => {\n            this._map.then(m => m.addListener(eventName, () => this._zone.run(() => observer.next(arguments[0]))));\n        });\n    }\n    clearInstanceListeners() {\n        return this._zone.runOutsideAngular(() => {\n            this._map.then((map) => {\n                google.maps.event.clearInstanceListeners(map);\n            });\n        });\n    }\n    setCenter(latLng) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.setCenter(latLng));\n        });\n    }\n    getZoom() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getZoom());\n        });\n    }\n    getBounds() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getBounds());\n        });\n    }\n    getMapTypeId() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getMapTypeId());\n        });\n    }\n    setZoom(zoom) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.setZoom(zoom));\n        });\n    }\n    getCenter() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getCenter());\n        });\n    }\n    panTo(latLng) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.panTo(latLng));\n        });\n    }\n    panBy(x, y) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.panBy(x, y));\n        });\n    }\n    fitBounds(latLng, padding) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.fitBounds(latLng, padding));\n        });\n    }\n    panToBounds(latLng, padding) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.panToBounds(latLng, padding));\n        });\n    }\n    /**\n     * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n     */\n    getNativeMap() { return this._map; }\n    /**\n     * Triggers the given event name on the map instance.\n     */\n    triggerMapEvent(eventName) {\n        return this._map.then((m) => google.maps.event.trigger(m, eventName));\n    }\n}\nGoogleMapsAPIWrapper.decorators = [\n    { type: Injectable }\n];\nGoogleMapsAPIWrapper.ctorParameters = () => [\n    { type: MapsAPILoader },\n    { type: NgZone }\n];\n\nclass CircleManager {\n    constructor(_apiWrapper, _zone) {\n        this._apiWrapper = _apiWrapper;\n        this._zone = _zone;\n        this._circles = new Map();\n    }\n    addCircle(circle) {\n        this._apiWrapper.getNativeMap().then(() => this._circles.set(circle, this._apiWrapper.createCircle({\n            center: { lat: circle.latitude, lng: circle.longitude },\n            clickable: circle.clickable,\n            draggable: circle.draggable,\n            editable: circle.editable,\n            fillColor: circle.fillColor,\n            fillOpacity: circle.fillOpacity,\n            radius: circle.radius,\n            strokeColor: circle.strokeColor,\n            strokeOpacity: circle.strokeOpacity,\n            strokePosition: google.maps.StrokePosition[circle.strokePosition],\n            strokeWeight: circle.strokeWeight,\n            visible: circle.visible,\n            zIndex: circle.zIndex,\n        })));\n    }\n    /**\n     * Removes the given circle from the map.\n     */\n    removeCircle(circle) {\n        return this._circles.get(circle).then((c) => {\n            c.setMap(null);\n            this._circles.delete(circle);\n        });\n    }\n    setOptions(circle, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._circles.get(circle).then((c) => {\n                const actualParam = options.strokePosition;\n                options.strokePosition = google.maps.StrokePosition[actualParam];\n                c.setOptions(options);\n            });\n        });\n    }\n    getBounds(circle) {\n        return this._circles.get(circle).then((c) => c.getBounds());\n    }\n    getCenter(circle) {\n        return this._circles.get(circle).then((c) => c.getCenter());\n    }\n    getRadius(circle) {\n        return this._circles.get(circle).then((c) => c.getRadius());\n    }\n    setCenter(circle) {\n        return this._circles.get(circle).then(c => c.setCenter({ lat: circle.latitude, lng: circle.longitude }));\n    }\n    setEditable(circle) {\n        return this._circles.get(circle).then(c => c.setEditable(circle.editable));\n    }\n    setDraggable(circle) {\n        return this._circles.get(circle).then(c => c.setDraggable(circle.draggable));\n    }\n    setVisible(circle) {\n        return this._circles.get(circle).then(c => c.setVisible(circle.visible));\n    }\n    setRadius(circle) {\n        return this._circles.get(circle).then(c => c.setRadius(circle.radius));\n    }\n    getNativeCircle(circle) {\n        return this._circles.get(circle);\n    }\n    createEventObservable(eventName, circle) {\n        return new Observable((observer) => {\n            let listener = null;\n            this._circles.get(circle).then((c) => {\n                listener = c.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n            return () => {\n                if (listener !== null) {\n                    listener.remove();\n                }\n            };\n        });\n    }\n}\nCircleManager.decorators = [\n    { type: Injectable }\n];\nCircleManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\n\n/**\n * Manages all Data Layers for a Google Map instance.\n */\nclass DataLayerManager {\n    constructor(_wrapper, _zone) {\n        this._wrapper = _wrapper;\n        this._zone = _zone;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a new Data Layer to the map.\n     */\n    addDataLayer(layer) {\n        const newLayer = this._wrapper.createDataLayer({\n            style: layer.style,\n        })\n            .then(d => {\n            if (layer.geoJson) {\n                // NOTE: accessing \"features\" on google.maps.Data is undocumented\n                this.getDataFeatures(d, layer.geoJson).then(features => d.features = features);\n            }\n            return d;\n        });\n        this._layers.set(layer, newLayer);\n    }\n    deleteDataLayer(layer) {\n        this._layers.get(layer).then(l => {\n            l.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n    updateGeoJson(layer, geoJson) {\n        this._layers.get(layer).then(l => {\n            l.forEach(feature => {\n                l.remove(feature);\n                // NOTE: accessing \"features\" on google.maps.Data is undocumented\n                const index = l.features.indexOf(feature, 0);\n                if (index > -1) {\n                    l.features.splice(index, 1);\n                }\n            });\n            this.getDataFeatures(l, geoJson).then(features => l.features = features);\n        });\n    }\n    setDataOptions(layer, options) {\n        this._layers.get(layer).then(l => {\n            l.setControlPosition(options.controlPosition);\n            l.setControls(options.controls);\n            l.setDrawingMode(options.drawingMode);\n            l.setStyle(options.style);\n        });\n    }\n    /**\n     * Creates a Google Maps event listener for the given DataLayer as an Observable\n     */\n    createEventObservable(eventName, layer) {\n        return new Observable((observer) => {\n            this._layers.get(layer).then((d) => {\n                d.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n    /**\n     * Extract features from a geoJson using google.maps Data Class\n     * @param d : google.maps.Data class instance\n     * @param geoJson : url or geojson object\n     */\n    getDataFeatures(d, geoJson) {\n        return new Promise((resolve, reject) => {\n            if (typeof geoJson === 'object') {\n                try {\n                    const features = d.addGeoJson(geoJson);\n                    resolve(features);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n            else if (typeof geoJson === 'string') {\n                d.loadGeoJson(geoJson, null, resolve);\n            }\n            else {\n                reject(`Impossible to extract features from geoJson: wrong argument type`);\n            }\n        });\n    }\n}\nDataLayerManager.decorators = [\n    { type: Injectable }\n];\nDataLayerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\n\n/**\n * Class to implement when you what to be able to make it work with the auto fit bounds feature\n * of AGM.\n */\nclass FitBoundsAccessor {\n}\n/**\n * The FitBoundsService is responsible for computing the bounds of the a single map.\n */\nclass FitBoundsService {\n    constructor(loader) {\n        this._boundsChangeSampleTime$ = new BehaviorSubject(200);\n        this._includeInBounds$ = new BehaviorSubject(new Map());\n        this.bounds$ = from(loader.load()).pipe(flatMap(() => this._includeInBounds$), sample(this._boundsChangeSampleTime$.pipe(switchMap(time => timer(0, time)))), map(includeInBounds => this._generateBounds(includeInBounds)), shareReplay(1));\n    }\n    _generateBounds(includeInBounds) {\n        const bounds = new google.maps.LatLngBounds();\n        includeInBounds.forEach(b => bounds.extend(b));\n        return bounds;\n    }\n    addToBounds(latLng) {\n        const id = this._createIdentifier(latLng);\n        if (this._includeInBounds$.value.has(id)) {\n            return;\n        }\n        const boundsMap = this._includeInBounds$.value;\n        boundsMap.set(id, latLng);\n        this._includeInBounds$.next(boundsMap);\n    }\n    removeFromBounds(latLng) {\n        const boundsMap = this._includeInBounds$.value;\n        boundsMap.delete(this._createIdentifier(latLng));\n        this._includeInBounds$.next(boundsMap);\n    }\n    changeFitBoundsChangeSampleTime(timeMs) {\n        this._boundsChangeSampleTime$.next(timeMs);\n    }\n    getBounds$() {\n        return this.bounds$;\n    }\n    _createIdentifier(latLng) {\n        return `${latLng.lat}+${latLng.lng}`;\n    }\n}\nFitBoundsService.decorators = [\n    { type: Injectable }\n];\nFitBoundsService.ctorParameters = () => [\n    { type: MapsAPILoader }\n];\n\nclass AgmGeocoder {\n    constructor(loader) {\n        const connectableGeocoder$ = new Observable(subscriber => {\n            loader.load().then(() => subscriber.next());\n        })\n            .pipe(map(() => this._createGeocoder()), multicast(new ReplaySubject(1)));\n        connectableGeocoder$.connect(); // ignore the subscription\n        // since we will remain subscribed till application exits\n        this.geocoder$ = connectableGeocoder$;\n    }\n    geocode(request) {\n        return this.geocoder$.pipe(switchMap((geocoder) => this._getGoogleResults(geocoder, request)));\n    }\n    _getGoogleResults(geocoder, request) {\n        const geocodeObservable = bindCallback(geocoder.geocode);\n        return geocodeObservable(request).pipe(switchMap(([results, status]) => {\n            if (status === google.maps.GeocoderStatus.OK) {\n                return of(results);\n            }\n            return throwError(status);\n        }));\n    }\n    _createGeocoder() {\n        return new google.maps.Geocoder();\n    }\n}\nAgmGeocoder.ɵprov = ɵɵdefineInjectable({ factory: function AgmGeocoder_Factory() { return new AgmGeocoder(ɵɵinject(MapsAPILoader)); }, token: AgmGeocoder, providedIn: \"root\" });\nAgmGeocoder.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nAgmGeocoder.ctorParameters = () => [\n    { type: MapsAPILoader }\n];\n\nclass WindowRef {\n    getNativeWindow() { return window; }\n}\nclass DocumentRef {\n    getNativeDocument() { return document; }\n}\nconst BROWSER_GLOBALS_PROVIDERS = [WindowRef, DocumentRef];\n\nvar GoogleMapsScriptProtocol;\n(function (GoogleMapsScriptProtocol) {\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTP\"] = 1] = \"HTTP\";\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTPS\"] = 2] = \"HTTPS\";\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"AUTO\"] = 3] = \"AUTO\";\n})(GoogleMapsScriptProtocol || (GoogleMapsScriptProtocol = {}));\n/**\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\n * LazyMapsAPILoaderConfig}.\n */\nconst LAZY_MAPS_API_CONFIG = new InjectionToken('angular-google-maps LAZY_MAPS_API_CONFIG');\nclass LazyMapsAPILoader extends MapsAPILoader {\n    constructor(config = null, w, d, localeId) {\n        super();\n        this.localeId = localeId;\n        this._SCRIPT_ID = 'agmGoogleMapsApiScript';\n        this.callbackName = `agmLazyMapsAPILoader`;\n        this._config = config || {};\n        this._windowRef = w;\n        this._documentRef = d;\n    }\n    load() {\n        const window = this._windowRef.getNativeWindow();\n        if (window.google && window.google.maps) {\n            // Google maps already loaded on the page.\n            return Promise.resolve();\n        }\n        if (this._scriptLoadingPromise) {\n            return this._scriptLoadingPromise;\n        }\n        // this can happen in HMR situations or Stackblitz.io editors.\n        const scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\n        if (scriptOnPage) {\n            this._assignScriptLoadingPromise(scriptOnPage);\n            return this._scriptLoadingPromise;\n        }\n        const script = this._documentRef.getNativeDocument().createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.id = this._SCRIPT_ID;\n        script.src = this._getScriptSrc(this.callbackName);\n        this._assignScriptLoadingPromise(script);\n        this._documentRef.getNativeDocument().body.appendChild(script);\n        return this._scriptLoadingPromise;\n    }\n    _assignScriptLoadingPromise(scriptElem) {\n        this._scriptLoadingPromise = new Promise((resolve, reject) => {\n            this._windowRef.getNativeWindow()[this.callbackName] = () => {\n                resolve();\n            };\n            scriptElem.onerror = (error) => {\n                reject(error);\n            };\n        });\n    }\n    _getScriptSrc(callbackName) {\n        const protocolType = (this._config && this._config.protocol) || GoogleMapsScriptProtocol.HTTPS;\n        let protocol;\n        switch (protocolType) {\n            case GoogleMapsScriptProtocol.AUTO:\n                protocol = '';\n                break;\n            case GoogleMapsScriptProtocol.HTTP:\n                protocol = 'http:';\n                break;\n            case GoogleMapsScriptProtocol.HTTPS:\n                protocol = 'https:';\n                break;\n        }\n        const hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n        const queryParams = {\n            v: this._config.apiVersion || 'quarterly',\n            callback: callbackName,\n            key: this._config.apiKey,\n            client: this._config.clientId,\n            channel: this._config.channel,\n            libraries: this._config.libraries,\n            region: this._config.region,\n            language: this._config.language || (this.localeId !== 'en-US' ? this.localeId : null),\n        };\n        const params = Object.keys(queryParams)\n            .filter((k) => queryParams[k] != null)\n            .filter((k) => {\n            // remove empty arrays\n            return !Array.isArray(queryParams[k]) ||\n                (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\n        })\n            .map((k) => {\n            // join arrays as comma seperated strings\n            const i = queryParams[k];\n            if (Array.isArray(i)) {\n                return { key: k, value: i.join(',') };\n            }\n            return { key: k, value: queryParams[k] };\n        })\n            .map((entry) => {\n            return `${entry.key}=${entry.value}`;\n        })\n            .join('&');\n        return `${protocol}//${hostAndPath}?${params}`;\n    }\n}\nLazyMapsAPILoader.decorators = [\n    { type: Injectable }\n];\nLazyMapsAPILoader.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_MAPS_API_CONFIG,] }] },\n    { type: WindowRef },\n    { type: DocumentRef },\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n\nclass MarkerManager {\n    constructor(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._markers = new Map();\n    }\n    convertAnimation(uiAnim) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (uiAnim === null) {\n                return null;\n            }\n            else {\n                return this._mapsWrapper.getNativeMap().then(() => google.maps.Animation[uiAnim]);\n            }\n        });\n    }\n    deleteMarker(markerDirective) {\n        const markerPromise = this._markers.get(markerDirective);\n        if (markerPromise == null) {\n            // marker already deleted\n            return Promise.resolve();\n        }\n        return markerPromise.then((marker) => {\n            return this._zone.run(() => {\n                marker.setMap(null);\n                this._markers.delete(markerDirective);\n            });\n        });\n    }\n    updateMarkerPosition(marker) {\n        return this._markers.get(marker).then((m) => m.setPosition({ lat: marker.latitude, lng: marker.longitude }));\n    }\n    updateTitle(marker) {\n        return this._markers.get(marker).then((m) => m.setTitle(marker.title));\n    }\n    updateLabel(marker) {\n        return this._markers.get(marker).then((m) => { m.setLabel(marker.label); });\n    }\n    updateDraggable(marker) {\n        return this._markers.get(marker).then((m) => m.setDraggable(marker.draggable));\n    }\n    updateIcon(marker) {\n        return this._markers.get(marker).then((m) => m.setIcon(marker.iconUrl));\n    }\n    updateOpacity(marker) {\n        return this._markers.get(marker).then((m) => m.setOpacity(marker.opacity));\n    }\n    updateVisible(marker) {\n        return this._markers.get(marker).then((m) => m.setVisible(marker.visible));\n    }\n    updateZIndex(marker) {\n        return this._markers.get(marker).then((m) => m.setZIndex(marker.zIndex));\n    }\n    updateClickable(marker) {\n        return this._markers.get(marker).then((m) => m.setClickable(marker.clickable));\n    }\n    updateAnimation(marker) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const m = yield this._markers.get(marker);\n            m.setAnimation(yield this.convertAnimation(marker.animation));\n        });\n    }\n    addMarker(marker) {\n        const markerPromise = new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n            return this._mapsWrapper.createMarker({\n                position: { lat: marker.latitude, lng: marker.longitude },\n                label: marker.label,\n                draggable: marker.draggable,\n                icon: marker.iconUrl,\n                opacity: marker.opacity,\n                visible: marker.visible,\n                zIndex: marker.zIndex,\n                title: marker.title,\n                clickable: marker.clickable,\n                animation: yield this.convertAnimation(marker.animation),\n            }).then(resolve);\n        }));\n        this._markers.set(marker, markerPromise);\n    }\n    getNativeMarker(marker) {\n        return this._markers.get(marker);\n    }\n    createEventObservable(eventName, marker) {\n        return new Observable(observer => {\n            this._markers.get(marker).then(m => m.addListener(eventName, e => this._zone.run(() => observer.next(e))));\n        });\n    }\n}\nMarkerManager.decorators = [\n    { type: Injectable }\n];\nMarkerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\n\nclass InfoWindowManager {\n    constructor(_mapsWrapper, _zone, _markerManager) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._markerManager = _markerManager;\n        this._infoWindows = new Map();\n    }\n    deleteInfoWindow(infoWindow) {\n        const iWindow = this._infoWindows.get(infoWindow);\n        if (iWindow == null) {\n            // info window already deleted\n            return Promise.resolve();\n        }\n        return iWindow.then((i) => {\n            return this._zone.run(() => {\n                i.close();\n                this._infoWindows.delete(infoWindow);\n            });\n        });\n    }\n    setPosition(infoWindow) {\n        return this._infoWindows.get(infoWindow).then((i) => i.setPosition({\n            lat: infoWindow.latitude,\n            lng: infoWindow.longitude,\n        }));\n    }\n    setZIndex(infoWindow) {\n        return this._infoWindows.get(infoWindow)\n            .then((i) => i.setZIndex(infoWindow.zIndex));\n    }\n    open(infoWindow) {\n        return this._infoWindows.get(infoWindow).then((w) => {\n            if (infoWindow.hostMarker != null) {\n                return this._markerManager.getNativeMarker(infoWindow.hostMarker).then((marker) => {\n                    return this._mapsWrapper.getNativeMap().then((map) => w.open(map, marker));\n                });\n            }\n            return this._mapsWrapper.getNativeMap().then((map) => w.open(map));\n        });\n    }\n    close(infoWindow) {\n        return this._infoWindows.get(infoWindow).then((w) => w.close());\n    }\n    setOptions(infoWindow, options) {\n        return this._infoWindows.get(infoWindow).then((i) => i.setOptions(options));\n    }\n    addInfoWindow(infoWindow) {\n        const options = {\n            content: infoWindow.content,\n            maxWidth: infoWindow.maxWidth,\n            zIndex: infoWindow.zIndex,\n            disableAutoPan: infoWindow.disableAutoPan,\n        };\n        if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\n            options.position = { lat: infoWindow.latitude, lng: infoWindow.longitude };\n        }\n        const infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\n        this._infoWindows.set(infoWindow, infoWindowPromise);\n    }\n    /**\n     * Creates a Google Maps event listener for the given InfoWindow as an Observable\n     */\n    createEventObservable(eventName, infoWindow) {\n        return new Observable((observer) => {\n            this._infoWindows.get(infoWindow).then((i) => {\n                i.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n}\nInfoWindowManager.decorators = [\n    { type: Injectable }\n];\nInfoWindowManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone },\n    { type: MarkerManager }\n];\n\n/**\n * Manages all KML Layers for a Google Map instance.\n */\nclass KmlLayerManager {\n    constructor(_wrapper, _zone) {\n        this._wrapper = _wrapper;\n        this._zone = _zone;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a new KML Layer to the map.\n     */\n    addKmlLayer(layer) {\n        const newLayer = this._wrapper.getNativeMap().then(m => {\n            return new google.maps.KmlLayer({\n                clickable: layer.clickable,\n                map: m,\n                preserveViewport: layer.preserveViewport,\n                screenOverlays: layer.screenOverlays,\n                suppressInfoWindows: layer.suppressInfoWindows,\n                url: layer.url,\n                zIndex: layer.zIndex,\n            });\n        });\n        this._layers.set(layer, newLayer);\n    }\n    setOptions(layer, options) {\n        this._layers.get(layer).then(l => l.setOptions(options));\n    }\n    deleteKmlLayer(layer) {\n        this._layers.get(layer).then(l => {\n            l.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n    /**\n     * Creates a Google Maps event listener for the given KmlLayer as an Observable\n     */\n    createEventObservable(eventName, layer) {\n        return new Observable((observer) => {\n            this._layers.get(layer).then((m) => {\n                m.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n}\nKmlLayerManager.decorators = [\n    { type: Injectable }\n];\nKmlLayerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\n\n/**\n * This class manages Transit and Bicycling Layers for a Google Map instance.\n */\nclass LayerManager {\n    constructor(_wrapper) {\n        this._wrapper = _wrapper;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a transit layer to a map instance.\n     * @param layer - a TransitLayer object\n     * @param _options - TransitLayerOptions options\n     * @returns void\n     */\n    addTransitLayer(layer) {\n        const newLayer = this._wrapper.createTransitLayer();\n        this._layers.set(layer, newLayer);\n    }\n    /**\n     * Adds a bicycling layer to a map instance.\n     * @param layer - a bicycling layer object\n     * @param _options - BicyclingLayer options\n     * @returns void\n     */\n    addBicyclingLayer(layer) {\n        const newLayer = this._wrapper.createBicyclingLayer();\n        this._layers.set(layer, newLayer);\n    }\n    /**\n     * Deletes a map layer\n     * @param layer - the layer to delete\n     */\n    deleteLayer(layer) {\n        return this._layers.get(layer).then(currentLayer => {\n            currentLayer.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n}\nLayerManager.decorators = [\n    { type: Injectable }\n];\nLayerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper }\n];\n\n/**\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\n * Tag.\n * It's important that the Google Maps API script gets loaded first on the page.\n */\nclass NoOpMapsAPILoader {\n    load() {\n        if (!window.google || !window.google.maps) {\n            throw new Error('Google Maps API not loaded on page. Make sure window.google.maps is available!');\n        }\n        return Promise.resolve();\n    }\n}\n\nfunction createMVCEventObservable(array) {\n    const eventNames = ['insert_at', 'remove_at', 'set_at'];\n    return fromEventPattern(handler => eventNames.map(eventName => array.addListener(eventName, (index, previous) => handler.apply(array, [{ newArr: array.getArray(), eventName, index, previous }]))), (_handler, evListeners) => evListeners.forEach(evListener => evListener.remove()));\n}\nclass MvcArrayMock {\n    constructor() {\n        this.vals = [];\n        this.listeners = {\n            remove_at: [],\n            insert_at: [],\n            set_at: [],\n        };\n    }\n    clear() {\n        for (let i = this.vals.length - 1; i >= 0; i--) {\n            this.removeAt(i);\n        }\n    }\n    getArray() {\n        return [...this.vals];\n    }\n    getAt(i) {\n        return this.vals[i];\n    }\n    getLength() {\n        return this.vals.length;\n    }\n    insertAt(i, elem) {\n        this.vals.splice(i, 0, elem);\n        this.listeners.insert_at.forEach(listener => listener(i));\n    }\n    pop() {\n        const deleted = this.vals.pop();\n        this.listeners.remove_at.forEach(listener => listener(this.vals.length, deleted));\n        return deleted;\n    }\n    push(elem) {\n        this.vals.push(elem);\n        this.listeners.insert_at.forEach(listener => listener(this.vals.length - 1));\n        return this.vals.length;\n    }\n    removeAt(i) {\n        const deleted = this.vals.splice(i, 1)[0];\n        this.listeners.remove_at.forEach(listener => listener(i, deleted));\n        return deleted;\n    }\n    setAt(i, elem) {\n        const deleted = this.vals[i];\n        this.vals[i] = elem;\n        this.listeners.set_at.forEach(listener => listener(i, deleted));\n    }\n    forEach(callback) {\n        this.vals.forEach(callback);\n    }\n    addListener(eventName, handler) {\n        const listenerArr = this.listeners[eventName];\n        listenerArr.push(handler);\n        return {\n            remove: () => {\n                listenerArr.splice(listenerArr.indexOf(handler), 1);\n            },\n        };\n    }\n    bindTo() { throw new Error('Not implemented'); }\n    changed() { throw new Error('Not implemented'); }\n    get() { throw new Error('Not implemented'); }\n    notify() { throw new Error('Not implemented'); }\n    set() { throw new Error('Not implemented'); }\n    setValues() { throw new Error('Not implemented'); }\n    unbind() { throw new Error('Not implemented'); }\n    unbindAll() { throw new Error('Not implemented'); }\n}\n\nclass PolygonManager {\n    constructor(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._polygons = new Map();\n    }\n    addPolygon(path) {\n        const polygonPromise = this._mapsWrapper.createPolygon({\n            clickable: path.clickable,\n            draggable: path.draggable,\n            editable: path.editable,\n            fillColor: path.fillColor,\n            fillOpacity: path.fillOpacity,\n            geodesic: path.geodesic,\n            paths: path.paths,\n            strokeColor: path.strokeColor,\n            strokeOpacity: path.strokeOpacity,\n            strokeWeight: path.strokeWeight,\n            visible: path.visible,\n            zIndex: path.zIndex,\n        });\n        this._polygons.set(path, polygonPromise);\n    }\n    updatePolygon(polygon) {\n        const m = this._polygons.get(polygon);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => this._zone.run(() => { l.setPaths(polygon.paths); }));\n    }\n    setPolygonOptions(path, options) {\n        return this._polygons.get(path).then((l) => { l.setOptions(options); });\n    }\n    deletePolygon(paths) {\n        const m = this._polygons.get(paths);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => {\n            return this._zone.run(() => {\n                l.setMap(null);\n                this._polygons.delete(paths);\n            });\n        });\n    }\n    getPath(polygonDirective) {\n        return this._polygons.get(polygonDirective)\n            .then((polygon) => polygon.getPath().getArray());\n    }\n    getPaths(polygonDirective) {\n        return this._polygons.get(polygonDirective)\n            .then((polygon) => polygon.getPaths().getArray().map((p) => p.getArray()));\n    }\n    createEventObservable(eventName, path) {\n        return new Observable((observer) => {\n            this._polygons.get(path).then((l) => {\n                l.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n    createPathEventObservable(agmPolygon) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const polygon = yield this._polygons.get(agmPolygon);\n            const paths = polygon.getPaths();\n            const pathsChanges$ = createMVCEventObservable(paths);\n            return pathsChanges$.pipe(startWith({ newArr: paths.getArray() }), // in order to subscribe to them all\n            switchMap(parentMVEvent => merge(... // rest parameter\n            parentMVEvent.newArr.map((chMVC, index) => createMVCEventObservable(chMVC)\n                .pipe(map(chMVCEvent => ({ parentMVEvent, chMVCEvent, pathIndex: index })))))\n                .pipe(// start the merged ob with an event signinifing change to parent\n            startWith({ parentMVEvent, chMVCEvent: null, pathIndex: null }))), skip(1), // skip the manually added event\n            map(({ parentMVEvent, chMVCEvent, pathIndex }) => {\n                let retVal;\n                if (!chMVCEvent) {\n                    retVal = {\n                        newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n                        eventName: parentMVEvent.eventName,\n                        index: parentMVEvent.index,\n                    };\n                    if (parentMVEvent.previous) {\n                        retVal.previous = parentMVEvent.previous.getArray();\n                    }\n                }\n                else {\n                    retVal = {\n                        newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n                        pathIndex,\n                        eventName: chMVCEvent.eventName,\n                        index: chMVCEvent.index,\n                    };\n                    if (chMVCEvent.previous) {\n                        retVal.previous = chMVCEvent.previous;\n                    }\n                }\n                return retVal;\n            }));\n        });\n    }\n}\nPolygonManager.decorators = [\n    { type: Injectable }\n];\nPolygonManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\n\nclass PolylineManager {\n    constructor(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._polylines = new Map();\n    }\n    static _convertPoints(line) {\n        const path = line._getPoints().map((point) => {\n            return { lat: point.latitude, lng: point.longitude };\n        });\n        return path;\n    }\n    static _convertPath(path) {\n        const symbolPath = google.maps.SymbolPath[path];\n        if (typeof symbolPath === 'number') {\n            return symbolPath;\n        }\n        else {\n            return path;\n        }\n    }\n    static _convertIcons(line) {\n        const icons = line._getIcons().map(agmIcon => ({\n            fixedRotation: agmIcon.fixedRotation,\n            offset: agmIcon.offset,\n            repeat: agmIcon.repeat,\n            icon: {\n                anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),\n                fillColor: agmIcon.fillColor,\n                fillOpacity: agmIcon.fillOpacity,\n                path: PolylineManager._convertPath(agmIcon.path),\n                rotation: agmIcon.rotation,\n                scale: agmIcon.scale,\n                strokeColor: agmIcon.strokeColor,\n                strokeOpacity: agmIcon.strokeOpacity,\n                strokeWeight: agmIcon.strokeWeight,\n            },\n        }));\n        // prune undefineds;\n        icons.forEach(icon => {\n            Object.entries(icon).forEach(([key, val]) => {\n                if (typeof val === 'undefined') {\n                    delete icon[key];\n                }\n            });\n            if (typeof icon.icon.anchor.x === 'undefined' ||\n                typeof icon.icon.anchor.y === 'undefined') {\n                delete icon.icon.anchor;\n            }\n        });\n        return icons;\n    }\n    addPolyline(line) {\n        const polylinePromise = this._mapsWrapper.getNativeMap()\n            .then(() => [PolylineManager._convertPoints(line),\n            PolylineManager._convertIcons(line)])\n            .then(([path, icons]) => this._mapsWrapper.createPolyline({\n            clickable: line.clickable,\n            draggable: line.draggable,\n            editable: line.editable,\n            geodesic: line.geodesic,\n            strokeColor: line.strokeColor,\n            strokeOpacity: line.strokeOpacity,\n            strokeWeight: line.strokeWeight,\n            visible: line.visible,\n            zIndex: line.zIndex,\n            path,\n            icons,\n        }));\n        this._polylines.set(line, polylinePromise);\n    }\n    updatePolylinePoints(line) {\n        const path = PolylineManager._convertPoints(line);\n        const m = this._polylines.get(line);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => this._zone.run(() => l.setPath(path)));\n    }\n    updateIconSequences(line) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._mapsWrapper.getNativeMap();\n            const icons = PolylineManager._convertIcons(line);\n            const m = this._polylines.get(line);\n            if (m == null) {\n                return;\n            }\n            return m.then(l => this._zone.run(() => l.setOptions({ icons })));\n        });\n    }\n    setPolylineOptions(line, options) {\n        return this._polylines.get(line).then((l) => { l.setOptions(options); });\n    }\n    deletePolyline(line) {\n        const m = this._polylines.get(line);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => {\n            return this._zone.run(() => {\n                l.setMap(null);\n                this._polylines.delete(line);\n            });\n        });\n    }\n    getMVCPath(agmPolyline) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const polyline = yield this._polylines.get(agmPolyline);\n            return polyline.getPath();\n        });\n    }\n    getPath(agmPolyline) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getMVCPath(agmPolyline)).getArray();\n        });\n    }\n    createEventObservable(eventName, line) {\n        return new Observable((observer) => {\n            this._polylines.get(line).then((l) => {\n                l.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n    createPathEventObservable(line) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mvcPath = yield this.getMVCPath(line);\n            return createMVCEventObservable(mvcPath);\n        });\n    }\n}\nPolylineManager.decorators = [\n    { type: Injectable }\n];\nPolylineManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\n\nclass RectangleManager {\n    constructor(_apiWrapper, _zone) {\n        this._apiWrapper = _apiWrapper;\n        this._zone = _zone;\n        this._rectangles = new Map();\n    }\n    addRectangle(rectangle) {\n        this._apiWrapper.getNativeMap().then(() => this._rectangles.set(rectangle, this._apiWrapper.createRectangle({\n            bounds: {\n                north: rectangle.north,\n                east: rectangle.east,\n                south: rectangle.south,\n                west: rectangle.west,\n            },\n            clickable: rectangle.clickable,\n            draggable: rectangle.draggable,\n            editable: rectangle.editable,\n            fillColor: rectangle.fillColor,\n            fillOpacity: rectangle.fillOpacity,\n            strokeColor: rectangle.strokeColor,\n            strokeOpacity: rectangle.strokeOpacity,\n            strokePosition: google.maps.StrokePosition[rectangle.strokePosition],\n            strokeWeight: rectangle.strokeWeight,\n            visible: rectangle.visible,\n            zIndex: rectangle.zIndex,\n        })));\n    }\n    /**\n     * Removes the given rectangle from the map.\n     */\n    removeRectangle(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            r.setMap(null);\n            this._rectangles.delete(rectangle);\n        });\n    }\n    setOptions(rectangle, options) {\n        return this._rectangles.get(rectangle).then((r) => {\n            const actualStrokePosition = options.strokePosition;\n            options.strokePosition = google.maps.StrokePosition[actualStrokePosition];\n            r.setOptions(options);\n        });\n    }\n    getBounds(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => r.getBounds());\n    }\n    setBounds(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setBounds({\n                north: rectangle.north,\n                east: rectangle.east,\n                south: rectangle.south,\n                west: rectangle.west,\n            });\n        });\n    }\n    setEditable(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setEditable(rectangle.editable);\n        });\n    }\n    setDraggable(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setDraggable(rectangle.draggable);\n        });\n    }\n    setVisible(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setVisible(rectangle.visible);\n        });\n    }\n    createEventObservable(eventName, rectangle) {\n        return new Observable((subsrciber) => {\n            let listener = null;\n            this._rectangles.get(rectangle).then((r) => {\n                listener = r.addListener(eventName, (e) => this._zone.run(() => subsrciber.next(e)));\n            });\n            return () => {\n                if (listener !== null) {\n                    listener.remove();\n                }\n            };\n        });\n    }\n}\nRectangleManager.decorators = [\n    { type: Injectable }\n];\nRectangleManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\n\nlet layerId = 0;\n/*\n * This directive adds a bicycling layer to a google map instance\n * <agm-bicycling-layer [visible]=\"true|false\"> <agm-bicycling-layer>\n * */\nclass AgmBicyclingLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId++).toString();\n        /**\n         * Hide/show bicycling layer\n         */\n        this.visible = true;\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addBicyclingLayer(this);\n        this._addedToManager = true;\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmBicyclingLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteLayer(this);\n    }\n}\nAgmBicyclingLayer.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-bicycling-layer',\n            },] }\n];\nAgmBicyclingLayer.ctorParameters = () => [\n    { type: LayerManager }\n];\nAgmBicyclingLayer.propDecorators = {\n    visible: [{ type: Input }]\n};\n\nclass AgmCircle {\n    constructor(_manager) {\n        this._manager = _manager;\n        /**\n         * Indicates whether this Circle handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this circle over the map. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this circle by dragging the control points shown at\n         * the center and around the circumference of the circle. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * The radius in meters on the Earth's surface.\n         */\n        this.radius = 0;\n        /**\n         * The stroke position. Defaults to CENTER.\n         * This property is not supported on Internet Explorer 8 and earlier.\n         */\n        this.strokePosition = 'CENTER';\n        /**\n         * The stroke width in pixels.\n         */\n        this.strokeWeight = 0;\n        /**\n         * Whether this circle is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the circle's center is changed.\n         */\n        this.centerChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the circle.\n         */\n        this.circleClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the circle.\n         */\n        this.circleDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the circle.\n         */\n        // tslint:disable-next-line: no-output-native\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the circle.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the circle.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the circle.\n         */\n        this.mouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the circle.\n         */\n        this.mouseMove = new EventEmitter();\n        /**\n         * This event is fired on circle mouseout.\n         */\n        this.mouseOut = new EventEmitter();\n        /**\n         * This event is fired on circle mouseover.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the DOM mouseup event is fired on the circle.\n         */\n        this.mouseUp = new EventEmitter();\n        /**\n         * This event is fired when the circle's radius is changed.\n         */\n        this.radiusChange = new EventEmitter();\n        /**\n         * This event is fired when the circle is right-clicked on.\n         */\n        this.rightClick = new EventEmitter();\n        this._circleAddedToManager = false;\n        this._eventSubscriptions = [];\n    }\n    /** @internal */\n    ngOnInit() {\n        this._manager.addCircle(this);\n        this._circleAddedToManager = true;\n        this._registerEventListeners();\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._circleAddedToManager) {\n            return;\n        }\n        // tslint:disable: no-string-literal\n        if (changes['latitude'] || changes['longitude']) {\n            this._manager.setCenter(this);\n        }\n        if (changes['editable']) {\n            this._manager.setEditable(this);\n        }\n        if (changes['draggable']) {\n            this._manager.setDraggable(this);\n        }\n        if (changes['visible']) {\n            this._manager.setVisible(this);\n        }\n        if (changes['radius']) {\n            this._manager.setRadius(this);\n        }\n        // tslint:enable: no-string-literal\n        this._updateCircleOptionsChanges(changes);\n    }\n    _updateCircleOptionsChanges(changes) {\n        const options = {};\n        const optionKeys = Object.keys(changes).filter(k => AgmCircle._mapOptions.indexOf(k) !== -1);\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n        if (optionKeys.length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    }\n    _registerEventListeners() {\n        const events = new Map();\n        events.set('center_changed', this.centerChange);\n        events.set('click', this.circleClick);\n        events.set('dblclick', this.circleDblClick);\n        events.set('drag', this.drag);\n        events.set('dragend', this.dragEnd);\n        events.set('dragstart', this.dragStart);\n        events.set('mousedown', this.mouseDown);\n        events.set('mousemove', this.mouseMove);\n        events.set('mouseout', this.mouseOut);\n        events.set('mouseover', this.mouseOver);\n        events.set('mouseup', this.mouseUp);\n        events.set('radius_changed', this.radiusChange);\n        events.set('rightclick', this.rightClick);\n        events.forEach((eventEmitter, eventName) => {\n            this._eventSubscriptions.push(this._manager.createEventObservable(eventName, this).subscribe((value) => {\n                switch (eventName) {\n                    case 'radius_changed':\n                        this._manager.getRadius(this).then((radius) => eventEmitter.emit(radius));\n                        break;\n                    case 'center_changed':\n                        this._manager.getCenter(this).then((center) => eventEmitter.emit({ lat: center.lat(), lng: center.lng() }));\n                        break;\n                    default:\n                        eventEmitter.emit(value);\n                }\n            }));\n        });\n    }\n    /** @internal */\n    ngOnDestroy() {\n        this._eventSubscriptions.forEach(s => s.unsubscribe());\n        this._eventSubscriptions = null;\n        this._manager.removeCircle(this);\n    }\n    /**\n     * Gets the LatLngBounds of this Circle.\n     */\n    getBounds() { return this._manager.getBounds(this); }\n    getCenter() { return this._manager.getCenter(this); }\n}\nAgmCircle._mapOptions = [\n    'fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\n    'visible', 'zIndex', 'clickable',\n];\nAgmCircle.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-circle',\n            },] }\n];\nAgmCircle.ctorParameters = () => [\n    { type: CircleManager }\n];\nAgmCircle.propDecorators = {\n    latitude: [{ type: Input }],\n    longitude: [{ type: Input }],\n    clickable: [{ type: Input }],\n    draggable: [{ type: Input, args: ['circleDraggable',] }],\n    editable: [{ type: Input }],\n    fillColor: [{ type: Input }],\n    fillOpacity: [{ type: Input }],\n    radius: [{ type: Input }],\n    strokeColor: [{ type: Input }],\n    strokeOpacity: [{ type: Input }],\n    strokePosition: [{ type: Input }],\n    strokeWeight: [{ type: Input }],\n    visible: [{ type: Input }],\n    zIndex: [{ type: Input }],\n    centerChange: [{ type: Output }],\n    circleClick: [{ type: Output }],\n    circleDblClick: [{ type: Output }],\n    drag: [{ type: Output }],\n    dragEnd: [{ type: Output }],\n    dragStart: [{ type: Output }],\n    mouseDown: [{ type: Output }],\n    mouseMove: [{ type: Output }],\n    mouseOut: [{ type: Output }],\n    mouseOver: [{ type: Output }],\n    mouseUp: [{ type: Output }],\n    radiusChange: [{ type: Output }],\n    rightClick: [{ type: Output }]\n};\n\nlet layerId$1 = 0;\n/**\n * AgmDataLayer enables the user to add data layers to the map.\n *\n * ### Example\n * ```typescript\n * import { Component } from 'angular2/core';\n * import { AgmMap, AgmDataLayer } from\n * 'angular-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [AgmMap, AgmDataLayer],\n *  styles: [`\n *    .agm-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\n * \t  </agm-data-layer>\n * </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = -25.274449;\n *   lng: number = 133.775060;\n *   zoom: number = 5;\n *\n * clicked(clickEvent) {\n *    console.log(clickEvent);\n *  }\n *\n *  styleFunc(feature) {\n *    return ({\n *      clickable: false,\n *      fillColor: feature.getProperty('color'),\n *      strokeWeight: 1\n *    });\n *  }\n *\n *  geoJsonObject: Object = {\n *    \"type\": \"FeatureCollection\",\n *    \"features\": [\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"G\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"71\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\n *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\n *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\n *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\n *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\n *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\n *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\n *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"red\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\n *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\n *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\n *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\n *            ],\n *            [\n *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\n *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"yellow\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\n *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\n *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\n *              [132.71, -25.64], [131.87, -25.76]\n *            ],\n *            [\n *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\n *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"g\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"103\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\n *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\n *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\n *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\n *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\n *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\n *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\n *            ],\n *            [\n *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\n *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"l\",\n *          \"color\": \"green\",\n *          \"rank\": \"12\",\n *          \"ascii\": \"108\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"e\",\n *          \"color\": \"red\",\n *          \"rank\": \"5\",\n *          \"ascii\": \"101\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\n *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\n *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\n *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\n *              [144.31, -28.26], [144.14, -27.41]\n *            ],\n *            [\n *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\n *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\n *            ]\n *          ]\n *        }\n *      }\n *    ]\n *  };\n * }\n * ```\n */\nclass AgmDataLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$1++).toString();\n        this._subscriptions = [];\n        /**\n         * This event is fired when a feature in the layer is clicked.\n         */\n        this.layerClick = new EventEmitter();\n        /**\n         * The geoJson to be displayed\n         */\n        this.geoJson = null;\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addDataLayer(this);\n        this._addedToManager = true;\n        this._addEventListeners();\n    }\n    _addEventListeners() {\n        const listeners = [\n            { name: 'click', handler: (ev) => this.layerClick.emit(ev) },\n        ];\n        listeners.forEach((obj) => {\n            const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmDataLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteDataLayer(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach(s => s.unsubscribe());\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        // tslint:disable-next-line: no-string-literal\n        const geoJsonChange = changes['geoJson'];\n        if (geoJsonChange) {\n            this._manager.updateGeoJson(this, geoJsonChange.currentValue);\n        }\n        const dataOptions = AgmDataLayer._dataOptionsAttributes.reduce((options, k) => options[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : this[k], {});\n        this._manager.setDataOptions(this, dataOptions);\n    }\n}\nAgmDataLayer._dataOptionsAttributes = ['style'];\nAgmDataLayer.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-data-layer',\n            },] }\n];\nAgmDataLayer.ctorParameters = () => [\n    { type: DataLayerManager }\n];\nAgmDataLayer.propDecorators = {\n    layerClick: [{ type: Output }],\n    geoJson: [{ type: Input }],\n    style: [{ type: Input }]\n};\n\n/**\n * Adds the given directive to the auto fit bounds feature when the value is true.\n * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\n * @example\n * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\n */\nclass AgmFitBounds {\n    constructor(_fitBoundsAccessor, _fitBoundsService) {\n        this._fitBoundsAccessor = _fitBoundsAccessor;\n        this._fitBoundsService = _fitBoundsService;\n        /**\n         * If the value is true, the element gets added to the bounds of the map.\n         * Default: true.\n         */\n        this.agmFitBounds = true;\n        this._destroyed$ = new Subject();\n        this._latestFitBoundsDetails = null;\n    }\n    /**\n     * @internal\n     */\n    ngOnChanges() {\n        this._updateBounds();\n    }\n    /**\n     * @internal\n     */\n    ngOnInit() {\n        this._fitBoundsAccessor\n            .getFitBoundsDetails$()\n            .pipe(distinctUntilChanged((x, y) => x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng), takeUntil(this._destroyed$))\n            .subscribe(details => this._updateBounds(details));\n    }\n    /*\n     Either the location changed, or visible status changed.\n     Possible state changes are\n     invisible -> visible\n     visible -> invisible\n     visible -> visible (new location)\n    */\n    _updateBounds(newFitBoundsDetails) {\n        // either visibility will change, or location, so remove the old one anyway\n        if (this._latestFitBoundsDetails) {\n            this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n            // don't set latestFitBoundsDetails to null, because we can toggle visibility from\n            // true -> false -> true, in which case we still need old value cached here\n        }\n        if (newFitBoundsDetails) {\n            this._latestFitBoundsDetails = newFitBoundsDetails;\n        }\n        if (!this._latestFitBoundsDetails) {\n            return;\n        }\n        if (this.agmFitBounds === true) {\n            this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\n        }\n    }\n    /**\n     * @internal\n     */\n    ngOnDestroy() {\n        this._destroyed$.next();\n        this._destroyed$.complete();\n        if (this._latestFitBoundsDetails !== null) {\n            this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n        }\n    }\n}\nAgmFitBounds.decorators = [\n    { type: Directive, args: [{\n                selector: '[agmFitBounds]',\n            },] }\n];\nAgmFitBounds.ctorParameters = () => [\n    { type: FitBoundsAccessor, decorators: [{ type: Self }] },\n    { type: FitBoundsService }\n];\nAgmFitBounds.propDecorators = {\n    agmFitBounds: [{ type: Input }]\n};\n\nlet infoWindowId = 0;\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nclass AgmInfoWindow {\n    constructor(_infoWindowManager, _el) {\n        this._infoWindowManager = _infoWindowManager;\n        this._el = _el;\n        /**\n         * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n         */\n        this.isOpen = false;\n        /**\n         * Emits an event when the info window is closed.\n         */\n        this.infoWindowClose = new EventEmitter();\n        this._infoWindowAddedToManager = false;\n        this._id = (infoWindowId++).toString();\n    }\n    ngOnInit() {\n        this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n        this._infoWindowManager.addInfoWindow(this);\n        this._infoWindowAddedToManager = true;\n        this._updateOpenState();\n        this._registerEventListeners();\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._infoWindowAddedToManager) {\n            return;\n        }\n        // tslint:disable: no-string-literal\n        if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\n            typeof this.longitude === 'number') {\n            this._infoWindowManager.setPosition(this);\n        }\n        if (changes['zIndex']) {\n            this._infoWindowManager.setZIndex(this);\n        }\n        if (changes['isOpen']) {\n            this._updateOpenState();\n        }\n        this._setInfoWindowOptions(changes);\n    }\n    // tslint:enable: no-string-literal\n    _registerEventListeners() {\n        this._infoWindowManager.createEventObservable('closeclick', this).subscribe(() => {\n            this.isOpen = false;\n            this.infoWindowClose.emit();\n        });\n    }\n    _updateOpenState() {\n        this.isOpen ? this.open() : this.close();\n    }\n    _setInfoWindowOptions(changes) {\n        const options = {};\n        const optionKeys = Object.keys(changes).filter(k => AgmInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1);\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n        this._infoWindowManager.setOptions(this, options);\n    }\n    /**\n     * Opens the info window.\n     */\n    open() { return this._infoWindowManager.open(this); }\n    /**\n     * Closes the info window.\n     */\n    close() {\n        return this._infoWindowManager.close(this).then(() => { this.infoWindowClose.emit(); });\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return 'AgmInfoWindow-' + this._id.toString(); }\n    /** @internal */\n    ngOnDestroy() { this._infoWindowManager.deleteInfoWindow(this); }\n}\nAgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];\nAgmInfoWindow.decorators = [\n    { type: Component, args: [{\n                selector: 'agm-info-window',\n                template: `<div class='agm-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  `\n            },] }\n];\nAgmInfoWindow.ctorParameters = () => [\n    { type: InfoWindowManager },\n    { type: ElementRef }\n];\nAgmInfoWindow.propDecorators = {\n    latitude: [{ type: Input }],\n    longitude: [{ type: Input }],\n    disableAutoPan: [{ type: Input }],\n    zIndex: [{ type: Input }],\n    maxWidth: [{ type: Input }],\n    isOpen: [{ type: Input }],\n    infoWindowClose: [{ type: Output }]\n};\n\nlet layerId$2 = 0;\nclass AgmKmlLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$2++).toString();\n        this._subscriptions = [];\n        /**\n         * If true, the layer receives mouse events. Default value is true.\n         */\n        this.clickable = true;\n        /**\n         * By default, the input map is centered and zoomed to the bounding box of the contents of the\n         * layer.\n         * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\n         * were never set.\n         */\n        this.preserveViewport = false;\n        /**\n         * Whether to render the screen overlays. Default true.\n         */\n        this.screenOverlays = true;\n        /**\n         * Suppress the rendering of info windows when layer features are clicked.\n         */\n        this.suppressInfoWindows = false;\n        /**\n         * The URL of the KML document to display.\n         */\n        this.url = null;\n        /**\n         * The z-index of the layer.\n         */\n        this.zIndex = null;\n        /**\n         * This event is fired when a feature in the layer is clicked.\n         */\n        this.layerClick = new EventEmitter();\n        /**\n         * This event is fired when the KML layers default viewport has changed.\n         */\n        this.defaultViewportChange = new EventEmitter();\n        /**\n         * This event is fired when the KML layer has finished loading.\n         * At this point it is safe to read the status property to determine if the layer loaded\n         * successfully.\n         */\n        this.statusChange = new EventEmitter();\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addKmlLayer(this);\n        this._addedToManager = true;\n        this._addEventListeners();\n    }\n    ngOnChanges(changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        this._updatePolygonOptions(changes);\n    }\n    _updatePolygonOptions(changes) {\n        const options = Object.keys(changes)\n            .filter(k => AgmKmlLayer._kmlLayerOptions.indexOf(k) !== -1)\n            .reduce((obj, k) => {\n            obj[k] = changes[k].currentValue;\n            return obj;\n        }, {});\n        if (Object.keys(options).length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    }\n    _addEventListeners() {\n        const listeners = [\n            { name: 'click', handler: (ev) => this.layerClick.emit(ev) },\n            { name: 'defaultviewport_changed', handler: () => this.defaultViewportChange.emit() },\n            { name: 'status_changed', handler: () => this.statusChange.emit() },\n        ];\n        listeners.forEach((obj) => {\n            const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmKmlLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteKmlLayer(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach(s => s.unsubscribe());\n    }\n}\nAgmKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\nAgmKmlLayer.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-kml-layer',\n            },] }\n];\nAgmKmlLayer.ctorParameters = () => [\n    { type: KmlLayerManager }\n];\nAgmKmlLayer.propDecorators = {\n    clickable: [{ type: Input }],\n    preserveViewport: [{ type: Input }],\n    screenOverlays: [{ type: Input }],\n    suppressInfoWindows: [{ type: Input }],\n    url: [{ type: Input }],\n    zIndex: [{ type: Input }],\n    layerClick: [{ type: Output }],\n    defaultViewportChange: [{ type: Output }],\n    statusChange: [{ type: Output }]\n};\n\nclass AgmMapControl {\n}\nAgmMapControl.decorators = [\n    { type: Directive }\n];\nAgmMapControl.propDecorators = {\n    position: [{ type: Input }]\n};\nclass AgmFullscreenControl extends AgmMapControl {\n    getOptions() {\n        return {\n            fullscreenControl: true,\n            fullscreenControlOptions: {\n                position: this.position && google.maps.ControlPosition[this.position],\n            },\n        };\n    }\n}\nAgmFullscreenControl.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-map agm-fullscreen-control',\n                providers: [{ provide: AgmMapControl, useExisting: AgmFullscreenControl }],\n            },] }\n];\nclass AgmMapTypeControl extends AgmMapControl {\n    getOptions() {\n        return {\n            mapTypeControl: true,\n            mapTypeControlOptions: {\n                position: this.position && google.maps.ControlPosition[this.position],\n                style: this.style && google.maps.MapTypeControlStyle[this.style],\n                mapTypeIds: this.mapTypeIds && this.mapTypeIds.map(mapTypeId => google.maps.MapTypeId[mapTypeId]),\n            },\n        };\n    }\n}\nAgmMapTypeControl.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-map agm-map-type-control',\n                providers: [{ provide: AgmMapControl, useExisting: AgmMapTypeControl }],\n            },] }\n];\nAgmMapTypeControl.propDecorators = {\n    mapTypeIds: [{ type: Input }],\n    style: [{ type: Input }]\n};\nclass AgmPanControl extends AgmMapControl {\n    getOptions() {\n        return {\n            panControl: true,\n            panControlOptions: {\n                position: this.position && google.maps.ControlPosition[this.position],\n            },\n        };\n    }\n}\nAgmPanControl.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-map agm-pan-control',\n                providers: [{ provide: AgmMapControl, useExisting: AgmPanControl }],\n            },] }\n];\nclass AgmRotateControl extends AgmMapControl {\n    getOptions() {\n        return {\n            rotateControl: true,\n            rotateControlOptions: {\n                position: this.position && google.maps.ControlPosition[this.position],\n            },\n        };\n    }\n}\nAgmRotateControl.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-map agm-rotate-control',\n                providers: [{ provide: AgmMapControl, useExisting: AgmRotateControl }],\n            },] }\n];\nclass AgmScaleControl extends AgmMapControl {\n    getOptions() {\n        return {\n            scaleControl: true,\n        };\n    }\n}\nAgmScaleControl.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-map agm-scale-control',\n                providers: [{ provide: AgmMapControl, useExisting: AgmScaleControl }],\n            },] }\n];\nclass AgmStreetViewControl extends AgmMapControl {\n    getOptions() {\n        return {\n            streetViewControl: true,\n            streetViewControlOptions: {\n                position: this.position && google.maps.ControlPosition[this.position],\n            },\n        };\n    }\n}\nAgmStreetViewControl.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-map agm-street-view-control',\n                providers: [{ provide: AgmMapControl, useExisting: AgmStreetViewControl }],\n            },] }\n];\nclass AgmZoomControl extends AgmMapControl {\n    getOptions() {\n        return {\n            zoomControl: true,\n            zoomControlOptions: {\n                position: this.position && google.maps.ControlPosition[this.position],\n                style: this.style && google.maps.ZoomControlStyle[this.style],\n            },\n        };\n    }\n}\nAgmZoomControl.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-map agm-zoom-control',\n                providers: [{ provide: AgmMapControl, useExisting: AgmZoomControl }],\n            },] }\n];\nAgmZoomControl.propDecorators = {\n    style: [{ type: Input }]\n};\n/**\n * AgmMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the\n * element `agm-map`.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </agm-map>\n *  `\n * })\n * ```\n */\nclass AgmMap {\n    constructor(_elem, _mapsWrapper, \n    // tslint:disable-next-line: ban-types\n    _platformId, _fitBoundsService, _zone) {\n        this._elem = _elem;\n        this._mapsWrapper = _mapsWrapper;\n        this._platformId = _platformId;\n        this._fitBoundsService = _fitBoundsService;\n        this._zone = _zone;\n        /**\n         * The longitude that defines the center of the map.\n         */\n        this.longitude = 0;\n        /**\n         * The latitude that defines the center of the map.\n         */\n        this.latitude = 0;\n        /**\n         * The zoom level of the map. The default zoom level is 8.\n         */\n        this.zoom = 8;\n        /**\n         * Enables/disables if map is draggable.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = true;\n        /**\n         * Enables/disables zoom and center on double click. Enabled by default.\n         */\n        this.disableDoubleClickZoom = false;\n        /**\n         * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n         * value cannot get updated.\n         */\n        this.disableDefaultUI = false;\n        /**\n         * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n         */\n        this.scrollwheel = true;\n        /**\n         * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n         * enabled by default.\n         */\n        this.keyboardShortcuts = true;\n        /**\n         * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n         * modes, these styles will only apply to labels and geometry.\n         */\n        this.styles = [];\n        /**\n         * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n         * used to\n         * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n         */\n        this.usePanning = false;\n        /**\n         * Sets the viewport to contain the given bounds.\n         * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\n         */\n        this.fitBounds = false;\n        /**\n         * The map mapTypeId. Defaults to 'roadmap'.\n         */\n        this.mapTypeId = 'ROADMAP';\n        /**\n         * When false, map icons are not clickable. A map icon represents a point of interest,\n         * also known as a POI. By default map icons are clickable.\n         */\n        this.clickableIcons = true;\n        /**\n         * A map icon represents a point of interest, also known as a POI.\n         * When map icons are clickable by default, an info window is displayed.\n         * When this property is set to false, the info window will not be shown but the click event\n         * will still fire\n         */\n        this.showDefaultInfoWindow = true;\n        /**\n         * This setting controls how gestures on the map are handled.\n         * Allowed values:\n         * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n         * - 'greedy'      (All touch gestures pan or zoom the map.)\n         * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n         * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n         */\n        this.gestureHandling = 'auto';\n        /**\n         * Controls the automatic switching behavior for the angle of incidence of\n         * the map. The only allowed values are 0 and 45. The value 0 causes the map\n         * to always use a 0° overhead view regardless of the zoom level and\n         * viewport. The value 45 causes the tilt angle to automatically switch to\n         * 45 whenever 45° imagery is available for the current zoom level and\n         * viewport, and switch back to 0 whenever 45° imagery is not available\n         * (this is the default behavior). 45° imagery is only available for\n         * satellite and hybrid map types, within some locations, and at some zoom\n         * levels. Note: getTilt returns the current tilt angle, not the value\n         * specified by this option. Because getTilt and this option refer to\n         * different things, do not bind() the tilt property; doing so may yield\n         * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\n         */\n        this.tilt = 0;\n        this._observableSubscriptions = [];\n        /**\n         * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n         * marker or infoWindow).\n         */\n        // tslint:disable-next-line: max-line-length\n        this.mapClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n         * on a marker or infoWindow).\n         */\n        this.mapRightClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n         * on a marker or infoWindow).\n         */\n        this.mapDblClick = new EventEmitter();\n        /**\n         * This event emitter is fired when the map center changes.\n         */\n        this.centerChange = new EventEmitter();\n        /**\n         * This event is fired when the viewport bounds have changed.\n         */\n        this.boundsChange = new EventEmitter();\n        /**\n         * This event is fired when the mapTypeId property changes.\n         */\n        this.mapTypeIdChange = new EventEmitter();\n        /**\n         * This event is fired when the map becomes idle after panning or zooming.\n         */\n        this.idle = new EventEmitter();\n        /**\n         * This event is fired when the zoom level has changed.\n         */\n        this.zoomChange = new EventEmitter();\n        /**\n         * This event is fired when the google map is fully initialized.\n         * You get the google.maps.Map instance as a result of this EventEmitter.\n         */\n        this.mapReady = new EventEmitter();\n        /**\n         * This event is fired when the visible tiles have finished loading.\n         */\n        this.tilesLoaded = new EventEmitter();\n    }\n    /** @internal */\n    ngAfterContentInit() {\n        if (isPlatformServer(this._platformId)) {\n            // The code is running on the server, do nothing\n            return;\n        }\n        // todo: this should be solved with a new component and a viewChild decorator\n        const container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\n        this._initMapInstance(container);\n    }\n    _initMapInstance(el) {\n        this._mapsWrapper.createMap(el, {\n            center: { lat: this.latitude || 0, lng: this.longitude || 0 },\n            zoom: this.zoom,\n            minZoom: this.minZoom,\n            maxZoom: this.maxZoom,\n            controlSize: this.controlSize,\n            disableDefaultUI: this.disableDefaultUI,\n            disableDoubleClickZoom: this.disableDoubleClickZoom,\n            scrollwheel: this.scrollwheel,\n            backgroundColor: this.backgroundColor,\n            draggable: this.draggable,\n            draggableCursor: this.draggableCursor,\n            draggingCursor: this.draggingCursor,\n            keyboardShortcuts: this.keyboardShortcuts,\n            styles: this.styles,\n            mapTypeId: this.mapTypeId.toLocaleLowerCase(),\n            clickableIcons: this.clickableIcons,\n            gestureHandling: this.gestureHandling,\n            tilt: this.tilt,\n            restriction: this.restriction,\n        })\n            .then(() => this._mapsWrapper.getNativeMap())\n            .then(map => this.mapReady.emit(map));\n        // register event listeners\n        this._handleMapCenterChange();\n        this._handleMapZoomChange();\n        this._handleMapMouseEvents();\n        this._handleBoundsChange();\n        this._handleMapTypeIdChange();\n        this._handleTilesLoadedEvent();\n        this._handleIdleEvent();\n        this._handleControlChange();\n    }\n    /** @internal */\n    ngOnDestroy() {\n        // unsubscribe all registered observable subscriptions\n        this._observableSubscriptions.forEach((s) => s.unsubscribe());\n        // remove all listeners from the map instance\n        this._mapsWrapper.clearInstanceListeners();\n        if (this._fitBoundsSubscription) {\n            this._fitBoundsSubscription.unsubscribe();\n        }\n    }\n    /* @internal */\n    ngOnChanges(changes) {\n        this._updateMapOptionsChanges(changes);\n        this._updatePosition(changes);\n    }\n    _updateMapOptionsChanges(changes) {\n        const options = {};\n        const optionKeys = Object.keys(changes).filter(k => AgmMap._mapOptionsAttributes.indexOf(k) !== -1);\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n        this._mapsWrapper.setMapOptions(options);\n    }\n    /**\n     * Triggers a resize event on the google map instance.\n     * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n     * Returns a promise that gets resolved after the event was triggered.\n     */\n    triggerResize(recenter = true) {\n        // Note: When we would trigger the resize event and show the map in the same turn (which is a\n        // common case for triggering a resize event), then the resize event would not\n        // work (to show the map), so we trigger the event in a timeout.\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                return this._mapsWrapper.triggerMapEvent('resize').then(() => {\n                    if (recenter) {\n                        this.fitBounds != null ? this._fitBounds() : this._setCenter();\n                    }\n                    resolve();\n                });\n            });\n        });\n    }\n    _updatePosition(changes) {\n        // tslint:disable: no-string-literal\n        if (changes['latitude'] == null && changes['longitude'] == null &&\n            !changes['fitBounds']) {\n            // no position update needed\n            return;\n        }\n        // tslint:enable: no-string-literal\n        // we prefer fitBounds in changes\n        if ('fitBounds' in changes) {\n            this._fitBounds();\n            return;\n        }\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n            return;\n        }\n        this._setCenter();\n    }\n    _setCenter() {\n        const newCenter = {\n            lat: this.latitude,\n            lng: this.longitude,\n        };\n        if (this.usePanning) {\n            this._mapsWrapper.panTo(newCenter);\n        }\n        else {\n            this._mapsWrapper.setCenter(newCenter);\n        }\n    }\n    _fitBounds() {\n        switch (this.fitBounds) {\n            case true:\n                this._subscribeToFitBoundsUpdates();\n                break;\n            case false:\n                if (this._fitBoundsSubscription) {\n                    this._fitBoundsSubscription.unsubscribe();\n                }\n                break;\n            default:\n                if (this._fitBoundsSubscription) {\n                    this._fitBoundsSubscription.unsubscribe();\n                }\n                this._updateBounds(this.fitBounds, this.fitBoundsPadding);\n        }\n    }\n    _subscribeToFitBoundsUpdates() {\n        this._zone.runOutsideAngular(() => {\n            this._fitBoundsSubscription = this._fitBoundsService.getBounds$().subscribe(b => {\n                this._zone.run(() => this._updateBounds(b, this.fitBoundsPadding));\n            });\n        });\n    }\n    _updateBounds(bounds, padding) {\n        if (!bounds) {\n            return;\n        }\n        if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {\n            const newBounds = new google.maps.LatLngBounds();\n            newBounds.union(bounds);\n            bounds = newBounds;\n        }\n        if (this.usePanning) {\n            this._mapsWrapper.panToBounds(bounds, padding);\n            return;\n        }\n        this._mapsWrapper.fitBounds(bounds, padding);\n    }\n    _isLatLngBoundsLiteral(bounds) {\n        return bounds != null && bounds.extend === undefined;\n    }\n    _handleMapCenterChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(() => {\n            this._mapsWrapper.getCenter().then((center) => {\n                this.latitude = center.lat();\n                this.longitude = center.lng();\n                this.centerChange.emit({ lat: this.latitude, lng: this.longitude });\n            });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleBoundsChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(() => {\n            this._mapsWrapper.getBounds().then((bounds) => { this.boundsChange.emit(bounds); });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleMapTypeIdChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('maptypeid_changed').subscribe(() => {\n            this._mapsWrapper.getMapTypeId().then((mapTypeId) => { this.mapTypeIdChange.emit(mapTypeId); });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleMapZoomChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(() => {\n            this._mapsWrapper.getZoom().then((z) => {\n                this.zoom = z;\n                this.zoomChange.emit(z);\n            });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleIdleEvent() {\n        const s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(() => { this.idle.emit(void 0); });\n        this._observableSubscriptions.push(s);\n    }\n    _handleTilesLoadedEvent() {\n        const s = this._mapsWrapper.subscribeToMapEvent('tilesloaded').subscribe(() => this.tilesLoaded.emit(void 0));\n        this._observableSubscriptions.push(s);\n    }\n    _handleMapMouseEvents() {\n        const events = [\n            { name: 'click', emitter: this.mapClick },\n            { name: 'rightclick', emitter: this.mapRightClick },\n            { name: 'dblclick', emitter: this.mapDblClick },\n        ];\n        events.forEach(e => {\n            const s = this._mapsWrapper.subscribeToMapEvent(e.name).subscribe(([event]) => {\n                // the placeId will be undefined in case the event was not an IconMouseEvent (google types)\n                if (event.placeId && !this.showDefaultInfoWindow) {\n                    event.stop();\n                }\n                e.emitter.emit(event);\n            });\n            this._observableSubscriptions.push(s);\n        });\n    }\n    _handleControlChange() {\n        this._setControls();\n        this.mapControls.changes.subscribe(() => this._setControls());\n    }\n    _setControls() {\n        const controlOptions = {\n            fullscreenControl: !this.disableDefaultUI,\n            mapTypeControl: false,\n            panControl: false,\n            rotateControl: false,\n            scaleControl: false,\n            streetViewControl: !this.disableDefaultUI,\n            zoomControl: !this.disableDefaultUI,\n        };\n        this._mapsWrapper.getNativeMap().then(() => {\n            this.mapControls.forEach(control => Object.assign(controlOptions, control.getOptions()));\n            this._mapsWrapper.setMapOptions(controlOptions);\n        });\n    }\n}\n/**\n * Map option attributes that can change over time\n */\nAgmMap._mapOptionsAttributes = [\n    'disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor',\n    'keyboardShortcuts', 'styles', 'zoom', 'minZoom', 'maxZoom', 'mapTypeId', 'clickableIcons',\n    'gestureHandling', 'tilt', 'restriction',\n];\nAgmMap.decorators = [\n    { type: Component, args: [{\n                selector: 'agm-map',\n                providers: [\n                    CircleManager,\n                    DataLayerManager,\n                    DataLayerManager,\n                    FitBoundsService,\n                    GoogleMapsAPIWrapper,\n                    InfoWindowManager,\n                    KmlLayerManager,\n                    LayerManager,\n                    MarkerManager,\n                    PolygonManager,\n                    PolylineManager,\n                    RectangleManager,\n                ],\n                template: `\n              <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\n              <div class='agm-map-content'>\n                <ng-content></ng-content>\n              </div>\n  `,\n                styles: [`\n    .agm-map-container-inner {\n      width: inherit;\n      height: inherit;\n    }\n    .agm-map-content {\n      display:none;\n    }\n  `]\n            },] }\n];\nAgmMap.ctorParameters = () => [\n    { type: ElementRef },\n    { type: GoogleMapsAPIWrapper },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: FitBoundsService },\n    { type: NgZone }\n];\nAgmMap.propDecorators = {\n    longitude: [{ type: Input }],\n    latitude: [{ type: Input }],\n    zoom: [{ type: Input }],\n    minZoom: [{ type: Input }],\n    maxZoom: [{ type: Input }],\n    controlSize: [{ type: Input }],\n    draggable: [{ type: Input, args: ['mapDraggable',] }],\n    disableDoubleClickZoom: [{ type: Input }],\n    disableDefaultUI: [{ type: Input }],\n    scrollwheel: [{ type: Input }],\n    backgroundColor: [{ type: Input }],\n    draggableCursor: [{ type: Input }],\n    draggingCursor: [{ type: Input }],\n    keyboardShortcuts: [{ type: Input }],\n    styles: [{ type: Input }],\n    usePanning: [{ type: Input }],\n    fitBounds: [{ type: Input }],\n    fitBoundsPadding: [{ type: Input }],\n    mapTypeId: [{ type: Input }],\n    clickableIcons: [{ type: Input }],\n    showDefaultInfoWindow: [{ type: Input }],\n    gestureHandling: [{ type: Input }],\n    tilt: [{ type: Input }],\n    restriction: [{ type: Input }],\n    mapClick: [{ type: Output }],\n    mapRightClick: [{ type: Output }],\n    mapDblClick: [{ type: Output }],\n    centerChange: [{ type: Output }],\n    boundsChange: [{ type: Output }],\n    mapTypeIdChange: [{ type: Output }],\n    idle: [{ type: Output }],\n    zoomChange: [{ type: Output }],\n    mapReady: [{ type: Output }],\n    tilesLoaded: [{ type: Output }],\n    mapControls: [{ type: ContentChildren, args: [AgmMapControl,] }]\n};\n\nlet markerId = 0;\n/**\n * AgmMarker renders a map marker inside a {@link AgmMap}.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nclass AgmMarker {\n    constructor(_markerManager) {\n        this._markerManager = _markerManager;\n        /**\n         * If true, the marker can be dragged. Default value is false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If true, the marker is visible\n         */\n        this.visible = true;\n        /**\n         * Whether to automatically open the child info window when the marker is clicked.\n         */\n        this.openInfoWindow = true;\n        /**\n         * The marker's opacity between 0.0 and 1.0.\n         */\n        this.opacity = 1;\n        /**\n         * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n         * front of markers with lower values. By default, markers are displayed according to their\n         * vertical position on screen, with lower markers appearing in front of markers further up the\n         * screen.\n         */\n        this.zIndex = 1;\n        /**\n         * If true, the marker can be clicked. Default value is true.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.clickable = true;\n        /**\n         * This event is fired when the marker's animation property changes.\n         */\n        this.animationChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the marker.\n         */\n        this.markerClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks twice on the marker.\n         */\n        this.markerDblClick = new EventEmitter();\n        /**\n         * This event is fired when the user rightclicks on the marker.\n         */\n        this.markerRightClick = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the marker.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the marker.\n         */\n        // tslint:disable-next-line: no-output-native\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the marker.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user mouses over the marker.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the user mouses outside the marker.\n         */\n        this.mouseOut = new EventEmitter();\n        /** @internal */\n        this.infoWindow = new QueryList();\n        this._markerAddedToManger = false;\n        this._observableSubscriptions = [];\n        this._fitBoundsDetails$ = new ReplaySubject(1);\n        this._id = (markerId++).toString();\n    }\n    /* @internal */\n    ngAfterContentInit() {\n        this.handleInfoWindowUpdate();\n        this.infoWindow.changes.subscribe(() => this.handleInfoWindowUpdate());\n    }\n    handleInfoWindowUpdate() {\n        if (this.infoWindow.length > 1) {\n            throw new Error('Expected no more than one info window.');\n        }\n        this.infoWindow.forEach(marker => {\n            marker.hostMarker = this;\n        });\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (typeof this.latitude === 'string') {\n            this.latitude = Number(this.latitude);\n        }\n        if (typeof this.longitude === 'string') {\n            this.longitude = Number(this.longitude);\n        }\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n            return;\n        }\n        if (!this._markerAddedToManger) {\n            this._markerManager.addMarker(this);\n            this._updateFitBoundsDetails();\n            this._markerAddedToManger = true;\n            this._addEventListeners();\n            return;\n        }\n        // tslint:disable: no-string-literal\n        if (changes['latitude'] || changes['longitude']) {\n            this._markerManager.updateMarkerPosition(this);\n            this._updateFitBoundsDetails();\n        }\n        if (changes['title']) {\n            this._markerManager.updateTitle(this);\n        }\n        if (changes['label']) {\n            this._markerManager.updateLabel(this);\n        }\n        if (changes['draggable']) {\n            this._markerManager.updateDraggable(this);\n        }\n        if (changes['iconUrl']) {\n            this._markerManager.updateIcon(this);\n        }\n        if (changes['opacity']) {\n            this._markerManager.updateOpacity(this);\n        }\n        if (changes['visible']) {\n            this._markerManager.updateVisible(this);\n        }\n        if (changes['zIndex']) {\n            this._markerManager.updateZIndex(this);\n        }\n        if (changes['clickable']) {\n            this._markerManager.updateClickable(this);\n        }\n        if (changes['animation']) {\n            this._markerManager.updateAnimation(this);\n        }\n        // tslint:enable: no-string-literal\n    }\n    /** @internal */\n    getFitBoundsDetails$() {\n        return this._fitBoundsDetails$.asObservable();\n    }\n    _updateFitBoundsDetails() {\n        this._fitBoundsDetails$.next({ latLng: { lat: this.latitude, lng: this.longitude } });\n    }\n    _addEventListeners() {\n        const cs = this._markerManager.createEventObservable('click', this).subscribe(() => {\n            if (this.openInfoWindow) {\n                this.infoWindow.forEach(infoWindow => infoWindow.open());\n            }\n            this.markerClick.emit(this);\n        });\n        this._observableSubscriptions.push(cs);\n        const dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(() => {\n            this.markerDblClick.emit(null);\n        });\n        this._observableSubscriptions.push(dcs);\n        const rc = this._markerManager.createEventObservable('rightclick', this).subscribe(() => {\n            this.markerRightClick.emit(null);\n        });\n        this._observableSubscriptions.push(rc);\n        const ds = this._markerManager.createEventObservable('dragstart', this)\n            .subscribe(e => this.dragStart.emit(e));\n        this._observableSubscriptions.push(ds);\n        const d = this._markerManager.createEventObservable('drag', this)\n            .subscribe(e => this.drag.emit(e));\n        this._observableSubscriptions.push(d);\n        const de = this._markerManager.createEventObservable('dragend', this)\n            .subscribe(e => this.dragEnd.emit(e));\n        this._observableSubscriptions.push(de);\n        const mover = this._markerManager.createEventObservable('mouseover', this)\n            .subscribe(e => this.mouseOver.emit(e));\n        this._observableSubscriptions.push(mover);\n        const mout = this._markerManager.createEventObservable('mouseout', this)\n            .subscribe(e => this.mouseOut.emit(e));\n        this._observableSubscriptions.push(mout);\n        const anChng = this._markerManager.createEventObservable('animation_changed', this)\n            .subscribe(() => {\n            this.animationChange.emit(this.animation);\n        });\n        this._observableSubscriptions.push(anChng);\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return 'AgmMarker-' + this._id.toString(); }\n    /** @internal */\n    ngOnDestroy() {\n        this._markerManager.deleteMarker(this);\n        // unsubscribe all registered observable subscriptions\n        this._observableSubscriptions.forEach((s) => s.unsubscribe());\n    }\n}\nAgmMarker.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-marker',\n                providers: [\n                    { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmMarker) },\n                ],\n            },] }\n];\nAgmMarker.ctorParameters = () => [\n    { type: MarkerManager }\n];\nAgmMarker.propDecorators = {\n    latitude: [{ type: Input }],\n    longitude: [{ type: Input }],\n    title: [{ type: Input }],\n    label: [{ type: Input }],\n    draggable: [{ type: Input, args: ['markerDraggable',] }],\n    iconUrl: [{ type: Input }],\n    visible: [{ type: Input }],\n    openInfoWindow: [{ type: Input }],\n    opacity: [{ type: Input }],\n    zIndex: [{ type: Input }],\n    clickable: [{ type: Input, args: ['markerClickable',] }],\n    animation: [{ type: Input }],\n    animationChange: [{ type: Output }],\n    markerClick: [{ type: Output }],\n    markerDblClick: [{ type: Output }],\n    markerRightClick: [{ type: Output }],\n    dragStart: [{ type: Output }],\n    drag: [{ type: Output }],\n    dragEnd: [{ type: Output }],\n    mouseOver: [{ type: Output }],\n    mouseOut: [{ type: Output }],\n    infoWindow: [{ type: ContentChildren, args: [AgmInfoWindow,] }]\n};\n\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: LatLngLiteral[] = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: LatLngLiteral[][] = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\nclass AgmPolygon {\n    constructor(_polygonManager) {\n        this._polygonManager = _polygonManager;\n        /**\n         * Indicates whether this Polygon handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this shape over the map. The geodesic\n         * property defines the mode of dragging. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this shape by dragging the control\n         * points shown at the vertices and on each segment. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * When true, edges of the polygon are interpreted as geodesic and will\n         * follow the curvature of the Earth. When false, edges of the polygon are\n         * rendered as straight lines in screen space. Note that the shape of a\n         * geodesic polygon may appear to change when dragged, as the dimensions\n         * are maintained relative to the surface of the earth. Defaults to false.\n         */\n        this.geodesic = false;\n        /**\n         * The ordered sequence of coordinates that designates a closed loop.\n         * Unlike polylines, a polygon may consist of one or more paths.\n         *  As a result, the paths property may specify one or more arrays of\n         * LatLng coordinates. Paths are closed automatically; do not repeat the\n         * first vertex of the path as the last vertex. Simple polygons may be\n         * defined using a single array of LatLngs. More complex polygons may\n         * specify an array of arrays. Any simple arrays are converted into Arrays.\n         * Inserting or removing LatLngs from the Array will automatically update\n         * the polygon on the map.\n         */\n        this.paths = [];\n        /**\n         * This event is fired when the DOM click event is fired on the Polygon.\n         */\n        this.polyClick = new EventEmitter();\n        /**\n         * This event is fired when the DOM dblclick event is fired on the Polygon.\n         */\n        this.polyDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the polygon.\n         */\n        this.polyDrag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the polygon.\n         */\n        this.polyDragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the polygon.\n         */\n        this.polyDragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the Polygon.\n         */\n        this.polyMouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the Polygon.\n         */\n        this.polyMouseMove = new EventEmitter();\n        /**\n         * This event is fired on Polygon mouseout.\n         */\n        this.polyMouseOut = new EventEmitter();\n        /**\n         * This event is fired on Polygon mouseover.\n         */\n        this.polyMouseOver = new EventEmitter();\n        /**\n         * This event is fired whe the DOM mouseup event is fired on the Polygon\n         */\n        this.polyMouseUp = new EventEmitter();\n        /**\n         * This event is fired when the Polygon is right-clicked on.\n         */\n        this.polyRightClick = new EventEmitter();\n        /**\n         * This event is fired after Polygon first path changes.\n         */\n        this.polyPathsChange = new EventEmitter();\n        this._polygonAddedToManager = false;\n        this._subscriptions = [];\n    }\n    /** @internal */\n    ngAfterContentInit() {\n        if (!this._polygonAddedToManager) {\n            this._init();\n        }\n    }\n    ngOnChanges(changes) {\n        if (!this._polygonAddedToManager) {\n            this._init();\n            return;\n        }\n        this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n    }\n    _init() {\n        this._polygonManager.addPolygon(this);\n        this._polygonAddedToManager = true;\n        this._addEventListeners();\n    }\n    _addEventListeners() {\n        const handlers = [\n            { name: 'click', handler: (ev) => this.polyClick.emit(ev) },\n            { name: 'dblclick', handler: (ev) => this.polyDblClick.emit(ev) },\n            { name: 'drag', handler: (ev) => this.polyDrag.emit(ev) },\n            { name: 'dragend', handler: (ev) => this.polyDragEnd.emit(ev) },\n            { name: 'dragstart', handler: (ev) => this.polyDragStart.emit(ev) },\n            { name: 'mousedown', handler: (ev) => this.polyMouseDown.emit(ev) },\n            { name: 'mousemove', handler: (ev) => this.polyMouseMove.emit(ev) },\n            { name: 'mouseout', handler: (ev) => this.polyMouseOut.emit(ev) },\n            { name: 'mouseover', handler: (ev) => this.polyMouseOver.emit(ev) },\n            { name: 'mouseup', handler: (ev) => this.polyMouseUp.emit(ev) },\n            { name: 'rightclick', handler: (ev) => this.polyRightClick.emit(ev) },\n        ];\n        handlers.forEach((obj) => {\n            const os = this._polygonManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n        this._polygonManager.createPathEventObservable(this)\n            .then(paths$ => {\n            const os = paths$.subscribe(pathEvent => this.polyPathsChange.emit(pathEvent));\n            this._subscriptions.push(os);\n        });\n    }\n    _updatePolygonOptions(changes) {\n        return Object.keys(changes)\n            .filter(k => AgmPolygon._polygonOptionsAttributes.indexOf(k) !== -1)\n            .reduce((obj, k) => {\n            obj[k] = changes[k].currentValue;\n            return obj;\n        }, {});\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    ngOnDestroy() {\n        this._polygonManager.deletePolygon(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach((s) => s.unsubscribe());\n    }\n    getPath() {\n        return this._polygonManager.getPath(this);\n    }\n    getPaths() {\n        return this._polygonManager.getPaths(this);\n    }\n}\nAgmPolygon._polygonOptionsAttributes = [\n    'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map',\n    'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable',\n    'editable', 'visible',\n];\nAgmPolygon.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-polygon',\n            },] }\n];\nAgmPolygon.ctorParameters = () => [\n    { type: PolygonManager }\n];\nAgmPolygon.propDecorators = {\n    clickable: [{ type: Input }],\n    draggable: [{ type: Input, args: ['polyDraggable',] }],\n    editable: [{ type: Input }],\n    fillColor: [{ type: Input }],\n    fillOpacity: [{ type: Input }],\n    geodesic: [{ type: Input }],\n    paths: [{ type: Input }],\n    strokeColor: [{ type: Input }],\n    strokeOpacity: [{ type: Input }],\n    strokeWeight: [{ type: Input }],\n    visible: [{ type: Input }],\n    zIndex: [{ type: Input }],\n    polyClick: [{ type: Output }],\n    polyDblClick: [{ type: Output }],\n    polyDrag: [{ type: Output }],\n    polyDragEnd: [{ type: Output }],\n    polyDragStart: [{ type: Output }],\n    polyMouseDown: [{ type: Output }],\n    polyMouseMove: [{ type: Output }],\n    polyMouseOut: [{ type: Output }],\n    polyMouseOver: [{ type: Output }],\n    polyMouseUp: [{ type: Output }],\n    polyRightClick: [{ type: Output }],\n    polyPathsChange: [{ type: Output }]\n};\n\n/**\n * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\n * or custom icons either along the entire line, or in a specific part of it.\n * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\n *\n * ### Example\n * ```html\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\n *          </agm-icon-sequence>\n *      </agm-polyline>\n *    </agm-map>\n * ```\n */\nclass AgmPolylineIcon {\n    ngOnInit() {\n        if (this.path == null) {\n            throw new Error('Icon Sequence path is required');\n        }\n    }\n}\nAgmPolylineIcon.decorators = [\n    { type: Directive, args: [{ selector: 'agm-polyline agm-icon-sequence' },] }\n];\nAgmPolylineIcon.propDecorators = {\n    fixedRotation: [{ type: Input }],\n    offset: [{ type: Input }],\n    repeat: [{ type: Input }],\n    anchorX: [{ type: Input }],\n    anchorY: [{ type: Input }],\n    fillColor: [{ type: Input }],\n    fillOpacity: [{ type: Input }],\n    path: [{ type: Input }],\n    rotation: [{ type: Input }],\n    scale: [{ type: Input }],\n    strokeColor: [{ type: Input }],\n    strokeOpacity: [{ type: Input }],\n    strokeWeight: [{ type: Input }]\n};\n\n/**\n * AgmPolylinePoint represents one element of a polyline within a  {@link\n * AgmPolyline}\n */\nclass AgmPolylinePoint {\n    constructor() {\n        /**\n         * This event emitter gets emitted when the position of the point changed.\n         */\n        this.positionChanged = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        // tslint:disable: no-string-literal\n        if (changes['latitude'] || changes['longitude']) {\n            this.positionChanged.emit({\n                lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,\n                lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude,\n            });\n        }\n        // tslint:enable: no-string-literal\n    }\n    /** @internal */\n    getFitBoundsDetails$() {\n        return this.positionChanged.pipe(startWith({ lat: this.latitude, lng: this.longitude }), map(position => ({ latLng: position })));\n    }\n}\nAgmPolylinePoint.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-polyline-point',\n                providers: [\n                    { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmPolylinePoint) },\n                ],\n            },] }\n];\nAgmPolylinePoint.ctorParameters = () => [];\nAgmPolylinePoint.propDecorators = {\n    latitude: [{ type: Input }],\n    longitude: [{ type: Input }],\n    positionChanged: [{ type: Output }]\n};\n\nlet polylineId = 0;\n/**\n * AgmPolyline renders a polyline on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n *          </agm-polyline-point>\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n *          </agm-polyline-point>\n *      </agm-polyline>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nclass AgmPolyline {\n    constructor(_polylineManager) {\n        this._polylineManager = _polylineManager;\n        /**\n         * Indicates whether this Polyline handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this shape over the map. The geodesic property defines the\n         * mode of dragging. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this shape by dragging the control points shown at the\n         * vertices and on each segment. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n         * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n         * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n         * are maintained relative to the surface of the earth. Defaults to false.\n         */\n        this.geodesic = false;\n        /**\n         * Whether this polyline is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the DOM click event is fired on the Polyline.\n         */\n        this.lineClick = new EventEmitter();\n        /**\n         * This event is fired when the DOM dblclick event is fired on the Polyline.\n         */\n        this.lineDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the polyline.\n         */\n        this.lineDrag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the polyline.\n         */\n        this.lineDragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the polyline.\n         */\n        this.lineDragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the Polyline.\n         */\n        this.lineMouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the Polyline.\n         */\n        this.lineMouseMove = new EventEmitter();\n        /**\n         * This event is fired on Polyline mouseout.\n         */\n        this.lineMouseOut = new EventEmitter();\n        /**\n         * This event is fired on Polyline mouseover.\n         */\n        this.lineMouseOver = new EventEmitter();\n        /**\n         * This event is fired whe the DOM mouseup event is fired on the Polyline\n         */\n        this.lineMouseUp = new EventEmitter();\n        /**\n         * This event is fired when the Polyline is right-clicked on.\n         */\n        this.lineRightClick = new EventEmitter();\n        /**\n         * This event is fired after Polyline's path changes.\n         */\n        this.polyPathChange = new EventEmitter();\n        this._polylineAddedToManager = false;\n        this._subscriptions = [];\n        this._id = (polylineId++).toString();\n    }\n    /** @internal */\n    ngAfterContentInit() {\n        if (this.points.length) {\n            this.points.forEach((point) => {\n                const s = point.positionChanged.subscribe(() => { this._polylineManager.updatePolylinePoints(this); });\n                this._subscriptions.push(s);\n            });\n        }\n        if (!this._polylineAddedToManager) {\n            this._init();\n        }\n        const pointSub = this.points.changes.subscribe(() => this._polylineManager.updatePolylinePoints(this));\n        this._subscriptions.push(pointSub);\n        this._polylineManager.updatePolylinePoints(this);\n        const iconSub = this.iconSequences.changes.subscribe(() => this._polylineManager.updateIconSequences(this));\n        this._subscriptions.push(iconSub);\n    }\n    ngOnChanges(changes) {\n        if (!this._polylineAddedToManager) {\n            this._init();\n            return;\n        }\n        const options = {};\n        const optionKeys = Object.keys(changes).filter(k => AgmPolyline._polylineOptionsAttributes.indexOf(k) !== -1);\n        optionKeys.forEach(k => options[k] = changes[k].currentValue);\n        this._polylineManager.setPolylineOptions(this, options);\n    }\n    getPath() {\n        return this._polylineManager.getPath(this);\n    }\n    _init() {\n        this._polylineManager.addPolyline(this);\n        this._polylineAddedToManager = true;\n        this._addEventListeners();\n    }\n    _addEventListeners() {\n        const handlers = [\n            { name: 'click', handler: (ev) => this.lineClick.emit(ev) },\n            { name: 'dblclick', handler: (ev) => this.lineDblClick.emit(ev) },\n            { name: 'drag', handler: (ev) => this.lineDrag.emit(ev) },\n            { name: 'dragend', handler: (ev) => this.lineDragEnd.emit(ev) },\n            { name: 'dragstart', handler: (ev) => this.lineDragStart.emit(ev) },\n            { name: 'mousedown', handler: (ev) => this.lineMouseDown.emit(ev) },\n            { name: 'mousemove', handler: (ev) => this.lineMouseMove.emit(ev) },\n            { name: 'mouseout', handler: (ev) => this.lineMouseOut.emit(ev) },\n            { name: 'mouseover', handler: (ev) => this.lineMouseOver.emit(ev) },\n            { name: 'mouseup', handler: (ev) => this.lineMouseUp.emit(ev) },\n            { name: 'rightclick', handler: (ev) => this.lineRightClick.emit(ev) },\n        ];\n        handlers.forEach((obj) => {\n            const os = this._polylineManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n        this._polylineManager.createPathEventObservable(this).then((ob$) => {\n            const os = ob$.subscribe(pathEvent => this.polyPathChange.emit(pathEvent));\n            this._subscriptions.push(os);\n        });\n    }\n    /** @internal */\n    _getPoints() {\n        if (this.points) {\n            return this.points.toArray();\n        }\n        return [];\n    }\n    _getIcons() {\n        if (this.iconSequences) {\n            return this.iconSequences.toArray();\n        }\n        return [];\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    ngOnDestroy() {\n        this._polylineManager.deletePolyline(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach((s) => s.unsubscribe());\n    }\n}\nAgmPolyline._polylineOptionsAttributes = [\n    'draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight',\n    'zIndex',\n];\nAgmPolyline.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-polyline',\n            },] }\n];\nAgmPolyline.ctorParameters = () => [\n    { type: PolylineManager }\n];\nAgmPolyline.propDecorators = {\n    clickable: [{ type: Input }],\n    draggable: [{ type: Input, args: ['polylineDraggable',] }],\n    editable: [{ type: Input }],\n    geodesic: [{ type: Input }],\n    strokeColor: [{ type: Input }],\n    strokeOpacity: [{ type: Input }],\n    strokeWeight: [{ type: Input }],\n    visible: [{ type: Input }],\n    zIndex: [{ type: Input }],\n    lineClick: [{ type: Output }],\n    lineDblClick: [{ type: Output }],\n    lineDrag: [{ type: Output }],\n    lineDragEnd: [{ type: Output }],\n    lineDragStart: [{ type: Output }],\n    lineMouseDown: [{ type: Output }],\n    lineMouseMove: [{ type: Output }],\n    lineMouseOut: [{ type: Output }],\n    lineMouseOver: [{ type: Output }],\n    lineMouseUp: [{ type: Output }],\n    lineRightClick: [{ type: Output }],\n    polyPathChange: [{ type: Output }],\n    points: [{ type: ContentChildren, args: [AgmPolylinePoint,] }],\n    iconSequences: [{ type: ContentChildren, args: [AgmPolylineIcon,] }]\n};\n\nclass AgmRectangle {\n    constructor(_manager) {\n        this._manager = _manager;\n        /**\n         * Indicates whether this Rectangle handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this rectangle over the map. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this rectangle by dragging the control points shown at\n         * the center and around the circumference of the rectangle. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * The stroke position. Defaults to CENTER.\n         * This property is not supported on Internet Explorer 8 and earlier.\n         */\n        this.strokePosition = 'CENTER';\n        /**\n         * The stroke width in pixels.\n         */\n        this.strokeWeight = 0;\n        /**\n         * Whether this rectangle is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the rectangle's is changed.\n         */\n        this.boundsChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the rectangle.\n         */\n        this.rectangleClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the rectangle.\n         */\n        this.rectangleDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the rectangle.\n         */\n        // tslint:disable-next-line: no-output-native\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the rectangle.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the rectangle.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the rectangle.\n         */\n        this.mouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the rectangle.\n         */\n        this.mouseMove = new EventEmitter();\n        /**\n         * This event is fired on rectangle mouseout.\n         */\n        this.mouseOut = new EventEmitter();\n        /**\n         * This event is fired on rectangle mouseover.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the DOM mouseup event is fired on the rectangle.\n         */\n        this.mouseUp = new EventEmitter();\n        /**\n         * This event is fired when the rectangle is right-clicked on.\n         */\n        this.rightClick = new EventEmitter();\n        this._rectangleAddedToManager = false;\n        this._eventSubscriptions = [];\n    }\n    /** @internal */\n    ngOnInit() {\n        this._manager.addRectangle(this);\n        this._rectangleAddedToManager = true;\n        this._registerEventListeners();\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._rectangleAddedToManager) {\n            return;\n        }\n        // tslint:disable: no-string-literal\n        if (changes['north'] ||\n            changes['east'] ||\n            changes['south'] ||\n            changes['west']) {\n            this._manager.setBounds(this);\n        }\n        if (changes['editable']) {\n            this._manager.setEditable(this);\n        }\n        if (changes['draggable']) {\n            this._manager.setDraggable(this);\n        }\n        if (changes['visible']) {\n            this._manager.setVisible(this);\n        }\n        // tslint:enable: no-string-literal\n        this._updateRectangleOptionsChanges(changes);\n    }\n    _updateRectangleOptionsChanges(changes) {\n        const options = {};\n        const optionKeys = Object.keys(changes).filter(k => AgmRectangle._mapOptions.indexOf(k) !== -1);\n        optionKeys.forEach(k => {\n            options[k] = changes[k].currentValue;\n        });\n        if (optionKeys.length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    }\n    _registerEventListeners() {\n        const events = new Map();\n        events.set('bounds_changed', this.boundsChange);\n        events.set('click', this.rectangleClick);\n        events.set('dblclick', this.rectangleDblClick);\n        events.set('drag', this.drag);\n        events.set('dragend', this.dragEnd);\n        events.set('dragStart', this.dragStart);\n        events.set('mousedown', this.mouseDown);\n        events.set('mousemove', this.mouseMove);\n        events.set('mouseout', this.mouseOut);\n        events.set('mouseover', this.mouseOver);\n        events.set('mouseup', this.mouseUp);\n        events.set('rightclick', this.rightClick);\n        events.forEach((eventEmitter, eventName) => {\n            this._eventSubscriptions.push(this._manager\n                .createEventObservable(eventName, this)\n                .subscribe(value => {\n                switch (eventName) {\n                    case 'bounds_changed':\n                        this._manager.getBounds(this).then(bounds => eventEmitter.emit({\n                            north: bounds.getNorthEast().lat(),\n                            east: bounds.getNorthEast().lng(),\n                            south: bounds.getSouthWest().lat(),\n                            west: bounds.getSouthWest().lng(),\n                        }));\n                        break;\n                    default:\n                        eventEmitter.emit(value);\n                }\n            }));\n        });\n    }\n    /** @internal */\n    ngOnDestroy() {\n        this._eventSubscriptions.forEach(s => s.unsubscribe());\n        this._eventSubscriptions = null;\n        this._manager.removeRectangle(this);\n    }\n    /**\n     * Gets the LatLngBounds of this Rectangle.\n     */\n    getBounds() {\n        return this._manager.getBounds(this);\n    }\n}\nAgmRectangle._mapOptions = [\n    'fillColor',\n    'fillOpacity',\n    'strokeColor',\n    'strokeOpacity',\n    'strokePosition',\n    'strokeWeight',\n    'visible',\n    'zIndex',\n    'clickable',\n];\nAgmRectangle.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-rectangle',\n            },] }\n];\nAgmRectangle.ctorParameters = () => [\n    { type: RectangleManager }\n];\nAgmRectangle.propDecorators = {\n    north: [{ type: Input }],\n    east: [{ type: Input }],\n    south: [{ type: Input }],\n    west: [{ type: Input }],\n    clickable: [{ type: Input }],\n    draggable: [{ type: Input, args: ['rectangleDraggable',] }],\n    editable: [{ type: Input }],\n    fillColor: [{ type: Input }],\n    fillOpacity: [{ type: Input }],\n    strokeColor: [{ type: Input }],\n    strokeOpacity: [{ type: Input }],\n    strokePosition: [{ type: Input }],\n    strokeWeight: [{ type: Input }],\n    visible: [{ type: Input }],\n    zIndex: [{ type: Input }],\n    boundsChange: [{ type: Output }],\n    rectangleClick: [{ type: Output }],\n    rectangleDblClick: [{ type: Output }],\n    drag: [{ type: Output }],\n    dragEnd: [{ type: Output }],\n    dragStart: [{ type: Output }],\n    mouseDown: [{ type: Output }],\n    mouseMove: [{ type: Output }],\n    mouseOut: [{ type: Output }],\n    mouseOver: [{ type: Output }],\n    mouseUp: [{ type: Output }],\n    rightClick: [{ type: Output }]\n};\n\nlet layerId$3 = 0;\n/*\n * This directive adds a transit layer to a google map instance\n * <agm-transit-layer [visible]=\"true|false\"> <agm-transit-layer>\n * */\nclass AgmTransitLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$3++).toString();\n        /**\n         * Hide/show transit layer\n         */\n        this.visible = true;\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addTransitLayer(this);\n        this._addedToManager = true;\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmTransitLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteLayer(this);\n    }\n}\nAgmTransitLayer.decorators = [\n    { type: Directive, args: [{\n                selector: 'agm-transit-layer',\n            },] }\n];\nAgmTransitLayer.ctorParameters = () => [\n    { type: LayerManager }\n];\nAgmTransitLayer.propDecorators = {\n    visible: [{ type: Input }]\n};\n\n/**\n * @internal\n */\nfunction coreDirectives() {\n    return [\n        AgmBicyclingLayer,\n        AgmCircle,\n        AgmDataLayer,\n        AgmFitBounds,\n        AgmFullscreenControl,\n        AgmInfoWindow,\n        AgmKmlLayer,\n        AgmMap,\n        AgmMapTypeControl,\n        AgmMarker,\n        AgmPanControl,\n        AgmPolygon,\n        AgmPolyline,\n        AgmPolylineIcon,\n        AgmPolylinePoint,\n        AgmRectangle,\n        AgmRotateControl,\n        AgmScaleControl,\n        AgmStreetViewControl,\n        AgmTransitLayer,\n        AgmZoomControl,\n    ];\n}\n/**\n * The angular-google-maps core module. Contains all Directives/Services/Pipes\n * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\n */\nclass AgmCoreModule {\n    /**\n     * Please use this method when you register the module at the root level.\n     */\n    static forRoot(lazyMapsAPILoaderConfig) {\n        return {\n            ngModule: AgmCoreModule,\n            providers: [\n                ...BROWSER_GLOBALS_PROVIDERS, { provide: MapsAPILoader, useClass: LazyMapsAPILoader },\n                { provide: LAZY_MAPS_API_CONFIG, useValue: lazyMapsAPILoaderConfig },\n            ],\n        };\n    }\n}\nAgmCoreModule.decorators = [\n    { type: NgModule, args: [{ declarations: coreDirectives(), exports: coreDirectives() },] }\n];\n\n/*\n * Public API Surface of core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AgmBicyclingLayer, AgmCircle, AgmCoreModule, AgmDataLayer, AgmFitBounds, AgmFullscreenControl, AgmGeocoder, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMapTypeControl, AgmMarker, AgmPanControl, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmTransitLayer, AgmZoomControl, CircleManager, DataLayerManager, FitBoundsAccessor, GoogleMapsAPIWrapper, GoogleMapsScriptProtocol, InfoWindowManager, KmlLayerManager, LAZY_MAPS_API_CONFIG, LayerManager, LazyMapsAPILoader, MapsAPILoader, MarkerManager, NoOpMapsAPILoader, PolygonManager, PolylineManager, RectangleManager, coreDirectives, FitBoundsService as ɵa, AgmMapControl as ɵb, WindowRef as ɵc, DocumentRef as ɵd, BROWSER_GLOBALS_PROVIDERS as ɵe };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,kBAA7B,EAAiDC,QAAjD,EAA2DC,cAA3D,EAA2EC,QAA3E,EAAqFC,MAArF,EAA6FC,SAA7F,EAAwGC,SAAxG,EAAmHC,KAAnH,EAA0HC,YAA1H,EAAwIC,MAAxI,EAAgJC,IAAhJ,EAAsJC,SAAtJ,EAAiKC,UAAjK,EAA6KC,WAA7K,EAA0LC,eAA1L,EAA2MC,SAA3M,EAAsNC,UAAtN,EAAkOC,QAAlO,QAAkP,eAAlP;AACA,SAASC,UAAT,EAAqBC,eAArB,EAAsCC,IAAtC,EAA4CC,KAA5C,EAAmDC,aAAnD,EAAkEC,YAAlE,EAAgFC,EAAhF,EAAoFC,UAApF,EAAgGC,gBAAhG,EAAkHC,KAAlH,EAAyHC,OAAzH,QAAwI,MAAxI;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,SAA1B,EAAqCC,GAArC,EAA0CC,WAA1C,EAAuDC,SAAvD,EAAkEC,SAAlE,EAA6EC,IAA7E,EAAmFC,oBAAnF,EAAyGC,SAAzG,QAA0H,gBAA1H;AACA,SAASC,gBAAT,QAAiC,iBAAjC;;AAEA,MAAMC,aAAN,CAAoB;;AAEpBA,aAAa,CAACC,UAAd,GAA2B,CACvB;EAAEC,IAAI,EAAE5C;AAAR,CADuB,CAA3B;AAIA;AACA;AACA;AACA;;AACA,MAAM6C,oBAAN,CAA2B;EACvBC,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAiB;IACxB,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,IAAL,GACI,IAAIC,OAAJ,CAAaC,OAAD,IAAa;MAAE,KAAKC,YAAL,GAAoBD,OAApB;IAA8B,CAAzD,CADJ;EAEH;;EACDE,SAAS,CAACC,EAAD,EAAKC,UAAL,EAAiB;IACtB,OAAO,KAAKP,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKT,OAAL,CAAaU,IAAb,GAAoBC,IAApB,CAAyB,MAAM;QAClC,MAAMxB,GAAG,GAAG,IAAIyB,MAAM,CAACC,IAAP,CAAYC,GAAhB,CAAoBP,EAApB,EAAwBC,UAAxB,CAAZ;;QACA,KAAKH,YAAL,CAAkBlB,GAAlB;;QACA;MACH,CAJM,CAAP;IAKH,CANM,CAAP;EAOH;;EACD4B,aAAa,CAACC,OAAD,EAAU;IACnB,OAAO,KAAKf,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,KAAKP,IAAL,CAAUS,IAAV,CAAgBM,CAAD,IAAO;QAAEA,CAAC,CAACC,UAAF,CAAaF,OAAb;MAAwB,CAAhD;IACH,CAFM,CAAP;EAGH;EACD;AACJ;AACA;;;EACIG,YAAY,CAACH,OAAO,GAAG,EAAX,EAAeI,QAAQ,GAAG,IAA1B,EAAgC;IACxC,OAAO,KAAKnB,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAAS;QAC3B,IAAIiC,QAAJ,EAAc;UACVJ,OAAO,CAAC7B,GAAR,GAAcA,GAAd;QACH;;QACD,OAAO,IAAIyB,MAAM,CAACC,IAAP,CAAYQ,MAAhB,CAAuBL,OAAvB,CAAP;MACH,CALM,CAAP;IAMH,CAPM,CAAP;EAQH;;EACDM,gBAAgB,CAACN,OAAD,EAAU;IACtB,OAAO,KAAKf,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAe,MAAM,IAAIC,MAAM,CAACC,IAAP,CAAYU,UAAhB,CAA2BP,OAA3B,CAArB,CAAP;IACH,CAFM,CAAP;EAGH;EACD;AACJ;AACA;;;EACIQ,YAAY,CAACR,OAAD,EAAU;IAClB,OAAO,KAAKf,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAAS;QAC3B6B,OAAO,CAAC7B,GAAR,GAAcA,GAAd;QACA,OAAO,IAAIyB,MAAM,CAACC,IAAP,CAAYY,MAAhB,CAAuBT,OAAvB,CAAP;MACH,CAHM,CAAP;IAIH,CALM,CAAP;EAMH;EACD;AACJ;AACA;;;EACIU,eAAe,CAACV,OAAD,EAAU;IACrB,OAAO,KAAKf,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAAS;QAC3B6B,OAAO,CAAC7B,GAAR,GAAcA,GAAd;QACA,OAAO,IAAIyB,MAAM,CAACC,IAAP,CAAYc,SAAhB,CAA0BX,OAA1B,CAAP;MACH,CAHM,CAAP;IAIH,CALM,CAAP;EAMH;;EACDY,cAAc,CAACZ,OAAD,EAAU;IACpB,OAAO,KAAKf,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKoB,YAAL,GAAoBlB,IAApB,CAA0BxB,GAAD,IAAS;QACrC,MAAM2C,IAAI,GAAG,IAAIlB,MAAM,CAACC,IAAP,CAAYkB,QAAhB,CAAyBf,OAAzB,CAAb;QACAc,IAAI,CAACE,MAAL,CAAY7C,GAAZ;QACA,OAAO2C,IAAP;MACH,CAJM,CAAP;IAKH,CANM,CAAP;EAOH;;EACDG,aAAa,CAACjB,OAAD,EAAU;IACnB,OAAO,KAAKf,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKoB,YAAL,GAAoBlB,IAApB,CAA0BxB,GAAD,IAAS;QACrC,MAAM+C,OAAO,GAAG,IAAItB,MAAM,CAACC,IAAP,CAAYsB,OAAhB,CAAwBnB,OAAxB,CAAhB;QACAkB,OAAO,CAACF,MAAR,CAAe7C,GAAf;QACA,OAAO+C,OAAP;MACH,CAJM,CAAP;IAKH,CANM,CAAP;EAOH;EACD;AACJ;AACA;;;EACIE,eAAe,CAACpB,OAAD,EAAU;IACrB,OAAO,KAAKf,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAeM,CAAC,IAAI;QACvB,MAAMoB,IAAI,GAAG,IAAIzB,MAAM,CAACC,IAAP,CAAYyB,IAAhB,CAAqBtB,OAArB,CAAb;QACAqB,IAAI,CAACL,MAAL,CAAYf,CAAZ;QACA,OAAOoB,IAAP;MACH,CAJM,CAAP;IAKH,CANM,CAAP;EAOH;EACD;AACJ;AACA;AACA;;;EACIE,kBAAkB,GAAG;IACjB,OAAO,KAAKtC,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAAS;QAC3B,MAAMqD,QAAQ,GAAG,IAAI5B,MAAM,CAACC,IAAP,CAAY4B,YAAhB,EAAjB;QACAD,QAAQ,CAACR,MAAT,CAAgB7C,GAAhB;QACA,OAAOqD,QAAP;MACH,CAJM,CAAP;IAKH,CANM,CAAP;EAOH;EACD;AACJ;AACA;AACA;;;EACIE,oBAAoB,GAAG;IACnB,OAAO,KAAKzC,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAAS;QAC3B,MAAMqD,QAAQ,GAAG,IAAI5B,MAAM,CAACC,IAAP,CAAY8B,cAAhB,EAAjB;QACAH,QAAQ,CAACR,MAAT,CAAgB7C,GAAhB;QACA,OAAOqD,QAAP;MACH,CAJM,CAAP;IAKH,CANM,CAAP;EAOH;EACD;AACJ;AACA;;;EACII,gBAAgB,CAACC,MAAD,EAASX,OAAT,EAAkB;IAC9B,OAAO,KAAKhC,IAAL,CAAUS,IAAV,CAAe,MAAMC,MAAM,CAACC,IAAP,CAAYiC,QAAZ,CAAqBC,IAArB,CAA0BH,gBAA1B,CAA2CC,MAA3C,EAAmDX,OAAnD,CAArB,CAAP;EACH;;EACDc,mBAAmB,CAACC,SAAD,EAAY;IAC3B,OAAO,IAAI5E,UAAJ,CAAgB6E,QAAD,IAAc;MAChC,KAAKhD,IAAL,CAAUS,IAAV,CAAeM,CAAC,IAAIA,CAAC,CAACkC,WAAF,CAAcF,SAAd,EAAyB,MAAM,KAAKhD,KAAL,CAAWmD,GAAX,CAAe,MAAMF,QAAQ,CAACG,IAAT,CAAcC,SAAS,CAAC,CAAD,CAAvB,CAArB,CAA/B,CAApB;IACH,CAFM,CAAP;EAGH;;EACDC,sBAAsB,GAAG;IACrB,OAAO,KAAKtD,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAAS;QACpByB,MAAM,CAACC,IAAP,CAAY2C,KAAZ,CAAkBD,sBAAlB,CAAyCpE,GAAzC;MACH,CAFD;IAGH,CAJM,CAAP;EAKH;;EACDsE,SAAS,CAACZ,MAAD,EAAS;IACd,OAAO,KAAK5C,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAASA,GAAG,CAACsE,SAAJ,CAAcZ,MAAd,CAAxB,CAAP;IACH,CAFM,CAAP;EAGH;;EACDa,OAAO,GAAG;IACN,OAAO,KAAKzD,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAASA,GAAG,CAACuE,OAAJ,EAAxB,CAAP;IACH,CAFM,CAAP;EAGH;;EACDC,SAAS,GAAG;IACR,OAAO,KAAK1D,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAASA,GAAG,CAACwE,SAAJ,EAAxB,CAAP;IACH,CAFM,CAAP;EAGH;;EACDC,YAAY,GAAG;IACX,OAAO,KAAK3D,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAASA,GAAG,CAACyE,YAAJ,EAAxB,CAAP;IACH,CAFM,CAAP;EAGH;;EACDC,OAAO,CAACC,IAAD,EAAO;IACV,OAAO,KAAK7D,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAASA,GAAG,CAAC0E,OAAJ,CAAYC,IAAZ,CAAxB,CAAP;IACH,CAFM,CAAP;EAGH;;EACDC,SAAS,GAAG;IACR,OAAO,KAAK9D,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAASA,GAAG,CAAC4E,SAAJ,EAAxB,CAAP;IACH,CAFM,CAAP;EAGH;;EACDC,KAAK,CAACnB,MAAD,EAAS;IACV,OAAO,KAAK5C,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAASA,GAAG,CAAC6E,KAAJ,CAAUnB,MAAV,CAAxB,CAAP;IACH,CAFM,CAAP;EAGH;;EACDoB,KAAK,CAACC,CAAD,EAAIC,CAAJ,EAAO;IACR,OAAO,KAAKlE,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAASA,GAAG,CAAC8E,KAAJ,CAAUC,CAAV,EAAaC,CAAb,CAAxB,CAAP;IACH,CAFM,CAAP;EAGH;;EACDC,SAAS,CAACvB,MAAD,EAASwB,OAAT,EAAkB;IACvB,OAAO,KAAKpE,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAASA,GAAG,CAACiF,SAAJ,CAAcvB,MAAd,EAAsBwB,OAAtB,CAAxB,CAAP;IACH,CAFM,CAAP;EAGH;;EACDC,WAAW,CAACzB,MAAD,EAASwB,OAAT,EAAkB;IACzB,OAAO,KAAKpE,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MACtC,OAAO,KAAKP,IAAL,CAAUS,IAAV,CAAgBxB,GAAD,IAASA,GAAG,CAACmF,WAAJ,CAAgBzB,MAAhB,EAAwBwB,OAAxB,CAAxB,CAAP;IACH,CAFM,CAAP;EAGH;EACD;AACJ;AACA;;;EACIxC,YAAY,GAAG;IAAE,OAAO,KAAK3B,IAAZ;EAAmB;EACpC;AACJ;AACA;;;EACIqE,eAAe,CAACtB,SAAD,EAAY;IACvB,OAAO,KAAK/C,IAAL,CAAUS,IAAV,CAAgBM,CAAD,IAAOL,MAAM,CAACC,IAAP,CAAY2C,KAAZ,CAAkBgB,OAAlB,CAA0BvD,CAA1B,EAA6BgC,SAA7B,CAAtB,CAAP;EACH;;AAlMsB;;AAoM3BnD,oBAAoB,CAACF,UAArB,GAAkC,CAC9B;EAAEC,IAAI,EAAE5C;AAAR,CAD8B,CAAlC;;AAGA6C,oBAAoB,CAAC2E,cAArB,GAAsC,MAAM,CACxC;EAAE5E,IAAI,EAAEF;AAAR,CADwC,EAExC;EAAEE,IAAI,EAAE3C;AAAR,CAFwC,CAA5C;;AAKA,MAAMwH,aAAN,CAAoB;EAChB3E,WAAW,CAAC4E,WAAD,EAAc1E,KAAd,EAAqB;IAC5B,KAAK0E,WAAL,GAAmBA,WAAnB;IACA,KAAK1E,KAAL,GAAaA,KAAb;IACA,KAAK2E,QAAL,GAAgB,IAAI9D,GAAJ,EAAhB;EACH;;EACD+D,SAAS,CAACC,MAAD,EAAS;IACd,KAAKH,WAAL,CAAiB9C,YAAjB,GAAgClB,IAAhC,CAAqC,MAAM,KAAKiE,QAAL,CAAcG,GAAd,CAAkBD,MAAlB,EAA0B,KAAKH,WAAL,CAAiBnD,YAAjB,CAA8B;MAC/FwD,MAAM,EAAE;QAAEC,GAAG,EAAEH,MAAM,CAACI,QAAd;QAAwBC,GAAG,EAAEL,MAAM,CAACM;MAApC,CADuF;MAE/FC,SAAS,EAAEP,MAAM,CAACO,SAF6E;MAG/FC,SAAS,EAAER,MAAM,CAACQ,SAH6E;MAI/FC,QAAQ,EAAET,MAAM,CAACS,QAJ8E;MAK/FC,SAAS,EAAEV,MAAM,CAACU,SAL6E;MAM/FC,WAAW,EAAEX,MAAM,CAACW,WAN2E;MAO/FC,MAAM,EAAEZ,MAAM,CAACY,MAPgF;MAQ/FC,WAAW,EAAEb,MAAM,CAACa,WAR2E;MAS/FC,aAAa,EAAEd,MAAM,CAACc,aATyE;MAU/FC,cAAc,EAAEjF,MAAM,CAACC,IAAP,CAAYiF,cAAZ,CAA2BhB,MAAM,CAACe,cAAlC,CAV+E;MAW/FE,YAAY,EAAEjB,MAAM,CAACiB,YAX0E;MAY/FC,OAAO,EAAElB,MAAM,CAACkB,OAZ+E;MAa/FC,MAAM,EAAEnB,MAAM,CAACmB;IAbgF,CAA9B,CAA1B,CAA3C;EAeH;EACD;AACJ;AACA;;;EACIC,YAAY,CAACpB,MAAD,EAAS;IACjB,OAAO,KAAKF,QAAL,CAAcuB,GAAd,CAAkBrB,MAAlB,EAA0BnE,IAA1B,CAAgCyF,CAAD,IAAO;MACzCA,CAAC,CAACpE,MAAF,CAAS,IAAT;;MACA,KAAK4C,QAAL,CAAcyB,MAAd,CAAqBvB,MAArB;IACH,CAHM,CAAP;EAIH;;EACD5D,UAAU,CAAC4D,MAAD,EAAS9D,OAAT,EAAkB;IACxB,OAAOhE,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;MAChD,OAAO,KAAK4H,QAAL,CAAcuB,GAAd,CAAkBrB,MAAlB,EAA0BnE,IAA1B,CAAgCyF,CAAD,IAAO;QACzC,MAAME,WAAW,GAAGtF,OAAO,CAAC6E,cAA5B;QACA7E,OAAO,CAAC6E,cAAR,GAAyBjF,MAAM,CAACC,IAAP,CAAYiF,cAAZ,CAA2BQ,WAA3B,CAAzB;QACAF,CAAC,CAAClF,UAAF,CAAaF,OAAb;MACH,CAJM,CAAP;IAKH,CANe,CAAhB;EAOH;;EACD2C,SAAS,CAACmB,MAAD,EAAS;IACd,OAAO,KAAKF,QAAL,CAAcuB,GAAd,CAAkBrB,MAAlB,EAA0BnE,IAA1B,CAAgCyF,CAAD,IAAOA,CAAC,CAACzC,SAAF,EAAtC,CAAP;EACH;;EACDI,SAAS,CAACe,MAAD,EAAS;IACd,OAAO,KAAKF,QAAL,CAAcuB,GAAd,CAAkBrB,MAAlB,EAA0BnE,IAA1B,CAAgCyF,CAAD,IAAOA,CAAC,CAACrC,SAAF,EAAtC,CAAP;EACH;;EACDwC,SAAS,CAACzB,MAAD,EAAS;IACd,OAAO,KAAKF,QAAL,CAAcuB,GAAd,CAAkBrB,MAAlB,EAA0BnE,IAA1B,CAAgCyF,CAAD,IAAOA,CAAC,CAACG,SAAF,EAAtC,CAAP;EACH;;EACD9C,SAAS,CAACqB,MAAD,EAAS;IACd,OAAO,KAAKF,QAAL,CAAcuB,GAAd,CAAkBrB,MAAlB,EAA0BnE,IAA1B,CAA+ByF,CAAC,IAAIA,CAAC,CAAC3C,SAAF,CAAY;MAAEwB,GAAG,EAAEH,MAAM,CAACI,QAAd;MAAwBC,GAAG,EAAEL,MAAM,CAACM;IAApC,CAAZ,CAApC,CAAP;EACH;;EACDoB,WAAW,CAAC1B,MAAD,EAAS;IAChB,OAAO,KAAKF,QAAL,CAAcuB,GAAd,CAAkBrB,MAAlB,EAA0BnE,IAA1B,CAA+ByF,CAAC,IAAIA,CAAC,CAACI,WAAF,CAAc1B,MAAM,CAACS,QAArB,CAApC,CAAP;EACH;;EACDkB,YAAY,CAAC3B,MAAD,EAAS;IACjB,OAAO,KAAKF,QAAL,CAAcuB,GAAd,CAAkBrB,MAAlB,EAA0BnE,IAA1B,CAA+ByF,CAAC,IAAIA,CAAC,CAACK,YAAF,CAAe3B,MAAM,CAACQ,SAAtB,CAApC,CAAP;EACH;;EACDoB,UAAU,CAAC5B,MAAD,EAAS;IACf,OAAO,KAAKF,QAAL,CAAcuB,GAAd,CAAkBrB,MAAlB,EAA0BnE,IAA1B,CAA+ByF,CAAC,IAAIA,CAAC,CAACM,UAAF,CAAa5B,MAAM,CAACkB,OAApB,CAApC,CAAP;EACH;;EACDW,SAAS,CAAC7B,MAAD,EAAS;IACd,OAAO,KAAKF,QAAL,CAAcuB,GAAd,CAAkBrB,MAAlB,EAA0BnE,IAA1B,CAA+ByF,CAAC,IAAIA,CAAC,CAACO,SAAF,CAAY7B,MAAM,CAACY,MAAnB,CAApC,CAAP;EACH;;EACDkB,eAAe,CAAC9B,MAAD,EAAS;IACpB,OAAO,KAAKF,QAAL,CAAcuB,GAAd,CAAkBrB,MAAlB,CAAP;EACH;;EACD+B,qBAAqB,CAAC5D,SAAD,EAAY6B,MAAZ,EAAoB;IACrC,OAAO,IAAIzG,UAAJ,CAAgB6E,QAAD,IAAc;MAChC,IAAI4D,QAAQ,GAAG,IAAf;;MACA,KAAKlC,QAAL,CAAcuB,GAAd,CAAkBrB,MAAlB,EAA0BnE,IAA1B,CAAgCyF,CAAD,IAAO;QAClCU,QAAQ,GAAGV,CAAC,CAACjD,WAAF,CAAcF,SAAd,EAA0B8D,CAAD,IAAO,KAAK9G,KAAL,CAAWmD,GAAX,CAAe,MAAMF,QAAQ,CAACG,IAAT,CAAc0D,CAAd,CAArB,CAAhC,CAAX;MACH,CAFD;;MAGA,OAAO,MAAM;QACT,IAAID,QAAQ,KAAK,IAAjB,EAAuB;UACnBA,QAAQ,CAACE,MAAT;QACH;MACJ,CAJD;IAKH,CAVM,CAAP;EAWH;;AAhFe;;AAkFpBtC,aAAa,CAAC9E,UAAd,GAA2B,CACvB;EAAEC,IAAI,EAAE5C;AAAR,CADuB,CAA3B;;AAGAyH,aAAa,CAACD,cAAd,GAA+B,MAAM,CACjC;EAAE5E,IAAI,EAAEC;AAAR,CADiC,EAEjC;EAAED,IAAI,EAAE3C;AAAR,CAFiC,CAArC;AAKA;AACA;AACA;;;AACA,MAAM+J,gBAAN,CAAuB;EACnBlH,WAAW,CAACmH,QAAD,EAAWjH,KAAX,EAAkB;IACzB,KAAKiH,QAAL,GAAgBA,QAAhB;IACA,KAAKjH,KAAL,GAAaA,KAAb;IACA,KAAKkH,OAAL,GAAe,IAAIrG,GAAJ,EAAf;EACH;EACD;AACJ;AACA;;;EACIsG,YAAY,CAACC,KAAD,EAAQ;IAChB,MAAM7E,QAAQ,GAAG,KAAK0E,QAAL,CAAc9E,eAAd,CAA8B;MAC3CkF,KAAK,EAAED,KAAK,CAACC;IAD8B,CAA9B,EAGZ3G,IAHY,CAGP4G,CAAC,IAAI;MACX,IAAIF,KAAK,CAACG,OAAV,EAAmB;QACf;QACA,KAAKC,eAAL,CAAqBF,CAArB,EAAwBF,KAAK,CAACG,OAA9B,EAAuC7G,IAAvC,CAA4C+G,QAAQ,IAAIH,CAAC,CAACG,QAAF,GAAaA,QAArE;MACH;;MACD,OAAOH,CAAP;IACH,CATgB,CAAjB;;IAUA,KAAKJ,OAAL,CAAapC,GAAb,CAAiBsC,KAAjB,EAAwB7E,QAAxB;EACH;;EACDmF,eAAe,CAACN,KAAD,EAAQ;IACnB,KAAKF,OAAL,CAAahB,GAAb,CAAiBkB,KAAjB,EAAwB1G,IAAxB,CAA6BiH,CAAC,IAAI;MAC9BA,CAAC,CAAC5F,MAAF,CAAS,IAAT;;MACA,KAAKmF,OAAL,CAAad,MAAb,CAAoBgB,KAApB;IACH,CAHD;EAIH;;EACDQ,aAAa,CAACR,KAAD,EAAQG,OAAR,EAAiB;IAC1B,KAAKL,OAAL,CAAahB,GAAb,CAAiBkB,KAAjB,EAAwB1G,IAAxB,CAA6BiH,CAAC,IAAI;MAC9BA,CAAC,CAACE,OAAF,CAAUC,OAAO,IAAI;QACjBH,CAAC,CAACZ,MAAF,CAASe,OAAT,EADiB,CAEjB;;QACA,MAAMC,KAAK,GAAGJ,CAAC,CAACF,QAAF,CAAWO,OAAX,CAAmBF,OAAnB,EAA4B,CAA5B,CAAd;;QACA,IAAIC,KAAK,GAAG,CAAC,CAAb,EAAgB;UACZJ,CAAC,CAACF,QAAF,CAAWQ,MAAX,CAAkBF,KAAlB,EAAyB,CAAzB;QACH;MACJ,CAPD;MAQA,KAAKP,eAAL,CAAqBG,CAArB,EAAwBJ,OAAxB,EAAiC7G,IAAjC,CAAsC+G,QAAQ,IAAIE,CAAC,CAACF,QAAF,GAAaA,QAA/D;IACH,CAVD;EAWH;;EACDS,cAAc,CAACd,KAAD,EAAQrG,OAAR,EAAiB;IAC3B,KAAKmG,OAAL,CAAahB,GAAb,CAAiBkB,KAAjB,EAAwB1G,IAAxB,CAA6BiH,CAAC,IAAI;MAC9BA,CAAC,CAACQ,kBAAF,CAAqBpH,OAAO,CAACqH,eAA7B;MACAT,CAAC,CAACU,WAAF,CAActH,OAAO,CAACuH,QAAtB;MACAX,CAAC,CAACY,cAAF,CAAiBxH,OAAO,CAACyH,WAAzB;MACAb,CAAC,CAACc,QAAF,CAAW1H,OAAO,CAACsG,KAAnB;IACH,CALD;EAMH;EACD;AACJ;AACA;;;EACIT,qBAAqB,CAAC5D,SAAD,EAAYoE,KAAZ,EAAmB;IACpC,OAAO,IAAIhJ,UAAJ,CAAgB6E,QAAD,IAAc;MAChC,KAAKiE,OAAL,CAAahB,GAAb,CAAiBkB,KAAjB,EAAwB1G,IAAxB,CAA8B4G,CAAD,IAAO;QAChCA,CAAC,CAACpE,WAAF,CAAcF,SAAd,EAA0B8D,CAAD,IAAO,KAAK9G,KAAL,CAAWmD,GAAX,CAAe,MAAMF,QAAQ,CAACG,IAAT,CAAc0D,CAAd,CAArB,CAAhC;MACH,CAFD;IAGH,CAJM,CAAP;EAKH;EACD;AACJ;AACA;AACA;AACA;;;EACIU,eAAe,CAACF,CAAD,EAAIC,OAAJ,EAAa;IACxB,OAAO,IAAIrH,OAAJ,CAAY,CAACC,OAAD,EAAUuI,MAAV,KAAqB;MACpC,IAAI,OAAOnB,OAAP,KAAmB,QAAvB,EAAiC;QAC7B,IAAI;UACA,MAAME,QAAQ,GAAGH,CAAC,CAACqB,UAAF,CAAapB,OAAb,CAAjB;UACApH,OAAO,CAACsH,QAAD,CAAP;QACH,CAHD,CAIA,OAAOX,CAAP,EAAU;UACN4B,MAAM,CAAC5B,CAAD,CAAN;QACH;MACJ,CARD,MASK,IAAI,OAAOS,OAAP,KAAmB,QAAvB,EAAiC;QAClCD,CAAC,CAACsB,WAAF,CAAcrB,OAAd,EAAuB,IAAvB,EAA6BpH,OAA7B;MACH,CAFI,MAGA;QACDuI,MAAM,CAAE,kEAAF,CAAN;MACH;IACJ,CAhBM,CAAP;EAiBH;;AAlFkB;;AAoFvB1B,gBAAgB,CAACrH,UAAjB,GAA8B,CAC1B;EAAEC,IAAI,EAAE5C;AAAR,CAD0B,CAA9B;;AAGAgK,gBAAgB,CAACxC,cAAjB,GAAkC,MAAM,CACpC;EAAE5E,IAAI,EAAEC;AAAR,CADoC,EAEpC;EAAED,IAAI,EAAE3C;AAAR,CAFoC,CAAxC;AAKA;AACA;AACA;AACA;;;AACA,MAAM4L,iBAAN,CAAwB;AAExB;AACA;AACA;;;AACA,MAAMC,gBAAN,CAAuB;EACnBhJ,WAAW,CAACiJ,MAAD,EAAS;IAChB,KAAKC,wBAAL,GAAgC,IAAI3K,eAAJ,CAAoB,GAApB,CAAhC;IACA,KAAK4K,iBAAL,GAAyB,IAAI5K,eAAJ,CAAoB,IAAIwC,GAAJ,EAApB,CAAzB;IACA,KAAKqI,OAAL,GAAe5K,IAAI,CAACyK,MAAM,CAACtI,IAAP,EAAD,CAAJ,CAAoB0I,IAApB,CAAyBpK,OAAO,CAAC,MAAM,KAAKkK,iBAAZ,CAAhC,EAAgEjK,MAAM,CAAC,KAAKgK,wBAAL,CAA8BG,IAA9B,CAAmClK,SAAS,CAACmK,IAAI,IAAI7K,KAAK,CAAC,CAAD,EAAI6K,IAAJ,CAAd,CAA5C,CAAD,CAAtE,EAA+IlK,GAAG,CAACmK,eAAe,IAAI,KAAKC,eAAL,CAAqBD,eAArB,CAApB,CAAlJ,EAA8MlK,WAAW,CAAC,CAAD,CAAzN,CAAf;EACH;;EACDmK,eAAe,CAACD,eAAD,EAAkB;IAC7B,MAAME,MAAM,GAAG,IAAI5I,MAAM,CAACC,IAAP,CAAY4I,YAAhB,EAAf;IACAH,eAAe,CAACxB,OAAhB,CAAwB4B,CAAC,IAAIF,MAAM,CAACG,MAAP,CAAcD,CAAd,CAA7B;IACA,OAAOF,MAAP;EACH;;EACDI,WAAW,CAAC/G,MAAD,EAAS;IAChB,MAAMgH,EAAE,GAAG,KAAKC,iBAAL,CAAuBjH,MAAvB,CAAX;;IACA,IAAI,KAAKqG,iBAAL,CAAuBa,KAAvB,CAA6BC,GAA7B,CAAiCH,EAAjC,CAAJ,EAA0C;MACtC;IACH;;IACD,MAAMI,SAAS,GAAG,KAAKf,iBAAL,CAAuBa,KAAzC;IACAE,SAAS,CAAClF,GAAV,CAAc8E,EAAd,EAAkBhH,MAAlB;;IACA,KAAKqG,iBAAL,CAAuB7F,IAAvB,CAA4B4G,SAA5B;EACH;;EACDC,gBAAgB,CAACrH,MAAD,EAAS;IACrB,MAAMoH,SAAS,GAAG,KAAKf,iBAAL,CAAuBa,KAAzC;IACAE,SAAS,CAAC5D,MAAV,CAAiB,KAAKyD,iBAAL,CAAuBjH,MAAvB,CAAjB;;IACA,KAAKqG,iBAAL,CAAuB7F,IAAvB,CAA4B4G,SAA5B;EACH;;EACDE,+BAA+B,CAACC,MAAD,EAAS;IACpC,KAAKnB,wBAAL,CAA8B5F,IAA9B,CAAmC+G,MAAnC;EACH;;EACDC,UAAU,GAAG;IACT,OAAO,KAAKlB,OAAZ;EACH;;EACDW,iBAAiB,CAACjH,MAAD,EAAS;IACtB,OAAQ,GAAEA,MAAM,CAACoC,GAAI,IAAGpC,MAAM,CAACsC,GAAI,EAAnC;EACH;;AAjCkB;;AAmCvB4D,gBAAgB,CAACnJ,UAAjB,GAA8B,CAC1B;EAAEC,IAAI,EAAE5C;AAAR,CAD0B,CAA9B;;AAGA8L,gBAAgB,CAACtE,cAAjB,GAAkC,MAAM,CACpC;EAAE5E,IAAI,EAAEF;AAAR,CADoC,CAAxC;;AAIA,MAAM2K,WAAN,CAAkB;EACdvK,WAAW,CAACiJ,MAAD,EAAS;IAChB,MAAMuB,oBAAoB,GAAG,IAAIlM,UAAJ,CAAemM,UAAU,IAAI;MACtDxB,MAAM,CAACtI,IAAP,GAAcC,IAAd,CAAmB,MAAM6J,UAAU,CAACnH,IAAX,EAAzB;IACH,CAF4B,EAGxB+F,IAHwB,CAGnBjK,GAAG,CAAC,MAAM,KAAKsL,eAAL,EAAP,CAHgB,EAGgBpL,SAAS,CAAC,IAAIZ,aAAJ,CAAkB,CAAlB,CAAD,CAHzB,CAA7B;IAIA8L,oBAAoB,CAACG,OAArB,GALgB,CAKgB;IAChC;;IACA,KAAKC,SAAL,GAAiBJ,oBAAjB;EACH;;EACDK,OAAO,CAACC,OAAD,EAAU;IACb,OAAO,KAAKF,SAAL,CAAevB,IAAf,CAAoBlK,SAAS,CAAE4L,QAAD,IAAc,KAAKC,iBAAL,CAAuBD,QAAvB,EAAiCD,OAAjC,CAAf,CAA7B,CAAP;EACH;;EACDE,iBAAiB,CAACD,QAAD,EAAWD,OAAX,EAAoB;IACjC,MAAMG,iBAAiB,GAAGtM,YAAY,CAACoM,QAAQ,CAACF,OAAV,CAAtC;IACA,OAAOI,iBAAiB,CAACH,OAAD,CAAjB,CAA2BzB,IAA3B,CAAgClK,SAAS,CAAC,CAAC,CAAC+L,OAAD,EAAUC,MAAV,CAAD,KAAuB;MACpE,IAAIA,MAAM,KAAKtK,MAAM,CAACC,IAAP,CAAYsK,cAAZ,CAA2BC,EAA1C,EAA8C;QAC1C,OAAOzM,EAAE,CAACsM,OAAD,CAAT;MACH;;MACD,OAAOrM,UAAU,CAACsM,MAAD,CAAjB;IACH,CAL+C,CAAzC,CAAP;EAMH;;EACDT,eAAe,GAAG;IACd,OAAO,IAAI7J,MAAM,CAACC,IAAP,CAAYwK,QAAhB,EAAP;EACH;;AAxBa;;AA0BlBf,WAAW,CAACgB,KAAZ,GAAoBnO,kBAAkB,CAAC;EAAEoO,OAAO,EAAE,SAASC,mBAAT,GAA+B;IAAE,OAAO,IAAIlB,WAAJ,CAAgBlN,QAAQ,CAACuC,aAAD,CAAxB,CAAP;EAAkD,CAA9F;EAAgG8L,KAAK,EAAEnB,WAAvG;EAAoHoB,UAAU,EAAE;AAAhI,CAAD,CAAtC;AACApB,WAAW,CAAC1K,UAAZ,GAAyB,CACrB;EAAEC,IAAI,EAAE5C,UAAR;EAAoB0O,IAAI,EAAE,CAAC;IAAED,UAAU,EAAE;EAAd,CAAD;AAA1B,CADqB,CAAzB;;AAGApB,WAAW,CAAC7F,cAAZ,GAA6B,MAAM,CAC/B;EAAE5E,IAAI,EAAEF;AAAR,CAD+B,CAAnC;;AAIA,MAAMiM,SAAN,CAAgB;EACZC,eAAe,GAAG;IAAE,OAAOC,MAAP;EAAgB;;AADxB;;AAGhB,MAAMC,WAAN,CAAkB;EACdC,iBAAiB,GAAG;IAAE,OAAOC,QAAP;EAAkB;;AAD1B;;AAGlB,MAAMC,yBAAyB,GAAG,CAACN,SAAD,EAAYG,WAAZ,CAAlC;AAEA,IAAII,wBAAJ;;AACA,CAAC,UAAUA,wBAAV,EAAoC;EACjCA,wBAAwB,CAACA,wBAAwB,CAAC,MAAD,CAAxB,GAAmC,CAApC,CAAxB,GAAiE,MAAjE;EACAA,wBAAwB,CAACA,wBAAwB,CAAC,OAAD,CAAxB,GAAoC,CAArC,CAAxB,GAAkE,OAAlE;EACAA,wBAAwB,CAACA,wBAAwB,CAAC,MAAD,CAAxB,GAAmC,CAApC,CAAxB,GAAiE,MAAjE;AACH,CAJD,EAIGA,wBAAwB,KAAKA,wBAAwB,GAAG,EAAhC,CAJ3B;AAKA;AACA;AACA;AACA;;;AACA,MAAMC,oBAAoB,GAAG,IAAI/O,cAAJ,CAAmB,0CAAnB,CAA7B;;AACA,MAAMgP,iBAAN,SAAgC1M,aAAhC,CAA8C;EAC1CI,WAAW,CAACuM,MAAM,GAAG,IAAV,EAAgBC,CAAhB,EAAmBhF,CAAnB,EAAsBiF,QAAtB,EAAgC;IACvC;IACA,KAAKA,QAAL,GAAgBA,QAAhB;IACA,KAAKC,UAAL,GAAkB,wBAAlB;IACA,KAAKC,YAAL,GAAqB,sBAArB;IACA,KAAKC,OAAL,GAAeL,MAAM,IAAI,EAAzB;IACA,KAAKM,UAAL,GAAkBL,CAAlB;IACA,KAAKM,YAAL,GAAoBtF,CAApB;EACH;;EACD7G,IAAI,GAAG;IACH,MAAMoL,MAAM,GAAG,KAAKc,UAAL,CAAgBf,eAAhB,EAAf;;IACA,IAAIC,MAAM,CAAClL,MAAP,IAAiBkL,MAAM,CAAClL,MAAP,CAAcC,IAAnC,EAAyC;MACrC;MACA,OAAOV,OAAO,CAACC,OAAR,EAAP;IACH;;IACD,IAAI,KAAK0M,qBAAT,EAAgC;MAC5B,OAAO,KAAKA,qBAAZ;IACH,CARE,CASH;;;IACA,MAAMC,YAAY,GAAG,KAAKF,YAAL,CAAkBb,iBAAlB,GAAsCgB,cAAtC,CAAqD,KAAKP,UAA1D,CAArB;;IACA,IAAIM,YAAJ,EAAkB;MACd,KAAKE,2BAAL,CAAiCF,YAAjC;;MACA,OAAO,KAAKD,qBAAZ;IACH;;IACD,MAAMI,MAAM,GAAG,KAAKL,YAAL,CAAkBb,iBAAlB,GAAsCmB,aAAtC,CAAoD,QAApD,CAAf;;IACAD,MAAM,CAACrN,IAAP,GAAc,iBAAd;IACAqN,MAAM,CAACE,KAAP,GAAe,IAAf;IACAF,MAAM,CAACG,KAAP,GAAe,IAAf;IACAH,MAAM,CAACrD,EAAP,GAAY,KAAK4C,UAAjB;IACAS,MAAM,CAACI,GAAP,GAAa,KAAKC,aAAL,CAAmB,KAAKb,YAAxB,CAAb;;IACA,KAAKO,2BAAL,CAAiCC,MAAjC;;IACA,KAAKL,YAAL,CAAkBb,iBAAlB,GAAsCwB,IAAtC,CAA2CC,WAA3C,CAAuDP,MAAvD;;IACA,OAAO,KAAKJ,qBAAZ;EACH;;EACDG,2BAA2B,CAACS,UAAD,EAAa;IACpC,KAAKZ,qBAAL,GAA6B,IAAI3M,OAAJ,CAAY,CAACC,OAAD,EAAUuI,MAAV,KAAqB;MAC1D,KAAKiE,UAAL,CAAgBf,eAAhB,GAAkC,KAAKa,YAAvC,IAAuD,MAAM;QACzDtM,OAAO;MACV,CAFD;;MAGAsN,UAAU,CAACC,OAAX,GAAsBC,KAAD,IAAW;QAC5BjF,MAAM,CAACiF,KAAD,CAAN;MACH,CAFD;IAGH,CAP4B,CAA7B;EAQH;;EACDL,aAAa,CAACb,YAAD,EAAe;IACxB,MAAMmB,YAAY,GAAI,KAAKlB,OAAL,IAAgB,KAAKA,OAAL,CAAamB,QAA9B,IAA2C3B,wBAAwB,CAAC4B,KAAzF;IACA,IAAID,QAAJ;;IACA,QAAQD,YAAR;MACI,KAAK1B,wBAAwB,CAAC6B,IAA9B;QACIF,QAAQ,GAAG,EAAX;QACA;;MACJ,KAAK3B,wBAAwB,CAAC8B,IAA9B;QACIH,QAAQ,GAAG,OAAX;QACA;;MACJ,KAAK3B,wBAAwB,CAAC4B,KAA9B;QACID,QAAQ,GAAG,QAAX;QACA;IATR;;IAWA,MAAMI,WAAW,GAAG,KAAKvB,OAAL,CAAauB,WAAb,IAA4B,iCAAhD;IACA,MAAMC,WAAW,GAAG;MAChBC,CAAC,EAAE,KAAKzB,OAAL,CAAa0B,UAAb,IAA2B,WADd;MAEhBC,QAAQ,EAAE5B,YAFM;MAGhB6B,GAAG,EAAE,KAAK5B,OAAL,CAAa6B,MAHF;MAIhBC,MAAM,EAAE,KAAK9B,OAAL,CAAa+B,QAJL;MAKhBC,OAAO,EAAE,KAAKhC,OAAL,CAAagC,OALN;MAMhBC,SAAS,EAAE,KAAKjC,OAAL,CAAaiC,SANR;MAOhBC,MAAM,EAAE,KAAKlC,OAAL,CAAakC,MAPL;MAQhBC,QAAQ,EAAE,KAAKnC,OAAL,CAAamC,QAAb,KAA0B,KAAKtC,QAAL,KAAkB,OAAlB,GAA4B,KAAKA,QAAjC,GAA4C,IAAtE;IARM,CAApB;IAUA,MAAMuC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYd,WAAZ,EACVe,MADU,CACFC,CAAD,IAAOhB,WAAW,CAACgB,CAAD,CAAX,IAAkB,IADtB,EAEVD,MAFU,CAEFC,CAAD,IAAO;MACf;MACA,OAAO,CAACC,KAAK,CAACC,OAAN,CAAclB,WAAW,CAACgB,CAAD,CAAzB,CAAD,IACFC,KAAK,CAACC,OAAN,CAAclB,WAAW,CAACgB,CAAD,CAAzB,KAAiChB,WAAW,CAACgB,CAAD,CAAX,CAAeG,MAAf,GAAwB,CAD9D;IAEH,CANc,EAOVnQ,GAPU,CAOLgQ,CAAD,IAAO;MACZ;MACA,MAAMI,CAAC,GAAGpB,WAAW,CAACgB,CAAD,CAArB;;MACA,IAAIC,KAAK,CAACC,OAAN,CAAcE,CAAd,CAAJ,EAAsB;QAClB,OAAO;UAAEhB,GAAG,EAAEY,CAAP;UAAUpF,KAAK,EAAEwF,CAAC,CAACC,IAAF,CAAO,GAAP;QAAjB,CAAP;MACH;;MACD,OAAO;QAAEjB,GAAG,EAAEY,CAAP;QAAUpF,KAAK,EAAEoE,WAAW,CAACgB,CAAD;MAA5B,CAAP;IACH,CAdc,EAeVhQ,GAfU,CAeLsQ,KAAD,IAAW;MAChB,OAAQ,GAAEA,KAAK,CAAClB,GAAI,IAAGkB,KAAK,CAAC1F,KAAM,EAAnC;IACH,CAjBc,EAkBVyF,IAlBU,CAkBL,GAlBK,CAAf;IAmBA,OAAQ,GAAE1B,QAAS,KAAII,WAAY,IAAGa,MAAO,EAA7C;EACH;;AA1FyC;;AA4F9C1C,iBAAiB,CAACzM,UAAlB,GAA+B,CAC3B;EAAEC,IAAI,EAAE5C;AAAR,CAD2B,CAA/B;;AAGAoP,iBAAiB,CAAC5H,cAAlB,GAAmC,MAAM,CACrC;EAAE5E,IAAI,EAAE6P,SAAR;EAAmB9P,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEvC;EAAR,CAAD,EAAqB;IAAEuC,IAAI,EAAEtC,MAAR;IAAgBoO,IAAI,EAAE,CAACS,oBAAD;EAAtB,CAArB;AAA/B,CADqC,EAErC;EAAEvM,IAAI,EAAE+L;AAAR,CAFqC,EAGrC;EAAE/L,IAAI,EAAEkM;AAAR,CAHqC,EAIrC;EAAElM,IAAI,EAAE8P,MAAR;EAAgB/P,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEtC,MAAR;IAAgBoO,IAAI,EAAE,CAACnO,SAAD;EAAtB,CAAD;AAA5B,CAJqC,CAAzC;;AAOA,MAAMoS,aAAN,CAAoB;EAChB7P,WAAW,CAAC8P,YAAD,EAAe5P,KAAf,EAAsB;IAC7B,KAAK4P,YAAL,GAAoBA,YAApB;IACA,KAAK5P,KAAL,GAAaA,KAAb;IACA,KAAK6P,QAAL,GAAgB,IAAIhP,GAAJ,EAAhB;EACH;;EACDiP,gBAAgB,CAACC,MAAD,EAAS;IACrB,OAAOhT,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;MAChD,IAAIgT,MAAM,KAAK,IAAf,EAAqB;QACjB,OAAO,IAAP;MACH,CAFD,MAGK;QACD,OAAO,KAAKH,YAAL,CAAkBhO,YAAlB,GAAiClB,IAAjC,CAAsC,MAAMC,MAAM,CAACC,IAAP,CAAYoP,SAAZ,CAAsBD,MAAtB,CAA5C,CAAP;MACH;IACJ,CAPe,CAAhB;EAQH;;EACDE,YAAY,CAACC,eAAD,EAAkB;IAC1B,MAAMC,aAAa,GAAG,KAAKN,QAAL,CAAc3J,GAAd,CAAkBgK,eAAlB,CAAtB;;IACA,IAAIC,aAAa,IAAI,IAArB,EAA2B;MACvB;MACA,OAAOjQ,OAAO,CAACC,OAAR,EAAP;IACH;;IACD,OAAOgQ,aAAa,CAACzP,IAAd,CAAoB0P,MAAD,IAAY;MAClC,OAAO,KAAKpQ,KAAL,CAAWmD,GAAX,CAAe,MAAM;QACxBiN,MAAM,CAACrO,MAAP,CAAc,IAAd;;QACA,KAAK8N,QAAL,CAAczJ,MAAd,CAAqB8J,eAArB;MACH,CAHM,CAAP;IAIH,CALM,CAAP;EAMH;;EACDG,oBAAoB,CAACD,MAAD,EAAS;IACzB,OAAO,KAAKP,QAAL,CAAc3J,GAAd,CAAkBkK,MAAlB,EAA0B1P,IAA1B,CAAgCM,CAAD,IAAOA,CAAC,CAACsP,WAAF,CAAc;MAAEtL,GAAG,EAAEoL,MAAM,CAACnL,QAAd;MAAwBC,GAAG,EAAEkL,MAAM,CAACjL;IAApC,CAAd,CAAtC,CAAP;EACH;;EACDoL,WAAW,CAACH,MAAD,EAAS;IAChB,OAAO,KAAKP,QAAL,CAAc3J,GAAd,CAAkBkK,MAAlB,EAA0B1P,IAA1B,CAAgCM,CAAD,IAAOA,CAAC,CAACwP,QAAF,CAAWJ,MAAM,CAACK,KAAlB,CAAtC,CAAP;EACH;;EACDC,WAAW,CAACN,MAAD,EAAS;IAChB,OAAO,KAAKP,QAAL,CAAc3J,GAAd,CAAkBkK,MAAlB,EAA0B1P,IAA1B,CAAgCM,CAAD,IAAO;MAAEA,CAAC,CAAC2P,QAAF,CAAWP,MAAM,CAACQ,KAAlB;IAA2B,CAAnE,CAAP;EACH;;EACDC,eAAe,CAACT,MAAD,EAAS;IACpB,OAAO,KAAKP,QAAL,CAAc3J,GAAd,CAAkBkK,MAAlB,EAA0B1P,IAA1B,CAAgCM,CAAD,IAAOA,CAAC,CAACwF,YAAF,CAAe4J,MAAM,CAAC/K,SAAtB,CAAtC,CAAP;EACH;;EACDyL,UAAU,CAACV,MAAD,EAAS;IACf,OAAO,KAAKP,QAAL,CAAc3J,GAAd,CAAkBkK,MAAlB,EAA0B1P,IAA1B,CAAgCM,CAAD,IAAOA,CAAC,CAAC+P,OAAF,CAAUX,MAAM,CAACY,OAAjB,CAAtC,CAAP;EACH;;EACDC,aAAa,CAACb,MAAD,EAAS;IAClB,OAAO,KAAKP,QAAL,CAAc3J,GAAd,CAAkBkK,MAAlB,EAA0B1P,IAA1B,CAAgCM,CAAD,IAAOA,CAAC,CAACkQ,UAAF,CAAad,MAAM,CAACe,OAApB,CAAtC,CAAP;EACH;;EACDC,aAAa,CAAChB,MAAD,EAAS;IAClB,OAAO,KAAKP,QAAL,CAAc3J,GAAd,CAAkBkK,MAAlB,EAA0B1P,IAA1B,CAAgCM,CAAD,IAAOA,CAAC,CAACyF,UAAF,CAAa2J,MAAM,CAACrK,OAApB,CAAtC,CAAP;EACH;;EACDsL,YAAY,CAACjB,MAAD,EAAS;IACjB,OAAO,KAAKP,QAAL,CAAc3J,GAAd,CAAkBkK,MAAlB,EAA0B1P,IAA1B,CAAgCM,CAAD,IAAOA,CAAC,CAACsQ,SAAF,CAAYlB,MAAM,CAACpK,MAAnB,CAAtC,CAAP;EACH;;EACDuL,eAAe,CAACnB,MAAD,EAAS;IACpB,OAAO,KAAKP,QAAL,CAAc3J,GAAd,CAAkBkK,MAAlB,EAA0B1P,IAA1B,CAAgCM,CAAD,IAAOA,CAAC,CAACwQ,YAAF,CAAepB,MAAM,CAAChL,SAAtB,CAAtC,CAAP;EACH;;EACDqM,eAAe,CAACrB,MAAD,EAAS;IACpB,OAAOrT,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;MAChD,MAAMiE,CAAC,GAAG,MAAM,KAAK6O,QAAL,CAAc3J,GAAd,CAAkBkK,MAAlB,CAAhB;MACApP,CAAC,CAAC0Q,YAAF,CAAe,MAAM,KAAK5B,gBAAL,CAAsBM,MAAM,CAACuB,SAA7B,CAArB;IACH,CAHe,CAAhB;EAIH;;EACDC,SAAS,CAACxB,MAAD,EAAS;IACd,MAAMD,aAAa,GAAG,IAAIjQ,OAAJ,CAAaC,OAAD,IAAapD,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;MACxF,OAAO,KAAK6S,YAAL,CAAkB1O,YAAlB,CAA+B;QAClC2Q,QAAQ,EAAE;UAAE7M,GAAG,EAAEoL,MAAM,CAACnL,QAAd;UAAwBC,GAAG,EAAEkL,MAAM,CAACjL;QAApC,CADwB;QAElCyL,KAAK,EAAER,MAAM,CAACQ,KAFoB;QAGlCvL,SAAS,EAAE+K,MAAM,CAAC/K,SAHgB;QAIlCyM,IAAI,EAAE1B,MAAM,CAACY,OAJqB;QAKlCG,OAAO,EAAEf,MAAM,CAACe,OALkB;QAMlCpL,OAAO,EAAEqK,MAAM,CAACrK,OANkB;QAOlCC,MAAM,EAAEoK,MAAM,CAACpK,MAPmB;QAQlCyK,KAAK,EAAEL,MAAM,CAACK,KARoB;QASlCrL,SAAS,EAAEgL,MAAM,CAAChL,SATgB;QAUlCuM,SAAS,EAAE,MAAM,KAAK7B,gBAAL,CAAsBM,MAAM,CAACuB,SAA7B;MAViB,CAA/B,EAWJjR,IAXI,CAWCP,OAXD,CAAP;IAYH,CAbuD,CAAlC,CAAtB;;IAcA,KAAK0P,QAAL,CAAc/K,GAAd,CAAkBsL,MAAlB,EAA0BD,aAA1B;EACH;;EACD4B,eAAe,CAAC3B,MAAD,EAAS;IACpB,OAAO,KAAKP,QAAL,CAAc3J,GAAd,CAAkBkK,MAAlB,CAAP;EACH;;EACDxJ,qBAAqB,CAAC5D,SAAD,EAAYoN,MAAZ,EAAoB;IACrC,OAAO,IAAIhS,UAAJ,CAAe6E,QAAQ,IAAI;MAC9B,KAAK4M,QAAL,CAAc3J,GAAd,CAAkBkK,MAAlB,EAA0B1P,IAA1B,CAA+BM,CAAC,IAAIA,CAAC,CAACkC,WAAF,CAAcF,SAAd,EAAyB8D,CAAC,IAAI,KAAK9G,KAAL,CAAWmD,GAAX,CAAe,MAAMF,QAAQ,CAACG,IAAT,CAAc0D,CAAd,CAArB,CAA9B,CAApC;IACH,CAFM,CAAP;EAGH;;AAtFe;;AAwFpB6I,aAAa,CAAChQ,UAAd,GAA2B,CACvB;EAAEC,IAAI,EAAE5C;AAAR,CADuB,CAA3B;;AAGA2S,aAAa,CAACnL,cAAd,GAA+B,MAAM,CACjC;EAAE5E,IAAI,EAAEC;AAAR,CADiC,EAEjC;EAAED,IAAI,EAAE3C;AAAR,CAFiC,CAArC;;AAKA,MAAM+U,iBAAN,CAAwB;EACpBlS,WAAW,CAAC8P,YAAD,EAAe5P,KAAf,EAAsBiS,cAAtB,EAAsC;IAC7C,KAAKrC,YAAL,GAAoBA,YAApB;IACA,KAAK5P,KAAL,GAAaA,KAAb;IACA,KAAKiS,cAAL,GAAsBA,cAAtB;IACA,KAAKC,YAAL,GAAoB,IAAIrR,GAAJ,EAApB;EACH;;EACDsR,gBAAgB,CAACC,UAAD,EAAa;IACzB,MAAMC,OAAO,GAAG,KAAKH,YAAL,CAAkBhM,GAAlB,CAAsBkM,UAAtB,CAAhB;;IACA,IAAIC,OAAO,IAAI,IAAf,EAAqB;MACjB;MACA,OAAOnS,OAAO,CAACC,OAAR,EAAP;IACH;;IACD,OAAOkS,OAAO,CAAC3R,IAAR,CAAc4O,CAAD,IAAO;MACvB,OAAO,KAAKtP,KAAL,CAAWmD,GAAX,CAAe,MAAM;QACxBmM,CAAC,CAACgD,KAAF;;QACA,KAAKJ,YAAL,CAAkB9L,MAAlB,CAAyBgM,UAAzB;MACH,CAHM,CAAP;IAIH,CALM,CAAP;EAMH;;EACD9B,WAAW,CAAC8B,UAAD,EAAa;IACpB,OAAO,KAAKF,YAAL,CAAkBhM,GAAlB,CAAsBkM,UAAtB,EAAkC1R,IAAlC,CAAwC4O,CAAD,IAAOA,CAAC,CAACgB,WAAF,CAAc;MAC/DtL,GAAG,EAAEoN,UAAU,CAACnN,QAD+C;MAE/DC,GAAG,EAAEkN,UAAU,CAACjN;IAF+C,CAAd,CAA9C,CAAP;EAIH;;EACDmM,SAAS,CAACc,UAAD,EAAa;IAClB,OAAO,KAAKF,YAAL,CAAkBhM,GAAlB,CAAsBkM,UAAtB,EACF1R,IADE,CACI4O,CAAD,IAAOA,CAAC,CAACgC,SAAF,CAAYc,UAAU,CAACpM,MAAvB,CADV,CAAP;EAEH;;EACDuM,IAAI,CAACH,UAAD,EAAa;IACb,OAAO,KAAKF,YAAL,CAAkBhM,GAAlB,CAAsBkM,UAAtB,EAAkC1R,IAAlC,CAAwC4L,CAAD,IAAO;MACjD,IAAI8F,UAAU,CAACI,UAAX,IAAyB,IAA7B,EAAmC;QAC/B,OAAO,KAAKP,cAAL,CAAoBF,eAApB,CAAoCK,UAAU,CAACI,UAA/C,EAA2D9R,IAA3D,CAAiE0P,MAAD,IAAY;UAC/E,OAAO,KAAKR,YAAL,CAAkBhO,YAAlB,GAAiClB,IAAjC,CAAuCxB,GAAD,IAASoN,CAAC,CAACiG,IAAF,CAAOrT,GAAP,EAAYkR,MAAZ,CAA/C,CAAP;QACH,CAFM,CAAP;MAGH;;MACD,OAAO,KAAKR,YAAL,CAAkBhO,YAAlB,GAAiClB,IAAjC,CAAuCxB,GAAD,IAASoN,CAAC,CAACiG,IAAF,CAAOrT,GAAP,CAA/C,CAAP;IACH,CAPM,CAAP;EAQH;;EACDoT,KAAK,CAACF,UAAD,EAAa;IACd,OAAO,KAAKF,YAAL,CAAkBhM,GAAlB,CAAsBkM,UAAtB,EAAkC1R,IAAlC,CAAwC4L,CAAD,IAAOA,CAAC,CAACgG,KAAF,EAA9C,CAAP;EACH;;EACDrR,UAAU,CAACmR,UAAD,EAAarR,OAAb,EAAsB;IAC5B,OAAO,KAAKmR,YAAL,CAAkBhM,GAAlB,CAAsBkM,UAAtB,EAAkC1R,IAAlC,CAAwC4O,CAAD,IAAOA,CAAC,CAACrO,UAAF,CAAaF,OAAb,CAA9C,CAAP;EACH;;EACD0R,aAAa,CAACL,UAAD,EAAa;IACtB,MAAMrR,OAAO,GAAG;MACZ2R,OAAO,EAAEN,UAAU,CAACM,OADR;MAEZC,QAAQ,EAAEP,UAAU,CAACO,QAFT;MAGZ3M,MAAM,EAAEoM,UAAU,CAACpM,MAHP;MAIZ4M,cAAc,EAAER,UAAU,CAACQ;IAJf,CAAhB;;IAMA,IAAI,OAAOR,UAAU,CAACnN,QAAlB,KAA+B,QAA/B,IAA2C,OAAOmN,UAAU,CAACjN,SAAlB,KAAgC,QAA/E,EAAyF;MACrFpE,OAAO,CAAC8Q,QAAR,GAAmB;QAAE7M,GAAG,EAAEoN,UAAU,CAACnN,QAAlB;QAA4BC,GAAG,EAAEkN,UAAU,CAACjN;MAA5C,CAAnB;IACH;;IACD,MAAM0N,iBAAiB,GAAG,KAAKjD,YAAL,CAAkBvO,gBAAlB,CAAmCN,OAAnC,CAA1B;;IACA,KAAKmR,YAAL,CAAkBpN,GAAlB,CAAsBsN,UAAtB,EAAkCS,iBAAlC;EACH;EACD;AACJ;AACA;;;EACIjM,qBAAqB,CAAC5D,SAAD,EAAYoP,UAAZ,EAAwB;IACzC,OAAO,IAAIhU,UAAJ,CAAgB6E,QAAD,IAAc;MAChC,KAAKiP,YAAL,CAAkBhM,GAAlB,CAAsBkM,UAAtB,EAAkC1R,IAAlC,CAAwC4O,CAAD,IAAO;QAC1CA,CAAC,CAACpM,WAAF,CAAcF,SAAd,EAA0B8D,CAAD,IAAO,KAAK9G,KAAL,CAAWmD,GAAX,CAAe,MAAMF,QAAQ,CAACG,IAAT,CAAc0D,CAAd,CAArB,CAAhC;MACH,CAFD;IAGH,CAJM,CAAP;EAKH;;AApEmB;;AAsExBkL,iBAAiB,CAACrS,UAAlB,GAA+B,CAC3B;EAAEC,IAAI,EAAE5C;AAAR,CAD2B,CAA/B;;AAGAgV,iBAAiB,CAACxN,cAAlB,GAAmC,MAAM,CACrC;EAAE5E,IAAI,EAAEC;AAAR,CADqC,EAErC;EAAED,IAAI,EAAE3C;AAAR,CAFqC,EAGrC;EAAE2C,IAAI,EAAE+P;AAAR,CAHqC,CAAzC;AAMA;AACA;AACA;;;AACA,MAAMmD,eAAN,CAAsB;EAClBhT,WAAW,CAACmH,QAAD,EAAWjH,KAAX,EAAkB;IACzB,KAAKiH,QAAL,GAAgBA,QAAhB;IACA,KAAKjH,KAAL,GAAaA,KAAb;IACA,KAAKkH,OAAL,GAAe,IAAIrG,GAAJ,EAAf;EACH;EACD;AACJ;AACA;;;EACIkS,WAAW,CAAC3L,KAAD,EAAQ;IACf,MAAM7E,QAAQ,GAAG,KAAK0E,QAAL,CAAcrF,YAAd,GAA6BlB,IAA7B,CAAkCM,CAAC,IAAI;MACpD,OAAO,IAAIL,MAAM,CAACC,IAAP,CAAYoS,QAAhB,CAAyB;QAC5B5N,SAAS,EAAEgC,KAAK,CAAChC,SADW;QAE5BlG,GAAG,EAAE8B,CAFuB;QAG5BiS,gBAAgB,EAAE7L,KAAK,CAAC6L,gBAHI;QAI5BC,cAAc,EAAE9L,KAAK,CAAC8L,cAJM;QAK5BC,mBAAmB,EAAE/L,KAAK,CAAC+L,mBALC;QAM5BC,GAAG,EAAEhM,KAAK,CAACgM,GANiB;QAO5BpN,MAAM,EAAEoB,KAAK,CAACpB;MAPc,CAAzB,CAAP;IASH,CAVgB,CAAjB;;IAWA,KAAKkB,OAAL,CAAapC,GAAb,CAAiBsC,KAAjB,EAAwB7E,QAAxB;EACH;;EACDtB,UAAU,CAACmG,KAAD,EAAQrG,OAAR,EAAiB;IACvB,KAAKmG,OAAL,CAAahB,GAAb,CAAiBkB,KAAjB,EAAwB1G,IAAxB,CAA6BiH,CAAC,IAAIA,CAAC,CAAC1G,UAAF,CAAaF,OAAb,CAAlC;EACH;;EACDsS,cAAc,CAACjM,KAAD,EAAQ;IAClB,KAAKF,OAAL,CAAahB,GAAb,CAAiBkB,KAAjB,EAAwB1G,IAAxB,CAA6BiH,CAAC,IAAI;MAC9BA,CAAC,CAAC5F,MAAF,CAAS,IAAT;;MACA,KAAKmF,OAAL,CAAad,MAAb,CAAoBgB,KAApB;IACH,CAHD;EAIH;EACD;AACJ;AACA;;;EACIR,qBAAqB,CAAC5D,SAAD,EAAYoE,KAAZ,EAAmB;IACpC,OAAO,IAAIhJ,UAAJ,CAAgB6E,QAAD,IAAc;MAChC,KAAKiE,OAAL,CAAahB,GAAb,CAAiBkB,KAAjB,EAAwB1G,IAAxB,CAA8BM,CAAD,IAAO;QAChCA,CAAC,CAACkC,WAAF,CAAcF,SAAd,EAA0B8D,CAAD,IAAO,KAAK9G,KAAL,CAAWmD,GAAX,CAAe,MAAMF,QAAQ,CAACG,IAAT,CAAc0D,CAAd,CAArB,CAAhC;MACH,CAFD;IAGH,CAJM,CAAP;EAKH;;AAzCiB;;AA2CtBgM,eAAe,CAACnT,UAAhB,GAA6B,CACzB;EAAEC,IAAI,EAAE5C;AAAR,CADyB,CAA7B;;AAGA8V,eAAe,CAACtO,cAAhB,GAAiC,MAAM,CACnC;EAAE5E,IAAI,EAAEC;AAAR,CADmC,EAEnC;EAAED,IAAI,EAAE3C;AAAR,CAFmC,CAAvC;AAKA;AACA;AACA;;;AACA,MAAMqW,YAAN,CAAmB;EACfxT,WAAW,CAACmH,QAAD,EAAW;IAClB,KAAKA,QAAL,GAAgBA,QAAhB;IACA,KAAKC,OAAL,GAAe,IAAIrG,GAAJ,EAAf;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACI0S,eAAe,CAACnM,KAAD,EAAQ;IACnB,MAAM7E,QAAQ,GAAG,KAAK0E,QAAL,CAAc3E,kBAAd,EAAjB;;IACA,KAAK4E,OAAL,CAAapC,GAAb,CAAiBsC,KAAjB,EAAwB7E,QAAxB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIiR,iBAAiB,CAACpM,KAAD,EAAQ;IACrB,MAAM7E,QAAQ,GAAG,KAAK0E,QAAL,CAAcxE,oBAAd,EAAjB;;IACA,KAAKyE,OAAL,CAAapC,GAAb,CAAiBsC,KAAjB,EAAwB7E,QAAxB;EACH;EACD;AACJ;AACA;AACA;;;EACIkR,WAAW,CAACrM,KAAD,EAAQ;IACf,OAAO,KAAKF,OAAL,CAAahB,GAAb,CAAiBkB,KAAjB,EAAwB1G,IAAxB,CAA6BgT,YAAY,IAAI;MAChDA,YAAY,CAAC3R,MAAb,CAAoB,IAApB;;MACA,KAAKmF,OAAL,CAAad,MAAb,CAAoBgB,KAApB;IACH,CAHM,CAAP;EAIH;;AAlCc;;AAoCnBkM,YAAY,CAAC3T,UAAb,GAA0B,CACtB;EAAEC,IAAI,EAAE5C;AAAR,CADsB,CAA1B;;AAGAsW,YAAY,CAAC9O,cAAb,GAA8B,MAAM,CAChC;EAAE5E,IAAI,EAAEC;AAAR,CADgC,CAApC;AAIA;AACA;AACA;AACA;AACA;;;AACA,MAAM8T,iBAAN,CAAwB;EACpBlT,IAAI,GAAG;IACH,IAAI,CAACoL,MAAM,CAAClL,MAAR,IAAkB,CAACkL,MAAM,CAAClL,MAAP,CAAcC,IAArC,EAA2C;MACvC,MAAM,IAAIgT,KAAJ,CAAU,gFAAV,CAAN;IACH;;IACD,OAAO1T,OAAO,CAACC,OAAR,EAAP;EACH;;AANmB;;AASxB,SAAS0T,wBAAT,CAAkCC,KAAlC,EAAyC;EACrC,MAAMC,UAAU,GAAG,CAAC,WAAD,EAAc,WAAd,EAA2B,QAA3B,CAAnB;EACA,OAAOnV,gBAAgB,CAACoV,OAAO,IAAID,UAAU,CAAC7U,GAAX,CAAe8D,SAAS,IAAI8Q,KAAK,CAAC5Q,WAAN,CAAkBF,SAAlB,EAA6B,CAAC+E,KAAD,EAAQkM,QAAR,KAAqBD,OAAO,CAACE,KAAR,CAAcJ,KAAd,EAAqB,CAAC;IAAEK,MAAM,EAAEL,KAAK,CAACM,QAAN,EAAV;IAA4BpR,SAA5B;IAAuC+E,KAAvC;IAA8CkM;EAA9C,CAAD,CAArB,CAAlD,CAA5B,CAAZ,EAA8K,CAACI,QAAD,EAAWC,WAAX,KAA2BA,WAAW,CAACzM,OAAZ,CAAoB0M,UAAU,IAAIA,UAAU,CAACxN,MAAX,EAAlC,CAAzM,CAAvB;AACH;;AACD,MAAMyN,YAAN,CAAmB;EACf1U,WAAW,GAAG;IACV,KAAK2U,IAAL,GAAY,EAAZ;IACA,KAAKC,SAAL,GAAiB;MACbC,SAAS,EAAE,EADE;MAEbC,SAAS,EAAE,EAFE;MAGbC,MAAM,EAAE;IAHK,CAAjB;EAKH;;EACDC,KAAK,GAAG;IACJ,KAAK,IAAIxF,CAAC,GAAG,KAAKmF,IAAL,CAAUpF,MAAV,GAAmB,CAAhC,EAAmCC,CAAC,IAAI,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;MAC5C,KAAKyF,QAAL,CAAczF,CAAd;IACH;EACJ;;EACD8E,QAAQ,GAAG;IACP,OAAO,CAAC,GAAG,KAAKK,IAAT,CAAP;EACH;;EACDO,KAAK,CAAC1F,CAAD,EAAI;IACL,OAAO,KAAKmF,IAAL,CAAUnF,CAAV,CAAP;EACH;;EACD2F,SAAS,GAAG;IACR,OAAO,KAAKR,IAAL,CAAUpF,MAAjB;EACH;;EACD6F,QAAQ,CAAC5F,CAAD,EAAI6F,IAAJ,EAAU;IACd,KAAKV,IAAL,CAAUxM,MAAV,CAAiBqH,CAAjB,EAAoB,CAApB,EAAuB6F,IAAvB;IACA,KAAKT,SAAL,CAAeE,SAAf,CAAyB/M,OAAzB,CAAiChB,QAAQ,IAAIA,QAAQ,CAACyI,CAAD,CAArD;EACH;;EACD8F,GAAG,GAAG;IACF,MAAMC,OAAO,GAAG,KAAKZ,IAAL,CAAUW,GAAV,EAAhB;IACA,KAAKV,SAAL,CAAeC,SAAf,CAAyB9M,OAAzB,CAAiChB,QAAQ,IAAIA,QAAQ,CAAC,KAAK4N,IAAL,CAAUpF,MAAX,EAAmBgG,OAAnB,CAArD;IACA,OAAOA,OAAP;EACH;;EACDC,IAAI,CAACH,IAAD,EAAO;IACP,KAAKV,IAAL,CAAUa,IAAV,CAAeH,IAAf;IACA,KAAKT,SAAL,CAAeE,SAAf,CAAyB/M,OAAzB,CAAiChB,QAAQ,IAAIA,QAAQ,CAAC,KAAK4N,IAAL,CAAUpF,MAAV,GAAmB,CAApB,CAArD;IACA,OAAO,KAAKoF,IAAL,CAAUpF,MAAjB;EACH;;EACD0F,QAAQ,CAACzF,CAAD,EAAI;IACR,MAAM+F,OAAO,GAAG,KAAKZ,IAAL,CAAUxM,MAAV,CAAiBqH,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAhB;IACA,KAAKoF,SAAL,CAAeC,SAAf,CAAyB9M,OAAzB,CAAiChB,QAAQ,IAAIA,QAAQ,CAACyI,CAAD,EAAI+F,OAAJ,CAArD;IACA,OAAOA,OAAP;EACH;;EACDE,KAAK,CAACjG,CAAD,EAAI6F,IAAJ,EAAU;IACX,MAAME,OAAO,GAAG,KAAKZ,IAAL,CAAUnF,CAAV,CAAhB;IACA,KAAKmF,IAAL,CAAUnF,CAAV,IAAe6F,IAAf;IACA,KAAKT,SAAL,CAAeG,MAAf,CAAsBhN,OAAtB,CAA8BhB,QAAQ,IAAIA,QAAQ,CAACyI,CAAD,EAAI+F,OAAJ,CAAlD;EACH;;EACDxN,OAAO,CAACwG,QAAD,EAAW;IACd,KAAKoG,IAAL,CAAU5M,OAAV,CAAkBwG,QAAlB;EACH;;EACDnL,WAAW,CAACF,SAAD,EAAYgR,OAAZ,EAAqB;IAC5B,MAAMwB,WAAW,GAAG,KAAKd,SAAL,CAAe1R,SAAf,CAApB;IACAwS,WAAW,CAACF,IAAZ,CAAiBtB,OAAjB;IACA,OAAO;MACHjN,MAAM,EAAE,MAAM;QACVyO,WAAW,CAACvN,MAAZ,CAAmBuN,WAAW,CAACxN,OAAZ,CAAoBgM,OAApB,CAAnB,EAAiD,CAAjD;MACH;IAHE,CAAP;EAKH;;EACDyB,MAAM,GAAG;IAAE,MAAM,IAAI7B,KAAJ,CAAU,iBAAV,CAAN;EAAqC;;EAChD8B,OAAO,GAAG;IAAE,MAAM,IAAI9B,KAAJ,CAAU,iBAAV,CAAN;EAAqC;;EACjD1N,GAAG,GAAG;IAAE,MAAM,IAAI0N,KAAJ,CAAU,iBAAV,CAAN;EAAqC;;EAC7C+B,MAAM,GAAG;IAAE,MAAM,IAAI/B,KAAJ,CAAU,iBAAV,CAAN;EAAqC;;EAChD9O,GAAG,GAAG;IAAE,MAAM,IAAI8O,KAAJ,CAAU,iBAAV,CAAN;EAAqC;;EAC7CgC,SAAS,GAAG;IAAE,MAAM,IAAIhC,KAAJ,CAAU,iBAAV,CAAN;EAAqC;;EACnDiC,MAAM,GAAG;IAAE,MAAM,IAAIjC,KAAJ,CAAU,iBAAV,CAAN;EAAqC;;EAChDkC,SAAS,GAAG;IAAE,MAAM,IAAIlC,KAAJ,CAAU,iBAAV,CAAN;EAAqC;;AAlEpC;;AAqEnB,MAAMmC,cAAN,CAAqB;EACjBjW,WAAW,CAAC8P,YAAD,EAAe5P,KAAf,EAAsB;IAC7B,KAAK4P,YAAL,GAAoBA,YAApB;IACA,KAAK5P,KAAL,GAAaA,KAAb;IACA,KAAKgW,SAAL,GAAiB,IAAInV,GAAJ,EAAjB;EACH;;EACDoV,UAAU,CAACC,IAAD,EAAO;IACb,MAAMC,cAAc,GAAG,KAAKvG,YAAL,CAAkB5N,aAAlB,CAAgC;MACnDoD,SAAS,EAAE8Q,IAAI,CAAC9Q,SADmC;MAEnDC,SAAS,EAAE6Q,IAAI,CAAC7Q,SAFmC;MAGnDC,QAAQ,EAAE4Q,IAAI,CAAC5Q,QAHoC;MAInDC,SAAS,EAAE2Q,IAAI,CAAC3Q,SAJmC;MAKnDC,WAAW,EAAE0Q,IAAI,CAAC1Q,WALiC;MAMnD4Q,QAAQ,EAAEF,IAAI,CAACE,QANoC;MAOnDC,KAAK,EAAEH,IAAI,CAACG,KAPuC;MAQnD3Q,WAAW,EAAEwQ,IAAI,CAACxQ,WARiC;MASnDC,aAAa,EAAEuQ,IAAI,CAACvQ,aAT+B;MAUnDG,YAAY,EAAEoQ,IAAI,CAACpQ,YAVgC;MAWnDC,OAAO,EAAEmQ,IAAI,CAACnQ,OAXqC;MAYnDC,MAAM,EAAEkQ,IAAI,CAAClQ;IAZsC,CAAhC,CAAvB;;IAcA,KAAKgQ,SAAL,CAAelR,GAAf,CAAmBoR,IAAnB,EAAyBC,cAAzB;EACH;;EACDG,aAAa,CAACrU,OAAD,EAAU;IACnB,MAAMjB,CAAC,GAAG,KAAKgV,SAAL,CAAe9P,GAAf,CAAmBjE,OAAnB,CAAV;;IACA,IAAIjB,CAAC,IAAI,IAAT,EAAe;MACX,OAAOd,OAAO,CAACC,OAAR,EAAP;IACH;;IACD,OAAOa,CAAC,CAACN,IAAF,CAAQiH,CAAD,IAAO,KAAK3H,KAAL,CAAWmD,GAAX,CAAe,MAAM;MAAEwE,CAAC,CAAC4O,QAAF,CAAWtU,OAAO,CAACoU,KAAnB;IAA4B,CAAnD,CAAd,CAAP;EACH;;EACDG,iBAAiB,CAACN,IAAD,EAAOnV,OAAP,EAAgB;IAC7B,OAAO,KAAKiV,SAAL,CAAe9P,GAAf,CAAmBgQ,IAAnB,EAAyBxV,IAAzB,CAA+BiH,CAAD,IAAO;MAAEA,CAAC,CAAC1G,UAAF,CAAaF,OAAb;IAAwB,CAA/D,CAAP;EACH;;EACD0V,aAAa,CAACJ,KAAD,EAAQ;IACjB,MAAMrV,CAAC,GAAG,KAAKgV,SAAL,CAAe9P,GAAf,CAAmBmQ,KAAnB,CAAV;;IACA,IAAIrV,CAAC,IAAI,IAAT,EAAe;MACX,OAAOd,OAAO,CAACC,OAAR,EAAP;IACH;;IACD,OAAOa,CAAC,CAACN,IAAF,CAAQiH,CAAD,IAAO;MACjB,OAAO,KAAK3H,KAAL,CAAWmD,GAAX,CAAe,MAAM;QACxBwE,CAAC,CAAC5F,MAAF,CAAS,IAAT;;QACA,KAAKiU,SAAL,CAAe5P,MAAf,CAAsBiQ,KAAtB;MACH,CAHM,CAAP;IAIH,CALM,CAAP;EAMH;;EACDK,OAAO,CAACC,gBAAD,EAAmB;IACtB,OAAO,KAAKX,SAAL,CAAe9P,GAAf,CAAmByQ,gBAAnB,EACFjW,IADE,CACIuB,OAAD,IAAaA,OAAO,CAACyU,OAAR,GAAkBtC,QAAlB,EADhB,CAAP;EAEH;;EACDwC,QAAQ,CAACD,gBAAD,EAAmB;IACvB,OAAO,KAAKX,SAAL,CAAe9P,GAAf,CAAmByQ,gBAAnB,EACFjW,IADE,CACIuB,OAAD,IAAaA,OAAO,CAAC2U,QAAR,GAAmBxC,QAAnB,GAA8BlV,GAA9B,CAAmC2X,CAAD,IAAOA,CAAC,CAACzC,QAAF,EAAzC,CADhB,CAAP;EAEH;;EACDxN,qBAAqB,CAAC5D,SAAD,EAAYkT,IAAZ,EAAkB;IACnC,OAAO,IAAI9X,UAAJ,CAAgB6E,QAAD,IAAc;MAChC,KAAK+S,SAAL,CAAe9P,GAAf,CAAmBgQ,IAAnB,EAAyBxV,IAAzB,CAA+BiH,CAAD,IAAO;QACjCA,CAAC,CAACzE,WAAF,CAAcF,SAAd,EAA0B8D,CAAD,IAAO,KAAK9G,KAAL,CAAWmD,GAAX,CAAe,MAAMF,QAAQ,CAACG,IAAT,CAAc0D,CAAd,CAArB,CAAhC;MACH,CAFD;IAGH,CAJM,CAAP;EAKH;;EACDgQ,yBAAyB,CAACC,UAAD,EAAa;IAClC,OAAOha,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;MAChD,MAAMkF,OAAO,GAAG,MAAM,KAAK+T,SAAL,CAAe9P,GAAf,CAAmB6Q,UAAnB,CAAtB;MACA,MAAMV,KAAK,GAAGpU,OAAO,CAAC2U,QAAR,EAAd;MACA,MAAMI,aAAa,GAAGnD,wBAAwB,CAACwC,KAAD,CAA9C;MACA,OAAOW,aAAa,CAAC7N,IAAd,CAAmB9J,SAAS,CAAC;QAAE8U,MAAM,EAAEkC,KAAK,CAACjC,QAAN;MAAV,CAAD,CAA5B,EAA4D;MACnEnV,SAAS,CAACgY,aAAa,IAAIpY,KAAK,CAAC,IAAI;MACrCoY,aAAa,CAAC9C,MAAd,CAAqBjV,GAArB,CAAyB,CAACgY,KAAD,EAAQnP,KAAR,KAAkB8L,wBAAwB,CAACqD,KAAD,CAAxB,CACtC/N,IADsC,CACjCjK,GAAG,CAACiY,UAAU,KAAK;QAAEF,aAAF;QAAiBE,UAAjB;QAA6BC,SAAS,EAAErP;MAAxC,CAAL,CAAX,CAD8B,CAA3C,CADgC,CAAL,CAGtBoB,IAHsB,EAGjB;MACV9J,SAAS,CAAC;QAAE4X,aAAF;QAAiBE,UAAU,EAAE,IAA7B;QAAmCC,SAAS,EAAE;MAA9C,CAAD,CAJkB,CAAlB,CADF,EAK4D9X,IAAI,CAAC,CAAD,CALhE,EAKqE;MAC5EJ,GAAG,CAAC,CAAC;QAAE+X,aAAF;QAAiBE,UAAjB;QAA6BC;MAA7B,CAAD,KAA8C;QAC9C,IAAIC,MAAJ;;QACA,IAAI,CAACF,UAAL,EAAiB;UACbE,MAAM,GAAG;YACLlD,MAAM,EAAE8C,aAAa,CAAC9C,MAAd,CAAqBjV,GAArB,CAAyBoY,MAAM,IAAIA,MAAM,CAAClD,QAAP,GAAkBlV,GAAlB,CAAsB0D,MAAM,IAAIA,MAAM,CAAC2U,MAAP,EAAhC,CAAnC,CADH;YAELvU,SAAS,EAAEiU,aAAa,CAACjU,SAFpB;YAGL+E,KAAK,EAAEkP,aAAa,CAAClP;UAHhB,CAAT;;UAKA,IAAIkP,aAAa,CAAChD,QAAlB,EAA4B;YACxBoD,MAAM,CAACpD,QAAP,GAAkBgD,aAAa,CAAChD,QAAd,CAAuBG,QAAvB,EAAlB;UACH;QACJ,CATD,MAUK;UACDiD,MAAM,GAAG;YACLlD,MAAM,EAAE8C,aAAa,CAAC9C,MAAd,CAAqBjV,GAArB,CAAyBoY,MAAM,IAAIA,MAAM,CAAClD,QAAP,GAAkBlV,GAAlB,CAAsB0D,MAAM,IAAIA,MAAM,CAAC2U,MAAP,EAAhC,CAAnC,CADH;YAELH,SAFK;YAGLpU,SAAS,EAAEmU,UAAU,CAACnU,SAHjB;YAIL+E,KAAK,EAAEoP,UAAU,CAACpP;UAJb,CAAT;;UAMA,IAAIoP,UAAU,CAAClD,QAAf,EAAyB;YACrBoD,MAAM,CAACpD,QAAP,GAAkBkD,UAAU,CAAClD,QAA7B;UACH;QACJ;;QACD,OAAOoD,MAAP;MACH,CAxBE,CANI,CAAP;IA+BH,CAnCe,CAAhB;EAoCH;;AAjGgB;;AAmGrBtB,cAAc,CAACpW,UAAf,GAA4B,CACxB;EAAEC,IAAI,EAAE5C;AAAR,CADwB,CAA5B;;AAGA+Y,cAAc,CAACvR,cAAf,GAAgC,MAAM,CAClC;EAAE5E,IAAI,EAAEC;AAAR,CADkC,EAElC;EAAED,IAAI,EAAE3C;AAAR,CAFkC,CAAtC;;AAKA,MAAMua,eAAN,CAAsB;EAClB1X,WAAW,CAAC8P,YAAD,EAAe5P,KAAf,EAAsB;IAC7B,KAAK4P,YAAL,GAAoBA,YAApB;IACA,KAAK5P,KAAL,GAAaA,KAAb;IACA,KAAKyX,UAAL,GAAkB,IAAI5W,GAAJ,EAAlB;EACH;;EACoB,OAAd6W,cAAc,CAAC7V,IAAD,EAAO;IACxB,MAAMqU,IAAI,GAAGrU,IAAI,CAAC8V,UAAL,GAAkBzY,GAAlB,CAAuB0Y,KAAD,IAAW;MAC1C,OAAO;QAAE5S,GAAG,EAAE4S,KAAK,CAAC3S,QAAb;QAAuBC,GAAG,EAAE0S,KAAK,CAACzS;MAAlC,CAAP;IACH,CAFY,CAAb;;IAGA,OAAO+Q,IAAP;EACH;;EACkB,OAAZ2B,YAAY,CAAC3B,IAAD,EAAO;IACtB,MAAM4B,UAAU,GAAGnX,MAAM,CAACC,IAAP,CAAYmX,UAAZ,CAAuB7B,IAAvB,CAAnB;;IACA,IAAI,OAAO4B,UAAP,KAAsB,QAA1B,EAAoC;MAChC,OAAOA,UAAP;IACH,CAFD,MAGK;MACD,OAAO5B,IAAP;IACH;EACJ;;EACmB,OAAb8B,aAAa,CAACnW,IAAD,EAAO;IACvB,MAAMoW,KAAK,GAAGpW,IAAI,CAACqW,SAAL,GAAiBhZ,GAAjB,CAAqBiZ,OAAO,KAAK;MAC3CC,aAAa,EAAED,OAAO,CAACC,aADoB;MAE3CC,MAAM,EAAEF,OAAO,CAACE,MAF2B;MAG3CC,MAAM,EAAEH,OAAO,CAACG,MAH2B;MAI3CxG,IAAI,EAAE;QACFyG,MAAM,EAAE,IAAI5X,MAAM,CAACC,IAAP,CAAY4X,KAAhB,CAAsBL,OAAO,CAACM,OAA9B,EAAuCN,OAAO,CAACO,OAA/C,CADN;QAEFnT,SAAS,EAAE4S,OAAO,CAAC5S,SAFjB;QAGFC,WAAW,EAAE2S,OAAO,CAAC3S,WAHnB;QAIF0Q,IAAI,EAAEsB,eAAe,CAACK,YAAhB,CAA6BM,OAAO,CAACjC,IAArC,CAJJ;QAKFyC,QAAQ,EAAER,OAAO,CAACQ,QALhB;QAMFC,KAAK,EAAET,OAAO,CAACS,KANb;QAOFlT,WAAW,EAAEyS,OAAO,CAACzS,WAPnB;QAQFC,aAAa,EAAEwS,OAAO,CAACxS,aARrB;QASFG,YAAY,EAAEqS,OAAO,CAACrS;MATpB;IAJqC,CAAL,CAA5B,CAAd,CADuB,CAiBvB;;;IACAmS,KAAK,CAACpQ,OAAN,CAAciK,IAAI,IAAI;MAClB/C,MAAM,CAAC8J,OAAP,CAAe/G,IAAf,EAAqBjK,OAArB,CAA6B,CAAC,CAACyG,GAAD,EAAMwK,GAAN,CAAD,KAAgB;QACzC,IAAI,OAAOA,GAAP,KAAe,WAAnB,EAAgC;UAC5B,OAAOhH,IAAI,CAACxD,GAAD,CAAX;QACH;MACJ,CAJD;;MAKA,IAAI,OAAOwD,IAAI,CAACA,IAAL,CAAUyG,MAAV,CAAiBtU,CAAxB,KAA8B,WAA9B,IACA,OAAO6N,IAAI,CAACA,IAAL,CAAUyG,MAAV,CAAiBrU,CAAxB,KAA8B,WADlC,EAC+C;QAC3C,OAAO4N,IAAI,CAACA,IAAL,CAAUyG,MAAjB;MACH;IACJ,CAVD;IAWA,OAAON,KAAP;EACH;;EACDc,WAAW,CAAClX,IAAD,EAAO;IACd,MAAMmX,eAAe,GAAG,KAAKpJ,YAAL,CAAkBhO,YAAlB,GACnBlB,IADmB,CACd,MAAM,CAAC8W,eAAe,CAACE,cAAhB,CAA+B7V,IAA/B,CAAD,EACZ2V,eAAe,CAACQ,aAAhB,CAA8BnW,IAA9B,CADY,CADQ,EAGnBnB,IAHmB,CAGd,CAAC,CAACwV,IAAD,EAAO+B,KAAP,CAAD,KAAmB,KAAKrI,YAAL,CAAkBjO,cAAlB,CAAiC;MAC1DyD,SAAS,EAAEvD,IAAI,CAACuD,SAD0C;MAE1DC,SAAS,EAAExD,IAAI,CAACwD,SAF0C;MAG1DC,QAAQ,EAAEzD,IAAI,CAACyD,QAH2C;MAI1D8Q,QAAQ,EAAEvU,IAAI,CAACuU,QAJ2C;MAK1D1Q,WAAW,EAAE7D,IAAI,CAAC6D,WALwC;MAM1DC,aAAa,EAAE9D,IAAI,CAAC8D,aANsC;MAO1DG,YAAY,EAAEjE,IAAI,CAACiE,YAPuC;MAQ1DC,OAAO,EAAElE,IAAI,CAACkE,OAR4C;MAS1DC,MAAM,EAAEnE,IAAI,CAACmE,MAT6C;MAU1DkQ,IAV0D;MAW1D+B;IAX0D,CAAjC,CAHL,CAAxB;;IAgBA,KAAKR,UAAL,CAAgB3S,GAAhB,CAAoBjD,IAApB,EAA0BmX,eAA1B;EACH;;EACDC,oBAAoB,CAACpX,IAAD,EAAO;IACvB,MAAMqU,IAAI,GAAGsB,eAAe,CAACE,cAAhB,CAA+B7V,IAA/B,CAAb;;IACA,MAAMb,CAAC,GAAG,KAAKyW,UAAL,CAAgBvR,GAAhB,CAAoBrE,IAApB,CAAV;;IACA,IAAIb,CAAC,IAAI,IAAT,EAAe;MACX,OAAOd,OAAO,CAACC,OAAR,EAAP;IACH;;IACD,OAAOa,CAAC,CAACN,IAAF,CAAQiH,CAAD,IAAO,KAAK3H,KAAL,CAAWmD,GAAX,CAAe,MAAMwE,CAAC,CAACuR,OAAF,CAAUhD,IAAV,CAArB,CAAd,CAAP;EACH;;EACDiD,mBAAmB,CAACtX,IAAD,EAAO;IACtB,OAAO9E,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;MAChD,MAAM,KAAK6S,YAAL,CAAkBhO,YAAlB,EAAN;;MACA,MAAMqW,KAAK,GAAGT,eAAe,CAACQ,aAAhB,CAA8BnW,IAA9B,CAAd;;MACA,MAAMb,CAAC,GAAG,KAAKyW,UAAL,CAAgBvR,GAAhB,CAAoBrE,IAApB,CAAV;;MACA,IAAIb,CAAC,IAAI,IAAT,EAAe;QACX;MACH;;MACD,OAAOA,CAAC,CAACN,IAAF,CAAOiH,CAAC,IAAI,KAAK3H,KAAL,CAAWmD,GAAX,CAAe,MAAMwE,CAAC,CAAC1G,UAAF,CAAa;QAAEgX;MAAF,CAAb,CAArB,CAAZ,CAAP;IACH,CARe,CAAhB;EASH;;EACDmB,kBAAkB,CAACvX,IAAD,EAAOd,OAAP,EAAgB;IAC9B,OAAO,KAAK0W,UAAL,CAAgBvR,GAAhB,CAAoBrE,IAApB,EAA0BnB,IAA1B,CAAgCiH,CAAD,IAAO;MAAEA,CAAC,CAAC1G,UAAF,CAAaF,OAAb;IAAwB,CAAhE,CAAP;EACH;;EACDsY,cAAc,CAACxX,IAAD,EAAO;IACjB,MAAMb,CAAC,GAAG,KAAKyW,UAAL,CAAgBvR,GAAhB,CAAoBrE,IAApB,CAAV;;IACA,IAAIb,CAAC,IAAI,IAAT,EAAe;MACX,OAAOd,OAAO,CAACC,OAAR,EAAP;IACH;;IACD,OAAOa,CAAC,CAACN,IAAF,CAAQiH,CAAD,IAAO;MACjB,OAAO,KAAK3H,KAAL,CAAWmD,GAAX,CAAe,MAAM;QACxBwE,CAAC,CAAC5F,MAAF,CAAS,IAAT;;QACA,KAAK0V,UAAL,CAAgBrR,MAAhB,CAAuBvE,IAAvB;MACH,CAHM,CAAP;IAIH,CALM,CAAP;EAMH;;EACDyX,UAAU,CAACC,WAAD,EAAc;IACpB,OAAOxc,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;MAChD,MAAMyc,QAAQ,GAAG,MAAM,KAAK/B,UAAL,CAAgBvR,GAAhB,CAAoBqT,WAApB,CAAvB;MACA,OAAOC,QAAQ,CAAC9C,OAAT,EAAP;IACH,CAHe,CAAhB;EAIH;;EACDA,OAAO,CAAC6C,WAAD,EAAc;IACjB,OAAOxc,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;MAChD,OAAO,CAAC,MAAM,KAAKuc,UAAL,CAAgBC,WAAhB,CAAP,EAAqCnF,QAArC,EAAP;IACH,CAFe,CAAhB;EAGH;;EACDxN,qBAAqB,CAAC5D,SAAD,EAAYnB,IAAZ,EAAkB;IACnC,OAAO,IAAIzD,UAAJ,CAAgB6E,QAAD,IAAc;MAChC,KAAKwU,UAAL,CAAgBvR,GAAhB,CAAoBrE,IAApB,EAA0BnB,IAA1B,CAAgCiH,CAAD,IAAO;QAClCA,CAAC,CAACzE,WAAF,CAAcF,SAAd,EAA0B8D,CAAD,IAAO,KAAK9G,KAAL,CAAWmD,GAAX,CAAe,MAAMF,QAAQ,CAACG,IAAT,CAAc0D,CAAd,CAArB,CAAhC;MACH,CAFD;IAGH,CAJM,CAAP;EAKH;;EACDgQ,yBAAyB,CAACjV,IAAD,EAAO;IAC5B,OAAO9E,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;MAChD,MAAM0c,OAAO,GAAG,MAAM,KAAKH,UAAL,CAAgBzX,IAAhB,CAAtB;MACA,OAAOgS,wBAAwB,CAAC4F,OAAD,CAA/B;IACH,CAHe,CAAhB;EAIH;;AAhIiB;;AAkItBjC,eAAe,CAAC7X,UAAhB,GAA6B,CACzB;EAAEC,IAAI,EAAE5C;AAAR,CADyB,CAA7B;;AAGAwa,eAAe,CAAChT,cAAhB,GAAiC,MAAM,CACnC;EAAE5E,IAAI,EAAEC;AAAR,CADmC,EAEnC;EAAED,IAAI,EAAE3C;AAAR,CAFmC,CAAvC;;AAKA,MAAMyc,gBAAN,CAAuB;EACnB5Z,WAAW,CAAC4E,WAAD,EAAc1E,KAAd,EAAqB;IAC5B,KAAK0E,WAAL,GAAmBA,WAAnB;IACA,KAAK1E,KAAL,GAAaA,KAAb;IACA,KAAK2Z,WAAL,GAAmB,IAAI9Y,GAAJ,EAAnB;EACH;;EACD+Y,YAAY,CAACC,SAAD,EAAY;IACpB,KAAKnV,WAAL,CAAiB9C,YAAjB,GAAgClB,IAAhC,CAAqC,MAAM,KAAKiZ,WAAL,CAAiB7U,GAAjB,CAAqB+U,SAArB,EAAgC,KAAKnV,WAAL,CAAiBjD,eAAjB,CAAiC;MACxG8H,MAAM,EAAE;QACJuQ,KAAK,EAAED,SAAS,CAACC,KADb;QAEJC,IAAI,EAAEF,SAAS,CAACE,IAFZ;QAGJC,KAAK,EAAEH,SAAS,CAACG,KAHb;QAIJC,IAAI,EAAEJ,SAAS,CAACI;MAJZ,CADgG;MAOxG7U,SAAS,EAAEyU,SAAS,CAACzU,SAPmF;MAQxGC,SAAS,EAAEwU,SAAS,CAACxU,SARmF;MASxGC,QAAQ,EAAEuU,SAAS,CAACvU,QAToF;MAUxGC,SAAS,EAAEsU,SAAS,CAACtU,SAVmF;MAWxGC,WAAW,EAAEqU,SAAS,CAACrU,WAXiF;MAYxGE,WAAW,EAAEmU,SAAS,CAACnU,WAZiF;MAaxGC,aAAa,EAAEkU,SAAS,CAAClU,aAb+E;MAcxGC,cAAc,EAAEjF,MAAM,CAACC,IAAP,CAAYiF,cAAZ,CAA2BgU,SAAS,CAACjU,cAArC,CAdwF;MAexGE,YAAY,EAAE+T,SAAS,CAAC/T,YAfgF;MAgBxGC,OAAO,EAAE8T,SAAS,CAAC9T,OAhBqF;MAiBxGC,MAAM,EAAE6T,SAAS,CAAC7T;IAjBsF,CAAjC,CAAhC,CAA3C;EAmBH;EACD;AACJ;AACA;;;EACIkU,eAAe,CAACL,SAAD,EAAY;IACvB,OAAO,KAAKF,WAAL,CAAiBzT,GAAjB,CAAqB2T,SAArB,EAAgCnZ,IAAhC,CAAsCyZ,CAAD,IAAO;MAC/CA,CAAC,CAACpY,MAAF,CAAS,IAAT;;MACA,KAAK4X,WAAL,CAAiBvT,MAAjB,CAAwByT,SAAxB;IACH,CAHM,CAAP;EAIH;;EACD5Y,UAAU,CAAC4Y,SAAD,EAAY9Y,OAAZ,EAAqB;IAC3B,OAAO,KAAK4Y,WAAL,CAAiBzT,GAAjB,CAAqB2T,SAArB,EAAgCnZ,IAAhC,CAAsCyZ,CAAD,IAAO;MAC/C,MAAMC,oBAAoB,GAAGrZ,OAAO,CAAC6E,cAArC;MACA7E,OAAO,CAAC6E,cAAR,GAAyBjF,MAAM,CAACC,IAAP,CAAYiF,cAAZ,CAA2BuU,oBAA3B,CAAzB;MACAD,CAAC,CAAClZ,UAAF,CAAaF,OAAb;IACH,CAJM,CAAP;EAKH;;EACD2C,SAAS,CAACmW,SAAD,EAAY;IACjB,OAAO,KAAKF,WAAL,CAAiBzT,GAAjB,CAAqB2T,SAArB,EAAgCnZ,IAAhC,CAAsCyZ,CAAD,IAAOA,CAAC,CAACzW,SAAF,EAA5C,CAAP;EACH;;EACD2W,SAAS,CAACR,SAAD,EAAY;IACjB,OAAO,KAAKF,WAAL,CAAiBzT,GAAjB,CAAqB2T,SAArB,EAAgCnZ,IAAhC,CAAsCyZ,CAAD,IAAO;MAC/C,OAAOA,CAAC,CAACE,SAAF,CAAY;QACfP,KAAK,EAAED,SAAS,CAACC,KADF;QAEfC,IAAI,EAAEF,SAAS,CAACE,IAFD;QAGfC,KAAK,EAAEH,SAAS,CAACG,KAHF;QAIfC,IAAI,EAAEJ,SAAS,CAACI;MAJD,CAAZ,CAAP;IAMH,CAPM,CAAP;EAQH;;EACD1T,WAAW,CAACsT,SAAD,EAAY;IACnB,OAAO,KAAKF,WAAL,CAAiBzT,GAAjB,CAAqB2T,SAArB,EAAgCnZ,IAAhC,CAAsCyZ,CAAD,IAAO;MAC/C,OAAOA,CAAC,CAAC5T,WAAF,CAAcsT,SAAS,CAACvU,QAAxB,CAAP;IACH,CAFM,CAAP;EAGH;;EACDkB,YAAY,CAACqT,SAAD,EAAY;IACpB,OAAO,KAAKF,WAAL,CAAiBzT,GAAjB,CAAqB2T,SAArB,EAAgCnZ,IAAhC,CAAsCyZ,CAAD,IAAO;MAC/C,OAAOA,CAAC,CAAC3T,YAAF,CAAeqT,SAAS,CAACxU,SAAzB,CAAP;IACH,CAFM,CAAP;EAGH;;EACDoB,UAAU,CAACoT,SAAD,EAAY;IAClB,OAAO,KAAKF,WAAL,CAAiBzT,GAAjB,CAAqB2T,SAArB,EAAgCnZ,IAAhC,CAAsCyZ,CAAD,IAAO;MAC/C,OAAOA,CAAC,CAAC1T,UAAF,CAAaoT,SAAS,CAAC9T,OAAvB,CAAP;IACH,CAFM,CAAP;EAGH;;EACDa,qBAAqB,CAAC5D,SAAD,EAAY6W,SAAZ,EAAuB;IACxC,OAAO,IAAIzb,UAAJ,CAAgBkc,UAAD,IAAgB;MAClC,IAAIzT,QAAQ,GAAG,IAAf;;MACA,KAAK8S,WAAL,CAAiBzT,GAAjB,CAAqB2T,SAArB,EAAgCnZ,IAAhC,CAAsCyZ,CAAD,IAAO;QACxCtT,QAAQ,GAAGsT,CAAC,CAACjX,WAAF,CAAcF,SAAd,EAA0B8D,CAAD,IAAO,KAAK9G,KAAL,CAAWmD,GAAX,CAAe,MAAMmX,UAAU,CAAClX,IAAX,CAAgB0D,CAAhB,CAArB,CAAhC,CAAX;MACH,CAFD;;MAGA,OAAO,MAAM;QACT,IAAID,QAAQ,KAAK,IAAjB,EAAuB;UACnBA,QAAQ,CAACE,MAAT;QACH;MACJ,CAJD;IAKH,CAVM,CAAP;EAWH;;AAnFkB;;AAqFvB2S,gBAAgB,CAAC/Z,UAAjB,GAA8B,CAC1B;EAAEC,IAAI,EAAE5C;AAAR,CAD0B,CAA9B;;AAGA0c,gBAAgB,CAAClV,cAAjB,GAAkC,MAAM,CACpC;EAAE5E,IAAI,EAAEC;AAAR,CADoC,EAEpC;EAAED,IAAI,EAAE3C;AAAR,CAFoC,CAAxC;;AAKA,IAAIsd,OAAO,GAAG,CAAd;AACA;AACA;AACA;AACA;;AACA,MAAMC,iBAAN,CAAwB;EACpB1a,WAAW,CAAC2a,QAAD,EAAW;IAClB,KAAKA,QAAL,GAAgBA,QAAhB;IACA,KAAKC,eAAL,GAAuB,KAAvB;IACA,KAAKC,GAAL,GAAW,CAACJ,OAAO,EAAR,EAAYK,QAAZ,EAAX;IACA;AACR;AACA;;IACQ,KAAK7U,OAAL,GAAe,IAAf;EACH;;EACD8U,QAAQ,GAAG;IACP,IAAI,KAAKH,eAAT,EAA0B;MACtB;IACH;;IACD,KAAKD,QAAL,CAAcjH,iBAAd,CAAgC,IAAhC;;IACA,KAAKkH,eAAL,GAAuB,IAAvB;EACH;EACD;;;EACA9Q,EAAE,GAAG;IAAE,OAAO,KAAK+Q,GAAZ;EAAkB;EACzB;;;EACAC,QAAQ,GAAG;IAAE,OAAQ,qBAAoB,KAAKD,GAAL,CAASC,QAAT,EAAoB,EAAhD;EAAoD;EACjE;;;EACAE,WAAW,GAAG;IACV,KAAKL,QAAL,CAAchH,WAAd,CAA0B,IAA1B;EACH;;AAxBmB;;AA0BxB+G,iBAAiB,CAAC7a,UAAlB,GAA+B,CAC3B;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE;EADI,CAAD;AAAzB,CAD2B,CAA/B;;AAKAP,iBAAiB,CAAChW,cAAlB,GAAmC,MAAM,CACrC;EAAE5E,IAAI,EAAE0T;AAAR,CADqC,CAAzC;;AAGAkH,iBAAiB,CAACQ,cAAlB,GAAmC;EAC/BjV,OAAO,EAAE,CAAC;IAAEnG,IAAI,EAAEnC;EAAR,CAAD;AADsB,CAAnC;;AAIA,MAAMwd,SAAN,CAAgB;EACZnb,WAAW,CAAC2a,QAAD,EAAW;IAClB,KAAKA,QAAL,GAAgBA,QAAhB;IACA;AACR;AACA;;IACQ,KAAKrV,SAAL,GAAiB,IAAjB;IACA;AACR;AACA;IACQ;;IACA,KAAKC,SAAL,GAAiB,KAAjB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,QAAL,GAAgB,KAAhB;IACA;AACR;AACA;;IACQ,KAAKG,MAAL,GAAc,CAAd;IACA;AACR;AACA;AACA;;IACQ,KAAKG,cAAL,GAAsB,QAAtB;IACA;AACR;AACA;;IACQ,KAAKE,YAAL,GAAoB,CAApB;IACA;AACR;AACA;;IACQ,KAAKC,OAAL,GAAe,IAAf;IACA;AACR;AACA;;IACQ,KAAKmV,YAAL,GAAoB,IAAIxd,YAAJ,EAApB;IACA;AACR;AACA;;IACQ,KAAKyd,WAAL,GAAmB,IAAIzd,YAAJ,EAAnB;IACA;AACR;AACA;;IACQ,KAAK0d,cAAL,GAAsB,IAAI1d,YAAJ,EAAtB;IACA;AACR;AACA;IACQ;;IACA,KAAK2d,IAAL,GAAY,IAAI3d,YAAJ,EAAZ;IACA;AACR;AACA;;IACQ,KAAK4d,OAAL,GAAe,IAAI5d,YAAJ,EAAf;IACA;AACR;AACA;;IACQ,KAAK6d,SAAL,GAAiB,IAAI7d,YAAJ,EAAjB;IACA;AACR;AACA;;IACQ,KAAK8d,SAAL,GAAiB,IAAI9d,YAAJ,EAAjB;IACA;AACR;AACA;;IACQ,KAAK+d,SAAL,GAAiB,IAAI/d,YAAJ,EAAjB;IACA;AACR;AACA;;IACQ,KAAKge,QAAL,GAAgB,IAAIhe,YAAJ,EAAhB;IACA;AACR;AACA;;IACQ,KAAKie,SAAL,GAAiB,IAAIje,YAAJ,EAAjB;IACA;AACR;AACA;;IACQ,KAAKke,OAAL,GAAe,IAAIle,YAAJ,EAAf;IACA;AACR;AACA;;IACQ,KAAKme,YAAL,GAAoB,IAAIne,YAAJ,EAApB;IACA;AACR;AACA;;IACQ,KAAKoe,UAAL,GAAkB,IAAIpe,YAAJ,EAAlB;IACA,KAAKqe,qBAAL,GAA6B,KAA7B;IACA,KAAKC,mBAAL,GAA2B,EAA3B;EACH;EACD;;;EACAnB,QAAQ,GAAG;IACP,KAAKJ,QAAL,CAAc7V,SAAd,CAAwB,IAAxB;;IACA,KAAKmX,qBAAL,GAA6B,IAA7B;;IACA,KAAKE,uBAAL;EACH;EACD;;;EACAC,WAAW,CAACC,OAAD,EAAU;IACjB,IAAI,CAAC,KAAKJ,qBAAV,EAAiC;MAC7B;IACH,CAHgB,CAIjB;;;IACA,IAAII,OAAO,CAAC,UAAD,CAAP,IAAuBA,OAAO,CAAC,WAAD,CAAlC,EAAiD;MAC7C,KAAK1B,QAAL,CAAcjX,SAAd,CAAwB,IAAxB;IACH;;IACD,IAAI2Y,OAAO,CAAC,UAAD,CAAX,EAAyB;MACrB,KAAK1B,QAAL,CAAclU,WAAd,CAA0B,IAA1B;IACH;;IACD,IAAI4V,OAAO,CAAC,WAAD,CAAX,EAA0B;MACtB,KAAK1B,QAAL,CAAcjU,YAAd,CAA2B,IAA3B;IACH;;IACD,IAAI2V,OAAO,CAAC,SAAD,CAAX,EAAwB;MACpB,KAAK1B,QAAL,CAAchU,UAAd,CAAyB,IAAzB;IACH;;IACD,IAAI0V,OAAO,CAAC,QAAD,CAAX,EAAuB;MACnB,KAAK1B,QAAL,CAAc/T,SAAd,CAAwB,IAAxB;IACH,CAnBgB,CAoBjB;;;IACA,KAAK0V,2BAAL,CAAiCD,OAAjC;EACH;;EACDC,2BAA2B,CAACD,OAAD,EAAU;IACjC,MAAMpb,OAAO,GAAG,EAAhB;IACA,MAAMsb,UAAU,GAAGtN,MAAM,CAACC,IAAP,CAAYmN,OAAZ,EAAqBlN,MAArB,CAA4BC,CAAC,IAAI+L,SAAS,CAACqB,WAAV,CAAsBtU,OAAtB,CAA8BkH,CAA9B,MAAqC,CAAC,CAAvE,CAAnB;IACAmN,UAAU,CAACxU,OAAX,CAAoBqH,CAAD,IAAO;MAAEnO,OAAO,CAACmO,CAAD,CAAP,GAAaiN,OAAO,CAACjN,CAAD,CAAP,CAAWqN,YAAxB;IAAuC,CAAnE;;IACA,IAAIF,UAAU,CAAChN,MAAX,GAAoB,CAAxB,EAA2B;MACvB,KAAKoL,QAAL,CAAcxZ,UAAd,CAAyB,IAAzB,EAA+BF,OAA/B;IACH;EACJ;;EACDkb,uBAAuB,GAAG;IACtB,MAAMO,MAAM,GAAG,IAAI3b,GAAJ,EAAf;IACA2b,MAAM,CAAC1X,GAAP,CAAW,gBAAX,EAA6B,KAAKoW,YAAlC;IACAsB,MAAM,CAAC1X,GAAP,CAAW,OAAX,EAAoB,KAAKqW,WAAzB;IACAqB,MAAM,CAAC1X,GAAP,CAAW,UAAX,EAAuB,KAAKsW,cAA5B;IACAoB,MAAM,CAAC1X,GAAP,CAAW,MAAX,EAAmB,KAAKuW,IAAxB;IACAmB,MAAM,CAAC1X,GAAP,CAAW,SAAX,EAAsB,KAAKwW,OAA3B;IACAkB,MAAM,CAAC1X,GAAP,CAAW,WAAX,EAAwB,KAAKyW,SAA7B;IACAiB,MAAM,CAAC1X,GAAP,CAAW,WAAX,EAAwB,KAAK0W,SAA7B;IACAgB,MAAM,CAAC1X,GAAP,CAAW,WAAX,EAAwB,KAAK2W,SAA7B;IACAe,MAAM,CAAC1X,GAAP,CAAW,UAAX,EAAuB,KAAK4W,QAA5B;IACAc,MAAM,CAAC1X,GAAP,CAAW,WAAX,EAAwB,KAAK6W,SAA7B;IACAa,MAAM,CAAC1X,GAAP,CAAW,SAAX,EAAsB,KAAK8W,OAA3B;IACAY,MAAM,CAAC1X,GAAP,CAAW,gBAAX,EAA6B,KAAK+W,YAAlC;IACAW,MAAM,CAAC1X,GAAP,CAAW,YAAX,EAAyB,KAAKgX,UAA9B;IACAU,MAAM,CAAC3U,OAAP,CAAe,CAAC4U,YAAD,EAAezZ,SAAf,KAA6B;MACxC,KAAKgZ,mBAAL,CAAyB1G,IAAzB,CAA8B,KAAKmF,QAAL,CAAc7T,qBAAd,CAAoC5D,SAApC,EAA+C,IAA/C,EAAqD0Z,SAArD,CAAgE5S,KAAD,IAAW;QACpG,QAAQ9G,SAAR;UACI,KAAK,gBAAL;YACI,KAAKyX,QAAL,CAAcnU,SAAd,CAAwB,IAAxB,EAA8B5F,IAA9B,CAAoC+E,MAAD,IAAYgX,YAAY,CAACE,IAAb,CAAkBlX,MAAlB,CAA/C;;YACA;;UACJ,KAAK,gBAAL;YACI,KAAKgV,QAAL,CAAc3W,SAAd,CAAwB,IAAxB,EAA8BpD,IAA9B,CAAoCqE,MAAD,IAAY0X,YAAY,CAACE,IAAb,CAAkB;cAAE3X,GAAG,EAAED,MAAM,CAACC,GAAP,EAAP;cAAqBE,GAAG,EAAEH,MAAM,CAACG,GAAP;YAA1B,CAAlB,CAA/C;;YACA;;UACJ;YACIuX,YAAY,CAACE,IAAb,CAAkB7S,KAAlB;QARR;MAUH,CAX6B,CAA9B;IAYH,CAbD;EAcH;EACD;;;EACAgR,WAAW,GAAG;IACV,KAAKkB,mBAAL,CAAyBnU,OAAzB,CAAiC+U,CAAC,IAAIA,CAAC,CAACC,WAAF,EAAtC;;IACA,KAAKb,mBAAL,GAA2B,IAA3B;;IACA,KAAKvB,QAAL,CAAcxU,YAAd,CAA2B,IAA3B;EACH;EACD;AACJ;AACA;;;EACIvC,SAAS,GAAG;IAAE,OAAO,KAAK+W,QAAL,CAAc/W,SAAd,CAAwB,IAAxB,CAAP;EAAuC;;EACrDI,SAAS,GAAG;IAAE,OAAO,KAAK2W,QAAL,CAAc3W,SAAd,CAAwB,IAAxB,CAAP;EAAuC;;AAxKzC;;AA0KhBmX,SAAS,CAACqB,WAAV,GAAwB,CACpB,WADoB,EACP,aADO,EACQ,aADR,EACuB,eADvB,EACwC,gBADxC,EAC0D,cAD1D,EAEpB,SAFoB,EAET,QAFS,EAEC,WAFD,CAAxB;AAIArB,SAAS,CAACtb,UAAV,GAAuB,CACnB;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE;EADI,CAAD;AAAzB,CADmB,CAAvB;;AAKAE,SAAS,CAACzW,cAAV,GAA2B,MAAM,CAC7B;EAAE5E,IAAI,EAAE6E;AAAR,CAD6B,CAAjC;;AAGAwW,SAAS,CAACD,cAAV,GAA2B;EACvB/V,QAAQ,EAAE,CAAC;IAAErF,IAAI,EAAEnC;EAAR,CAAD,CADa;EAEvB0H,SAAS,EAAE,CAAC;IAAEvF,IAAI,EAAEnC;EAAR,CAAD,CAFY;EAGvB2H,SAAS,EAAE,CAAC;IAAExF,IAAI,EAAEnC;EAAR,CAAD,CAHY;EAIvB4H,SAAS,EAAE,CAAC;IAAEzF,IAAI,EAAEnC,KAAR;IAAeiO,IAAI,EAAE,CAAC,iBAAD;EAArB,CAAD,CAJY;EAKvBpG,QAAQ,EAAE,CAAC;IAAE1F,IAAI,EAAEnC;EAAR,CAAD,CALa;EAMvB8H,SAAS,EAAE,CAAC;IAAE3F,IAAI,EAAEnC;EAAR,CAAD,CANY;EAOvB+H,WAAW,EAAE,CAAC;IAAE5F,IAAI,EAAEnC;EAAR,CAAD,CAPU;EAQvBgI,MAAM,EAAE,CAAC;IAAE7F,IAAI,EAAEnC;EAAR,CAAD,CARe;EASvBiI,WAAW,EAAE,CAAC;IAAE9F,IAAI,EAAEnC;EAAR,CAAD,CATU;EAUvBkI,aAAa,EAAE,CAAC;IAAE/F,IAAI,EAAEnC;EAAR,CAAD,CAVQ;EAWvBmI,cAAc,EAAE,CAAC;IAAEhG,IAAI,EAAEnC;EAAR,CAAD,CAXO;EAYvBqI,YAAY,EAAE,CAAC;IAAElG,IAAI,EAAEnC;EAAR,CAAD,CAZS;EAavBsI,OAAO,EAAE,CAAC;IAAEnG,IAAI,EAAEnC;EAAR,CAAD,CAbc;EAcvBuI,MAAM,EAAE,CAAC;IAAEpG,IAAI,EAAEnC;EAAR,CAAD,CAde;EAevByd,YAAY,EAAE,CAAC;IAAEtb,IAAI,EAAEjC;EAAR,CAAD,CAfS;EAgBvBwd,WAAW,EAAE,CAAC;IAAEvb,IAAI,EAAEjC;EAAR,CAAD,CAhBU;EAiBvByd,cAAc,EAAE,CAAC;IAAExb,IAAI,EAAEjC;EAAR,CAAD,CAjBO;EAkBvB0d,IAAI,EAAE,CAAC;IAAEzb,IAAI,EAAEjC;EAAR,CAAD,CAlBiB;EAmBvB2d,OAAO,EAAE,CAAC;IAAE1b,IAAI,EAAEjC;EAAR,CAAD,CAnBc;EAoBvB4d,SAAS,EAAE,CAAC;IAAE3b,IAAI,EAAEjC;EAAR,CAAD,CApBY;EAqBvB6d,SAAS,EAAE,CAAC;IAAE5b,IAAI,EAAEjC;EAAR,CAAD,CArBY;EAsBvB8d,SAAS,EAAE,CAAC;IAAE7b,IAAI,EAAEjC;EAAR,CAAD,CAtBY;EAuBvB+d,QAAQ,EAAE,CAAC;IAAE9b,IAAI,EAAEjC;EAAR,CAAD,CAvBa;EAwBvBge,SAAS,EAAE,CAAC;IAAE/b,IAAI,EAAEjC;EAAR,CAAD,CAxBY;EAyBvBie,OAAO,EAAE,CAAC;IAAEhc,IAAI,EAAEjC;EAAR,CAAD,CAzBc;EA0BvBke,YAAY,EAAE,CAAC;IAAEjc,IAAI,EAAEjC;EAAR,CAAD,CA1BS;EA2BvBme,UAAU,EAAE,CAAC;IAAElc,IAAI,EAAEjC;EAAR,CAAD;AA3BW,CAA3B;AA8BA,IAAImf,SAAS,GAAG,CAAhmB;EACfjd,WAAW,CAAC2a,QAAD,EAAW;IAClB,KAAKA,QAAL,GAAgBA,QAAhB;IACA,KAAKC,eAAL,GAAuB,KAAvB;IACA,KAAKC,GAAL,GAAW,CAACmC,SAAS,EAAV,EAAclC,QAAd,EAAX;IACA,KAAKoC,cAAL,GAAsB,EAAtB;IACA;AACR;AACA;;IACQ,KAAKC,UAAL,GAAkB,IAAIvf,YAAJ,EAAlB;IACA;AACR;AACA;;IACQ,KAAK6J,OAAL,GAAe,IAAf;EACH;;EACDsT,QAAQ,GAAG;IACP,IAAI,KAAKH,eAAT,EAA0B;MACtB;IACH;;IACD,KAAKD,QAAL,CAActT,YAAd,CAA2B,IAA3B;;IACA,KAAKuT,eAAL,GAAuB,IAAvB;;IACA,KAAKwC,kBAAL;EACH;;EACDA,kBAAkB,GAAG;IACjB,MAAMxI,SAAS,GAAG,CACd;MAAEyI,IAAI,EAAE,OAAR;MAAiBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKH,UAAL,CAAgBN,IAAhB,CAAqBS,EAArB;IAAlC,CADc,CAAlB;IAGA1I,SAAS,CAAC7M,OAAV,CAAmBwV,GAAD,IAAS;MACvB,MAAMC,EAAE,GAAG,KAAK7C,QAAL,CAAc7T,qBAAd,CAAoCyW,GAAG,CAACF,IAAxC,EAA8C,IAA9C,EAAoDT,SAApD,CAA8DW,GAAG,CAACrJ,OAAlE,CAAX;;MACA,KAAKgJ,cAAL,CAAoB1H,IAApB,CAAyBgI,EAAzB;IACH,CAHD;EAIH;EACD;;;EACA1T,EAAE,GAAG;IAAE,OAAO,KAAK+Q,GAAZ;EAAkB;EACzB;;;EACAC,QAAQ,GAAG;IAAE,OAAQ,gBAAe,KAAKD,GAAL,CAASC,QAAT,EAAoB,EAA3C;EAA+C;EAC5D;;;EACAE,WAAW,GAAG;IACV,KAAKL,QAAL,CAAc/S,eAAd,CAA8B,IAA9B,EADU,CAEV;;;IACA,KAAKsV,cAAL,CAAoBnV,OAApB,CAA4B+U,CAAC,IAAIA,CAAC,CAACC,WAAF,EAAjC;EACH;EACD;;;EACAX,WAAW,CAACC,OAAD,EAAU;IACjB,IAAI,CAAC,KAAKzB,eAAV,EAA2B;MACvB;IACH,CAHgB,CAIjB;;;IACA,MAAM6C,aAAa,GAAGpB,OAAO,CAAC,SAAD,CAA7B;;IACA,IAAIoB,aAAJ,EAAmB;MACf,KAAK9C,QAAL,CAAc7S,aAAd,CAA4B,IAA5B,EAAkC2V,aAAa,CAAChB,YAAhD;IACH;;IACD,MAAMiB,WAAW,GAAGT,YAAY,CAACU,sBAAb,CAAoCC,MAApC,CAA2C,CAAC3c,OAAD,EAAUmO,CAAV,KAAgBnO,OAAO,CAACmO,CAAD,CAAP,GAAaiN,OAAO,CAACwB,cAAR,CAAuBzO,CAAvB,IAA4BiN,OAAO,CAACjN,CAAD,CAAP,CAAWqN,YAAvC,GAAsD,KAAKrN,CAAL,CAA9H,EAAuI,EAAvI,CAApB;;IACA,KAAKuL,QAAL,CAAcvS,cAAd,CAA6B,IAA7B,EAAmCsV,WAAnC;EACH;;AAtDc;;AAwDnBT,YAAY,CAACU,sBAAb,GAAsC,CAAC,OAAD,CAAtC;AACAV,YAAY,CAACpd,UAAb,GAA0B,CACtB;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE;EADI,CAAD;AAAzB,CADsB,CAA1B;;AAKAgC,YAAY,CAACvY,cAAb,GAA8B,MAAM,CAChC;EAAE5E,IAAI,EAAEoH;AAAR,CADgC,CAApC;;AAGA+V,YAAY,CAAC/B,cAAb,GAA8B;EAC1BiC,UAAU,EAAE,CAAC;IAAErd,IAAI,EAAEjC;EAAR,CAAD,CADc;EAE1B4J,OAAO,EAAE,CAAC;IAAE3H,IAAI,EAAEnC;EAAR,CAAD,CAFiB;EAG1B4J,KAAK,EAAE,CAAC;IAAEzH,IAAI,EAAEnC;EAAR,CAAD;AAHmB,CAA9B;AAMA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMmgB,YAAN,CAAmB;EACf9d,WAAW,CAAC+d,kBAAD,EAAqBC,iBAArB,EAAwC;IAC/C,KAAKD,kBAAL,GAA0BA,kBAA1B;IACA,KAAKC,iBAAL,GAAyBA,iBAAzB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,YAAL,GAAoB,IAApB;IACA,KAAKC,WAAL,GAAmB,IAAIlf,OAAJ,EAAnB;IACA,KAAKmf,uBAAL,GAA+B,IAA/B;EACH;EACD;AACJ;AACA;;;EACI/B,WAAW,GAAG;IACV,KAAKgC,aAAL;EACH;EACD;AACJ;AACA;;;EACIrD,QAAQ,GAAG;IACP,KAAKgD,kBAAL,CACKM,oBADL,GAEKhV,IAFL,CAEU5J,oBAAoB,CAAC,CAAC0E,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACrB,MAAF,CAASoC,GAAT,KAAiBd,CAAC,CAACtB,MAAF,CAASoC,GAA1B,IAAiCf,CAAC,CAACrB,MAAF,CAASsC,GAAT,KAAiBhB,CAAC,CAACtB,MAAF,CAASsC,GAAtE,CAF9B,EAE0G1F,SAAS,CAAC,KAAKwe,WAAN,CAFnH,EAGKtB,SAHL,CAGe0B,OAAO,IAAI,KAAKF,aAAL,CAAmBE,OAAnB,CAH1B;EAIH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIF,aAAa,CAACG,mBAAD,EAAsB;IAC/B;IACA,IAAI,KAAKJ,uBAAT,EAAkC;MAC9B,KAAKH,iBAAL,CAAuB7T,gBAAvB,CAAwC,KAAKgU,uBAAL,CAA6Brb,MAArE,EAD8B,CAE9B;MACA;;IACH;;IACD,IAAIyb,mBAAJ,EAAyB;MACrB,KAAKJ,uBAAL,GAA+BI,mBAA/B;IACH;;IACD,IAAI,CAAC,KAAKJ,uBAAV,EAAmC;MAC/B;IACH;;IACD,IAAI,KAAKF,YAAL,KAAsB,IAA1B,EAAgC;MAC5B,KAAKD,iBAAL,CAAuBnU,WAAvB,CAAmC,KAAKsU,uBAAL,CAA6Brb,MAAhE;IACH;EACJ;EACD;AACJ;AACA;;;EACIkY,WAAW,GAAG;IACV,KAAKkD,WAAL,CAAiB5a,IAAjB;;IACA,KAAK4a,WAAL,CAAiBM,QAAjB;;IACA,IAAI,KAAKL,uBAAL,KAAiC,IAArC,EAA2C;MACvC,KAAKH,iBAAL,CAAuB7T,gBAAvB,CAAwC,KAAKgU,uBAAL,CAA6Brb,MAArE;IACH;EACJ;;AA5Dc;;AA8DnBgb,YAAY,CAACje,UAAb,GAA0B,CACtB;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE;EADI,CAAD;AAAzB,CADsB,CAA1B;;AAKA6C,YAAY,CAACpZ,cAAb,GAA8B,MAAM,CAChC;EAAE5E,IAAI,EAAEiJ,iBAAR;EAA2BlJ,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEhC;EAAR,CAAD;AAAvC,CADgC,EAEhC;EAAEgC,IAAI,EAAEkJ;AAAR,CAFgC,CAApC;;AAIA8U,YAAY,CAAC5C,cAAb,GAA8B;EAC1B+C,YAAY,EAAE,CAAC;IAAEne,IAAI,EAAEnC;EAAR,CAAD;AADY,CAA9B;AAIA,IAAI8gB,YAAY,GAAG,CAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,CAAoB;EAChB1e,WAAW,CAAC2e,kBAAD,EAAqBC,GAArB,EAA0B;IACjC,KAAKD,kBAAL,GAA0BA,kBAA1B;IACA,KAAKC,GAAL,GAAWA,GAAX;IACA;AACR;AACA;;IACQ,KAAKC,MAAL,GAAc,KAAd;IACA;AACR;AACA;;IACQ,KAAKC,eAAL,GAAuB,IAAIlhB,YAAJ,EAAvB;IACA,KAAKmhB,yBAAL,GAAiC,KAAjC;IACA,KAAKlE,GAAL,GAAW,CAAC4D,YAAY,EAAb,EAAiB3D,QAAjB,EAAX;EACH;;EACDC,QAAQ,GAAG;IACP,KAAKnI,OAAL,GAAe,KAAKgM,GAAL,CAASI,aAAT,CAAuBC,aAAvB,CAAqC,0BAArC,CAAf;;IACA,KAAKN,kBAAL,CAAwBhM,aAAxB,CAAsC,IAAtC;;IACA,KAAKoM,yBAAL,GAAiC,IAAjC;;IACA,KAAKG,gBAAL;;IACA,KAAK/C,uBAAL;EACH;EACD;;;EACAC,WAAW,CAACC,OAAD,EAAU;IACjB,IAAI,CAAC,KAAK0C,yBAAV,EAAqC;MACjC;IACH,CAHgB,CAIjB;;;IACA,IAAI,CAAC1C,OAAO,CAAC,UAAD,CAAP,IAAuBA,OAAO,CAAC,WAAD,CAA/B,KAAiD,OAAO,KAAKlX,QAAZ,KAAyB,QAA1E,IACA,OAAO,KAAKE,SAAZ,KAA0B,QAD9B,EACwC;MACpC,KAAKsZ,kBAAL,CAAwBnO,WAAxB,CAAoC,IAApC;IACH;;IACD,IAAI6L,OAAO,CAAC,QAAD,CAAX,EAAuB;MACnB,KAAKsC,kBAAL,CAAwBnN,SAAxB,CAAkC,IAAlC;IACH;;IACD,IAAI6K,OAAO,CAAC,QAAD,CAAX,EAAuB;MACnB,KAAK6C,gBAAL;IACH;;IACD,KAAKC,qBAAL,CAA2B9C,OAA3B;EACH,CAvCe,CAwChB;;;EACAF,uBAAuB,GAAG;IACtB,KAAKwC,kBAAL,CAAwB7X,qBAAxB,CAA8C,YAA9C,EAA4D,IAA5D,EAAkE8V,SAAlE,CAA4E,MAAM;MAC9E,KAAKiC,MAAL,GAAc,KAAd;MACA,KAAKC,eAAL,CAAqBjC,IAArB;IACH,CAHD;EAIH;;EACDqC,gBAAgB,GAAG;IACf,KAAKL,MAAL,GAAc,KAAKpM,IAAL,EAAd,GAA4B,KAAKD,KAAL,EAA5B;EACH;;EACD2M,qBAAqB,CAAC9C,OAAD,EAAU;IAC3B,MAAMpb,OAAO,GAAG,EAAhB;IACA,MAAMsb,UAAU,GAAGtN,MAAM,CAACC,IAAP,CAAYmN,OAAZ,EAAqBlN,MAArB,CAA4BC,CAAC,IAAIsP,aAAa,CAACU,wBAAd,CAAuClX,OAAvC,CAA+CkH,CAA/C,MAAsD,CAAC,CAAxF,CAAnB;IACAmN,UAAU,CAACxU,OAAX,CAAoBqH,CAAD,IAAO;MAAEnO,OAAO,CAACmO,CAAD,CAAP,GAAaiN,OAAO,CAACjN,CAAD,CAAP,CAAWqN,YAAxB;IAAuC,CAAnE;;IACA,KAAKkC,kBAAL,CAAwBxd,UAAxB,CAAmC,IAAnC,EAAyCF,OAAzC;EACH;EACD;AACJ;AACA;;;EACIwR,IAAI,GAAG;IAAE,OAAO,KAAKkM,kBAAL,CAAwBlM,IAAxB,CAA6B,IAA7B,CAAP;EAA4C;EACrD;AACJ;AACA;;;EACID,KAAK,GAAG;IACJ,OAAO,KAAKmM,kBAAL,CAAwBnM,KAAxB,CAA8B,IAA9B,EAAoC5R,IAApC,CAAyC,MAAM;MAAE,KAAKke,eAAL,CAAqBjC,IAArB;IAA8B,CAA/E,CAAP;EACH;EACD;;;EACA/S,EAAE,GAAG;IAAE,OAAO,KAAK+Q,GAAZ;EAAkB;EACzB;;;EACAC,QAAQ,GAAG;IAAE,OAAO,mBAAmB,KAAKD,GAAL,CAASC,QAAT,EAA1B;EAAgD;EAC7D;;;EACAE,WAAW,GAAG;IAAE,KAAK2D,kBAAL,CAAwBtM,gBAAxB,CAAyC,IAAzC;EAAiD;;AAvEjD;;AAyEpBqM,aAAa,CAACU,wBAAd,GAAyC,CAAC,gBAAD,EAAmB,UAAnB,CAAzC;AACAV,aAAa,CAAC7e,UAAd,GAA2B,CACvB;EAAEC,IAAI,EAAE/B,SAAR;EAAmB6N,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE,iBADI;IAEdoE,QAAQ,EAAG;AAC3B;AACA;AACA;EAL8B,CAAD;AAAzB,CADuB,CAA3B;;AASAX,aAAa,CAACha,cAAd,GAA+B,MAAM,CACjC;EAAE5E,IAAI,EAAEoS;AAAR,CADiC,EAEjC;EAAEpS,IAAI,EAAE9B;AAAR,CAFiC,CAArC;;AAIA0gB,aAAa,CAACxD,cAAd,GAA+B;EAC3B/V,QAAQ,EAAE,CAAC;IAAErF,IAAI,EAAEnC;EAAR,CAAD,CADiB;EAE3B0H,SAAS,EAAE,CAAC;IAAEvF,IAAI,EAAEnC;EAAR,CAAD,CAFgB;EAG3BmV,cAAc,EAAE,CAAC;IAAEhT,IAAI,EAAEnC;EAAR,CAAD,CAHW;EAI3BuI,MAAM,EAAE,CAAC;IAAEpG,IAAI,EAAEnC;EAAR,CAAD,CAJmB;EAK3BkV,QAAQ,EAAE,CAAC;IAAE/S,IAAI,EAAEnC;EAAR,CAAD,CALiB;EAM3BkhB,MAAM,EAAE,CAAC;IAAE/e,IAAI,EAAEnC;EAAR,CAAD,CANmB;EAO3BmhB,eAAe,EAAE,CAAC;IAAEhf,IAAI,EAAEjC;EAAR,CAAD;AAPU,CAA/B;AAUA,IAAIyhB,SAAS,GAAG,CAAhB;;AACA,MAAMC,WAAN,CAAkB;EACdvf,WAAW,CAAC2a,QAAD,EAAW;IAClB,KAAKA,QAAL,GAAgBA,QAAhB;IACA,KAAKC,eAAL,GAAuB,KAAvB;IACA,KAAKC,GAAL,GAAW,CAACyE,SAAS,EAAV,EAAcxE,QAAd,EAAX;IACA,KAAKoC,cAAL,GAAsB,EAAtB;IACA;AACR;AACA;;IACQ,KAAK5X,SAAL,GAAiB,IAAjB;IACA;AACR;AACA;AACA;AACA;AACA;;IACQ,KAAK6N,gBAAL,GAAwB,KAAxB;IACA;AACR;AACA;;IACQ,KAAKC,cAAL,GAAsB,IAAtB;IACA;AACR;AACA;;IACQ,KAAKC,mBAAL,GAA2B,KAA3B;IACA;AACR;AACA;;IACQ,KAAKC,GAAL,GAAW,IAAX;IACA;AACR;AACA;;IACQ,KAAKpN,MAAL,GAAc,IAAd;IACA;AACR;AACA;;IACQ,KAAKiX,UAAL,GAAkB,IAAIvf,YAAJ,EAAlB;IACA;AACR;AACA;;IACQ,KAAK4hB,qBAAL,GAA6B,IAAI5hB,YAAJ,EAA7B;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAK6hB,YAAL,GAAoB,IAAI7hB,YAAJ,EAApB;EACH;;EACDmd,QAAQ,GAAG;IACP,IAAI,KAAKH,eAAT,EAA0B;MACtB;IACH;;IACD,KAAKD,QAAL,CAAc1H,WAAd,CAA0B,IAA1B;;IACA,KAAK2H,eAAL,GAAuB,IAAvB;;IACA,KAAKwC,kBAAL;EACH;;EACDhB,WAAW,CAACC,OAAD,EAAU;IACjB,IAAI,CAAC,KAAKzB,eAAV,EAA2B;MACvB;IACH;;IACD,KAAK8E,qBAAL,CAA2BrD,OAA3B;EACH;;EACDqD,qBAAqB,CAACrD,OAAD,EAAU;IAC3B,MAAMpb,OAAO,GAAGgO,MAAM,CAACC,IAAP,CAAYmN,OAAZ,EACXlN,MADW,CACJC,CAAC,IAAImQ,WAAW,CAACI,gBAAZ,CAA6BzX,OAA7B,CAAqCkH,CAArC,MAA4C,CAAC,CAD9C,EAEXwO,MAFW,CAEJ,CAACL,GAAD,EAAMnO,CAAN,KAAY;MACpBmO,GAAG,CAACnO,CAAD,CAAH,GAASiN,OAAO,CAACjN,CAAD,CAAP,CAAWqN,YAApB;MACA,OAAOc,GAAP;IACH,CALe,EAKb,EALa,CAAhB;;IAMA,IAAItO,MAAM,CAACC,IAAP,CAAYjO,OAAZ,EAAqBsO,MAArB,GAA8B,CAAlC,EAAqC;MACjC,KAAKoL,QAAL,CAAcxZ,UAAd,CAAyB,IAAzB,EAA+BF,OAA/B;IACH;EACJ;;EACDmc,kBAAkB,GAAG;IACjB,MAAMxI,SAAS,GAAG,CACd;MAAEyI,IAAI,EAAE,OAAR;MAAiBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKH,UAAL,CAAgBN,IAAhB,CAAqBS,EAArB;IAAlC,CADc,EAEd;MAAED,IAAI,EAAE,yBAAR;MAAmCnJ,OAAO,EAAE,MAAM,KAAKsL,qBAAL,CAA2B3C,IAA3B;IAAlD,CAFc,EAGd;MAAEQ,IAAI,EAAE,gBAAR;MAA0BnJ,OAAO,EAAE,MAAM,KAAKuL,YAAL,CAAkB5C,IAAlB;IAAzC,CAHc,CAAlB;IAKAjI,SAAS,CAAC7M,OAAV,CAAmBwV,GAAD,IAAS;MACvB,MAAMC,EAAE,GAAG,KAAK7C,QAAL,CAAc7T,qBAAd,CAAoCyW,GAAG,CAACF,IAAxC,EAA8C,IAA9C,EAAoDT,SAApD,CAA8DW,GAAG,CAACrJ,OAAlE,CAAX;;MACA,KAAKgJ,cAAL,CAAoB1H,IAApB,CAAyBgI,EAAzB;IACH,CAHD;EAIH;EACD;;;EACA1T,EAAE,GAAG;IAAE,OAAO,KAAK+Q,GAAZ;EAAkB;EACzB;;;EACAC,QAAQ,GAAG;IAAE,OAAQ,eAAc,KAAKD,GAAL,CAASC,QAAT,EAAoB,EAA1C;EAA8C;EAC3D;;;EACAE,WAAW,GAAG;IACV,KAAKL,QAAL,CAAcpH,cAAd,CAA6B,IAA7B,EADU,CAEV;;;IACA,KAAK2J,cAAL,CAAoBnV,OAApB,CAA4B+U,CAAC,IAAIA,CAAC,CAACC,WAAF,EAAjC;EACH;;AA7Fa;;AA+FlBwC,WAAW,CAACI,gBAAZ,GAA+B,CAAC,WAAD,EAAc,kBAAd,EAAkC,gBAAlC,EAAoD,qBAApD,EAA2E,KAA3E,EAAkF,QAAlF,CAA/B;AACAJ,WAAW,CAAC1f,UAAZ,GAAyB,CACrB;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE;EADI,CAAD;AAAzB,CADqB,CAAzB;;AAKAsE,WAAW,CAAC7a,cAAZ,GAA6B,MAAM,CAC/B;EAAE5E,IAAI,EAAEkT;AAAR,CAD+B,CAAnC;;AAGAuM,WAAW,CAACrE,cAAZ,GAA6B;EACzB5V,SAAS,EAAE,CAAC;IAAExF,IAAI,EAAEnC;EAAR,CAAD,CADc;EAEzBwV,gBAAgB,EAAE,CAAC;IAAErT,IAAI,EAAEnC;EAAR,CAAD,CAFO;EAGzByV,cAAc,EAAE,CAAC;IAAEtT,IAAI,EAAEnC;EAAR,CAAD,CAHS;EAIzB0V,mBAAmB,EAAE,CAAC;IAAEvT,IAAI,EAAEnC;EAAR,CAAD,CAJI;EAKzB2V,GAAG,EAAE,CAAC;IAAExT,IAAI,EAAEnC;EAAR,CAAD,CALoB;EAMzBuI,MAAM,EAAE,CAAC;IAAEpG,IAAI,EAAEnC;EAAR,CAAD,CANiB;EAOzBwf,UAAU,EAAE,CAAC;IAAErd,IAAI,EAAEjC;EAAR,CAAD,CAPa;EAQzB2hB,qBAAqB,EAAE,CAAC;IAAE1f,IAAI,EAAEjC;EAAR,CAAD,CARE;EASzB4hB,YAAY,EAAE,CAAC;IAAE3f,IAAI,EAAEjC;EAAR,CAAD;AATW,CAA7B;;AAYA,MAAM+hB,aAAN,CAAoB;;AAEpBA,aAAa,CAAC/f,UAAd,GAA2B,CACvB;EAAEC,IAAI,EAAEpC;AAAR,CADuB,CAA3B;AAGAkiB,aAAa,CAAC1E,cAAd,GAA+B;EAC3BnJ,QAAQ,EAAE,CAAC;IAAEjS,IAAI,EAAEnC;EAAR,CAAD;AADiB,CAA/B;;AAGA,MAAMkiB,oBAAN,SAAmCD,aAAnC,CAAiD;EAC7CE,UAAU,GAAG;IACT,OAAO;MACHC,iBAAiB,EAAE,IADhB;MAEHC,wBAAwB,EAAE;QACtBjO,QAAQ,EAAE,KAAKA,QAAL,IAAiBlR,MAAM,CAACC,IAAP,CAAYmf,eAAZ,CAA4B,KAAKlO,QAAjC;MADL;IAFvB,CAAP;EAMH;;AAR4C;;AAUjD8N,oBAAoB,CAAChgB,UAArB,GAAkC,CAC9B;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE,gCADI;IAEdiF,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAEP,aAAX;MAA0BQ,WAAW,EAAEP;IAAvC,CAAD;EAFG,CAAD;AAAzB,CAD8B,CAAlC;;AAMA,MAAMQ,iBAAN,SAAgCT,aAAhC,CAA8C;EAC1CE,UAAU,GAAG;IACT,OAAO;MACHQ,cAAc,EAAE,IADb;MAEHC,qBAAqB,EAAE;QACnBxO,QAAQ,EAAE,KAAKA,QAAL,IAAiBlR,MAAM,CAACC,IAAP,CAAYmf,eAAZ,CAA4B,KAAKlO,QAAjC,CADR;QAEnBxK,KAAK,EAAE,KAAKA,KAAL,IAAc1G,MAAM,CAACC,IAAP,CAAY0f,mBAAZ,CAAgC,KAAKjZ,KAArC,CAFF;QAGnBkZ,UAAU,EAAE,KAAKA,UAAL,IAAmB,KAAKA,UAAL,CAAgBrhB,GAAhB,CAAoBshB,SAAS,IAAI7f,MAAM,CAACC,IAAP,CAAY6f,SAAZ,CAAsBD,SAAtB,CAAjC;MAHZ;IAFpB,CAAP;EAQH;;AAVyC;;AAY9CL,iBAAiB,CAACxgB,UAAlB,GAA+B,CAC3B;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE,8BADI;IAEdiF,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAEP,aAAX;MAA0BQ,WAAW,EAAEC;IAAvC,CAAD;EAFG,CAAD;AAAzB,CAD2B,CAA/B;AAMAA,iBAAiB,CAACnF,cAAlB,GAAmC;EAC/BuF,UAAU,EAAE,CAAC;IAAE3gB,IAAI,EAAEnC;EAAR,CAAD,CADmB;EAE/B4J,KAAK,EAAE,CAAC;IAAEzH,IAAI,EAAEnC;EAAR,CAAD;AAFwB,CAAnC;;AAIA,MAAMijB,aAAN,SAA4BhB,aAA5B,CAA0C;EACtCE,UAAU,GAAG;IACT,OAAO;MACHe,UAAU,EAAE,IADT;MAEHC,iBAAiB,EAAE;QACf/O,QAAQ,EAAE,KAAKA,QAAL,IAAiBlR,MAAM,CAACC,IAAP,CAAYmf,eAAZ,CAA4B,KAAKlO,QAAjC;MADZ;IAFhB,CAAP;EAMH;;AARqC;;AAU1C6O,aAAa,CAAC/gB,UAAd,GAA2B,CACvB;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE,yBADI;IAEdiF,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAEP,aAAX;MAA0BQ,WAAW,EAAEQ;IAAvC,CAAD;EAFG,CAAD;AAAzB,CADuB,CAA3B;;AAMA,MAAMG,gBAAN,SAA+BnB,aAA/B,CAA6C;EACzCE,UAAU,GAAG;IACT,OAAO;MACHkB,aAAa,EAAE,IADZ;MAEHC,oBAAoB,EAAE;QAClBlP,QAAQ,EAAE,KAAKA,QAAL,IAAiBlR,MAAM,CAACC,IAAP,CAAYmf,eAAZ,CAA4B,KAAKlO,QAAjC;MADT;IAFnB,CAAP;EAMH;;AARwC;;AAU7CgP,gBAAgB,CAAClhB,UAAjB,GAA8B,CAC1B;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE,4BADI;IAEdiF,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAEP,aAAX;MAA0BQ,WAAW,EAAEW;IAAvC,CAAD;EAFG,CAAD;AAAzB,CAD0B,CAA9B;;AAMA,MAAMG,eAAN,SAA8BtB,aAA9B,CAA4C;EACxCE,UAAU,GAAG;IACT,OAAO;MACHqB,YAAY,EAAE;IADX,CAAP;EAGH;;AALuC;;AAO5CD,eAAe,CAACrhB,UAAhB,GAA6B,CACzB;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE,2BADI;IAEdiF,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAEP,aAAX;MAA0BQ,WAAW,EAAEc;IAAvC,CAAD;EAFG,CAAD;AAAzB,CADyB,CAA7B;;AAMA,MAAME,oBAAN,SAAmCxB,aAAnC,CAAiD;EAC7CE,UAAU,GAAG;IACT,OAAO;MACHuB,iBAAiB,EAAE,IADhB;MAEHC,wBAAwB,EAAE;QACtBvP,QAAQ,EAAE,KAAKA,QAAL,IAAiBlR,MAAM,CAACC,IAAP,CAAYmf,eAAZ,CAA4B,KAAKlO,QAAjC;MADL;IAFvB,CAAP;EAMH;;AAR4C;;AAUjDqP,oBAAoB,CAACvhB,UAArB,GAAkC,CAC9B;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE,iCADI;IAEdiF,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAEP,aAAX;MAA0BQ,WAAW,EAAEgB;IAAvC,CAAD;EAFG,CAAD;AAAzB,CAD8B,CAAlC;;AAMA,MAAMG,cAAN,SAA6B3B,aAA7B,CAA2C;EACvCE,UAAU,GAAG;IACT,OAAO;MACH0B,WAAW,EAAE,IADV;MAEHC,kBAAkB,EAAE;QAChB1P,QAAQ,EAAE,KAAKA,QAAL,IAAiBlR,MAAM,CAACC,IAAP,CAAYmf,eAAZ,CAA4B,KAAKlO,QAAjC,CADX;QAEhBxK,KAAK,EAAE,KAAKA,KAAL,IAAc1G,MAAM,CAACC,IAAP,CAAY4gB,gBAAZ,CAA6B,KAAKna,KAAlC;MAFL;IAFjB,CAAP;EAOH;;AATsC;;AAW3Cga,cAAc,CAAC1hB,UAAf,GAA4B,CACxB;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE,0BADI;IAEdiF,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAEP,aAAX;MAA0BQ,WAAW,EAAEmB;IAAvC,CAAD;EAFG,CAAD;AAAzB,CADwB,CAA5B;AAMAA,cAAc,CAACrG,cAAf,GAAgC;EAC5B3T,KAAK,EAAE,CAAC;IAAEzH,IAAI,EAAEnC;EAAR,CAAD;AADqB,CAAhC;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMgkB,MAAN,CAAa;EACT3hB,WAAW,CAAC4hB,KAAD,EAAQ9R,YAAR,EACX;EACA+R,WAFW,EAEE7D,iBAFF,EAEqB9d,KAFrB,EAE4B;IACnC,KAAK0hB,KAAL,GAAaA,KAAb;IACA,KAAK9R,YAAL,GAAoBA,YAApB;IACA,KAAK+R,WAAL,GAAmBA,WAAnB;IACA,KAAK7D,iBAAL,GAAyBA,iBAAzB;IACA,KAAK9d,KAAL,GAAaA,KAAb;IACA;AACR;AACA;;IACQ,KAAKmF,SAAL,GAAiB,CAAjB;IACA;AACR;AACA;;IACQ,KAAKF,QAAL,GAAgB,CAAhB;IACA;AACR;AACA;;IACQ,KAAKpB,IAAL,GAAY,CAAZ;IACA;AACR;AACA;IACQ;;IACA,KAAKwB,SAAL,GAAiB,IAAjB;IACA;AACR;AACA;;IACQ,KAAKuc,sBAAL,GAA8B,KAA9B;IACA;AACR;AACA;AACA;;IACQ,KAAKC,gBAAL,GAAwB,KAAxB;IACA;AACR;AACA;;IACQ,KAAKC,WAAL,GAAmB,IAAnB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,iBAAL,GAAyB,IAAzB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,MAAL,GAAc,EAAd;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,UAAL,GAAkB,KAAlB;IACA;AACR;AACA;AACA;;IACQ,KAAK9d,SAAL,GAAiB,KAAjB;IACA;AACR;AACA;;IACQ,KAAKqc,SAAL,GAAiB,SAAjB;IACA;AACR;AACA;AACA;;IACQ,KAAK0B,cAAL,GAAsB,IAAtB;IACA;AACR;AACA;AACA;AACA;AACA;;IACQ,KAAKC,qBAAL,GAA6B,IAA7B;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKC,eAAL,GAAuB,MAAvB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKC,IAAL,GAAY,CAAZ;IACA,KAAKC,wBAAL,GAAgC,EAAhC;IACA;AACR;AACA;AACA;IACQ;;IACA,KAAKC,QAAL,GAAgB,IAAI7kB,YAAJ,EAAhB;IACA;AACR;AACA;AACA;;IACQ,KAAK8kB,aAAL,GAAqB,IAAI9kB,YAAJ,EAArB;IACA;AACR;AACA;AACA;;IACQ,KAAK+kB,WAAL,GAAmB,IAAI/kB,YAAJ,EAAnB;IACA;AACR;AACA;;IACQ,KAAKwd,YAAL,GAAoB,IAAIxd,YAAJ,EAApB;IACA;AACR;AACA;;IACQ,KAAKglB,YAAL,GAAoB,IAAIhlB,YAAJ,EAApB;IACA;AACR;AACA;;IACQ,KAAKilB,eAAL,GAAuB,IAAIjlB,YAAJ,EAAvB;IACA;AACR;AACA;;IACQ,KAAKklB,IAAL,GAAY,IAAIllB,YAAJ,EAAZ;IACA;AACR;AACA;;IACQ,KAAKmlB,UAAL,GAAkB,IAAInlB,YAAJ,EAAlB;IACA;AACR;AACA;AACA;;IACQ,KAAKolB,QAAL,GAAgB,IAAIplB,YAAJ,EAAhB;IACA;AACR;AACA;;IACQ,KAAKqlB,WAAL,GAAmB,IAAIrlB,YAAJ,EAAnB;EACH;EACD;;;EACAslB,kBAAkB,GAAG;IACjB,IAAIvjB,gBAAgB,CAAC,KAAKkiB,WAAN,CAApB,EAAwC;MACpC;MACA;IACH,CAJgB,CAKjB;;;IACA,MAAMsB,SAAS,GAAG,KAAKvB,KAAL,CAAW5C,aAAX,CAAyBC,aAAzB,CAAuC,0BAAvC,CAAlB;;IACA,KAAKmE,gBAAL,CAAsBD,SAAtB;EACH;;EACDC,gBAAgB,CAAC5iB,EAAD,EAAK;IACjB,KAAKsP,YAAL,CAAkBvP,SAAlB,CAA4BC,EAA5B,EAAgC;MAC5ByE,MAAM,EAAE;QAAEC,GAAG,EAAE,KAAKC,QAAL,IAAiB,CAAxB;QAA2BC,GAAG,EAAE,KAAKC,SAAL,IAAkB;MAAlD,CADoB;MAE5BtB,IAAI,EAAE,KAAKA,IAFiB;MAG5Bsf,OAAO,EAAE,KAAKA,OAHc;MAI5BC,OAAO,EAAE,KAAKA,OAJc;MAK5BC,WAAW,EAAE,KAAKA,WALU;MAM5BxB,gBAAgB,EAAE,KAAKA,gBANK;MAO5BD,sBAAsB,EAAE,KAAKA,sBAPD;MAQ5BE,WAAW,EAAE,KAAKA,WARU;MAS5BwB,eAAe,EAAE,KAAKA,eATM;MAU5Bje,SAAS,EAAE,KAAKA,SAVY;MAW5Bke,eAAe,EAAE,KAAKA,eAXM;MAY5BC,cAAc,EAAE,KAAKA,cAZO;MAa5BzB,iBAAiB,EAAE,KAAKA,iBAbI;MAc5BC,MAAM,EAAE,KAAKA,MAde;MAe5BxB,SAAS,EAAE,KAAKA,SAAL,CAAeiD,iBAAf,EAfiB;MAgB5BvB,cAAc,EAAE,KAAKA,cAhBO;MAiB5BE,eAAe,EAAE,KAAKA,eAjBM;MAkB5BC,IAAI,EAAE,KAAKA,IAlBiB;MAmB5BqB,WAAW,EAAE,KAAKA;IAnBU,CAAhC,EAqBKhjB,IArBL,CAqBU,MAAM,KAAKkP,YAAL,CAAkBhO,YAAlB,EArBhB,EAsBKlB,IAtBL,CAsBUxB,GAAG,IAAI,KAAK4jB,QAAL,CAAcnG,IAAd,CAAmBzd,GAAnB,CAtBjB,EADiB,CAwBjB;;;IACA,KAAKykB,sBAAL;;IACA,KAAKC,oBAAL;;IACA,KAAKC,qBAAL;;IACA,KAAKC,mBAAL;;IACA,KAAKC,sBAAL;;IACA,KAAKC,uBAAL;;IACA,KAAKC,gBAAL;;IACA,KAAKC,oBAAL;EACH;EACD;;;EACApJ,WAAW,GAAG;IACV;IACA,KAAKwH,wBAAL,CAA8Bza,OAA9B,CAAuC+U,CAAD,IAAOA,CAAC,CAACC,WAAF,EAA7C,EAFU,CAGV;;;IACA,KAAKjN,YAAL,CAAkBtM,sBAAlB;;IACA,IAAI,KAAK6gB,sBAAT,EAAiC;MAC7B,KAAKA,sBAAL,CAA4BtH,WAA5B;IACH;EACJ;EACD;;;EACAX,WAAW,CAACC,OAAD,EAAU;IACjB,KAAKiI,wBAAL,CAA8BjI,OAA9B;;IACA,KAAKkI,eAAL,CAAqBlI,OAArB;EACH;;EACDiI,wBAAwB,CAACjI,OAAD,EAAU;IAC9B,MAAMpb,OAAO,GAAG,EAAhB;IACA,MAAMsb,UAAU,GAAGtN,MAAM,CAACC,IAAP,CAAYmN,OAAZ,EAAqBlN,MAArB,CAA4BC,CAAC,IAAIuS,MAAM,CAAC6C,qBAAP,CAA6Btc,OAA7B,CAAqCkH,CAArC,MAA4C,CAAC,CAA9E,CAAnB;IACAmN,UAAU,CAACxU,OAAX,CAAoBqH,CAAD,IAAO;MAAEnO,OAAO,CAACmO,CAAD,CAAP,GAAaiN,OAAO,CAACjN,CAAD,CAAP,CAAWqN,YAAxB;IAAuC,CAAnE;;IACA,KAAK3M,YAAL,CAAkB9O,aAAlB,CAAgCC,OAAhC;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIwjB,aAAa,CAACC,QAAQ,GAAG,IAAZ,EAAkB;IAC3B;IACA;IACA;IACA,OAAO,IAAItkB,OAAJ,CAAaC,OAAD,IAAa;MAC5BskB,UAAU,CAAC,MAAM;QACb,OAAO,KAAK7U,YAAL,CAAkBtL,eAAlB,CAAkC,QAAlC,EAA4C5D,IAA5C,CAAiD,MAAM;UAC1D,IAAI8jB,QAAJ,EAAc;YACV,KAAKrgB,SAAL,IAAkB,IAAlB,GAAyB,KAAKugB,UAAL,EAAzB,GAA6C,KAAKC,UAAL,EAA7C;UACH;;UACDxkB,OAAO;QACV,CALM,CAAP;MAMH,CAPS,CAAV;IAQH,CATM,CAAP;EAUH;;EACDkkB,eAAe,CAAClI,OAAD,EAAU;IACrB;IACA,IAAIA,OAAO,CAAC,UAAD,CAAP,IAAuB,IAAvB,IAA+BA,OAAO,CAAC,WAAD,CAAP,IAAwB,IAAvD,IACA,CAACA,OAAO,CAAC,WAAD,CADZ,EAC2B;MACvB;MACA;IACH,CANoB,CAOrB;IACA;;;IACA,IAAI,eAAeA,OAAnB,EAA4B;MACxB,KAAKuI,UAAL;;MACA;IACH;;IACD,IAAI,OAAO,KAAKzf,QAAZ,KAAyB,QAAzB,IAAqC,OAAO,KAAKE,SAAZ,KAA0B,QAAnE,EAA6E;MACzE;IACH;;IACD,KAAKwf,UAAL;EACH;;EACDA,UAAU,GAAG;IACT,MAAMC,SAAS,GAAG;MACd5f,GAAG,EAAE,KAAKC,QADI;MAEdC,GAAG,EAAE,KAAKC;IAFI,CAAlB;;IAIA,IAAI,KAAK8c,UAAT,EAAqB;MACjB,KAAKrS,YAAL,CAAkB7L,KAAlB,CAAwB6gB,SAAxB;IACH,CAFD,MAGK;MACD,KAAKhV,YAAL,CAAkBpM,SAAlB,CAA4BohB,SAA5B;IACH;EACJ;;EACDF,UAAU,GAAG;IACT,QAAQ,KAAKvgB,SAAb;MACI,KAAK,IAAL;QACI,KAAK0gB,4BAAL;;QACA;;MACJ,KAAK,KAAL;QACI,IAAI,KAAKV,sBAAT,EAAiC;UAC7B,KAAKA,sBAAL,CAA4BtH,WAA5B;QACH;;QACD;;MACJ;QACI,IAAI,KAAKsH,sBAAT,EAAiC;UAC7B,KAAKA,sBAAL,CAA4BtH,WAA5B;QACH;;QACD,KAAKqB,aAAL,CAAmB,KAAK/Z,SAAxB,EAAmC,KAAK2gB,gBAAxC;;IAbR;EAeH;;EACDD,4BAA4B,GAAG;IAC3B,KAAK7kB,KAAL,CAAWQ,iBAAX,CAA6B,MAAM;MAC/B,KAAK2jB,sBAAL,GAA8B,KAAKrG,iBAAL,CAAuB1T,UAAvB,GAAoCsS,SAApC,CAA8CjT,CAAC,IAAI;QAC7E,KAAKzJ,KAAL,CAAWmD,GAAX,CAAe,MAAM,KAAK+a,aAAL,CAAmBzU,CAAnB,EAAsB,KAAKqb,gBAA3B,CAArB;MACH,CAF6B,CAA9B;IAGH,CAJD;EAKH;;EACD5G,aAAa,CAAC3U,MAAD,EAASnF,OAAT,EAAkB;IAC3B,IAAI,CAACmF,MAAL,EAAa;MACT;IACH;;IACD,IAAI,KAAKwb,sBAAL,CAA4Bxb,MAA5B,KAAuC,OAAO5I,MAAP,KAAkB,WAAzD,IAAwEA,MAAxE,IAAkFA,MAAM,CAACC,IAAzF,IAAiGD,MAAM,CAACC,IAAP,CAAY4I,YAAjH,EAA+H;MAC3H,MAAMwb,SAAS,GAAG,IAAIrkB,MAAM,CAACC,IAAP,CAAY4I,YAAhB,EAAlB;MACAwb,SAAS,CAACC,KAAV,CAAgB1b,MAAhB;MACAA,MAAM,GAAGyb,SAAT;IACH;;IACD,IAAI,KAAK/C,UAAT,EAAqB;MACjB,KAAKrS,YAAL,CAAkBvL,WAAlB,CAA8BkF,MAA9B,EAAsCnF,OAAtC;;MACA;IACH;;IACD,KAAKwL,YAAL,CAAkBzL,SAAlB,CAA4BoF,MAA5B,EAAoCnF,OAApC;EACH;;EACD2gB,sBAAsB,CAACxb,MAAD,EAAS;IAC3B,OAAOA,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACG,MAAP,KAAkB+F,SAA3C;EACH;;EACDkU,sBAAsB,GAAG;IACrB,MAAM/G,CAAC,GAAG,KAAKhN,YAAL,CAAkB7M,mBAAlB,CAAsC,gBAAtC,EAAwD2Z,SAAxD,CAAkE,MAAM;MAC9E,KAAK9M,YAAL,CAAkB9L,SAAlB,GAA8BpD,IAA9B,CAAoCqE,MAAD,IAAY;QAC3C,KAAKE,QAAL,GAAgBF,MAAM,CAACC,GAAP,EAAhB;QACA,KAAKG,SAAL,GAAiBJ,MAAM,CAACG,GAAP,EAAjB;QACA,KAAKgW,YAAL,CAAkByB,IAAlB,CAAuB;UAAE3X,GAAG,EAAE,KAAKC,QAAZ;UAAsBC,GAAG,EAAE,KAAKC;QAAhC,CAAvB;MACH,CAJD;IAKH,CANS,CAAV;;IAOA,KAAKmd,wBAAL,CAA8BhN,IAA9B,CAAmCsH,CAAnC;EACH;;EACDkH,mBAAmB,GAAG;IAClB,MAAMlH,CAAC,GAAG,KAAKhN,YAAL,CAAkB7M,mBAAlB,CAAsC,gBAAtC,EAAwD2Z,SAAxD,CAAkE,MAAM;MAC9E,KAAK9M,YAAL,CAAkBlM,SAAlB,GAA8BhD,IAA9B,CAAoC6I,MAAD,IAAY;QAAE,KAAKmZ,YAAL,CAAkB/F,IAAlB,CAAuBpT,MAAvB;MAAiC,CAAlF;IACH,CAFS,CAAV;;IAGA,KAAK+Y,wBAAL,CAA8BhN,IAA9B,CAAmCsH,CAAnC;EACH;;EACDmH,sBAAsB,GAAG;IACrB,MAAMnH,CAAC,GAAG,KAAKhN,YAAL,CAAkB7M,mBAAlB,CAAsC,mBAAtC,EAA2D2Z,SAA3D,CAAqE,MAAM;MACjF,KAAK9M,YAAL,CAAkBjM,YAAlB,GAAiCjD,IAAjC,CAAuC8f,SAAD,IAAe;QAAE,KAAKmC,eAAL,CAAqBhG,IAArB,CAA0B6D,SAA1B;MAAuC,CAA9F;IACH,CAFS,CAAV;;IAGA,KAAK8B,wBAAL,CAA8BhN,IAA9B,CAAmCsH,CAAnC;EACH;;EACDgH,oBAAoB,GAAG;IACnB,MAAMhH,CAAC,GAAG,KAAKhN,YAAL,CAAkB7M,mBAAlB,CAAsC,cAAtC,EAAsD2Z,SAAtD,CAAgE,MAAM;MAC5E,KAAK9M,YAAL,CAAkBnM,OAAlB,GAA4B/C,IAA5B,CAAkCwkB,CAAD,IAAO;QACpC,KAAKrhB,IAAL,GAAYqhB,CAAZ;QACA,KAAKrC,UAAL,CAAgBlG,IAAhB,CAAqBuI,CAArB;MACH,CAHD;IAIH,CALS,CAAV;;IAMA,KAAK5C,wBAAL,CAA8BhN,IAA9B,CAAmCsH,CAAnC;EACH;;EACDqH,gBAAgB,GAAG;IACf,MAAMrH,CAAC,GAAG,KAAKhN,YAAL,CAAkB7M,mBAAlB,CAAsC,MAAtC,EAA8C2Z,SAA9C,CAAwD,MAAM;MAAE,KAAKkG,IAAL,CAAUjG,IAAV,CAAe,KAAK,CAApB;IAAyB,CAAzF,CAAV;;IACA,KAAK2F,wBAAL,CAA8BhN,IAA9B,CAAmCsH,CAAnC;EACH;;EACDoH,uBAAuB,GAAG;IACtB,MAAMpH,CAAC,GAAG,KAAKhN,YAAL,CAAkB7M,mBAAlB,CAAsC,aAAtC,EAAqD2Z,SAArD,CAA+D,MAAM,KAAKqG,WAAL,CAAiBpG,IAAjB,CAAsB,KAAK,CAA3B,CAArE,CAAV;;IACA,KAAK2F,wBAAL,CAA8BhN,IAA9B,CAAmCsH,CAAnC;EACH;;EACDiH,qBAAqB,GAAG;IACpB,MAAMrH,MAAM,GAAG,CACX;MAAEW,IAAI,EAAE,OAAR;MAAiBgI,OAAO,EAAE,KAAK5C;IAA/B,CADW,EAEX;MAAEpF,IAAI,EAAE,YAAR;MAAsBgI,OAAO,EAAE,KAAK3C;IAApC,CAFW,EAGX;MAAErF,IAAI,EAAE,UAAR;MAAoBgI,OAAO,EAAE,KAAK1C;IAAlC,CAHW,CAAf;IAKAjG,MAAM,CAAC3U,OAAP,CAAef,CAAC,IAAI;MAChB,MAAM8V,CAAC,GAAG,KAAKhN,YAAL,CAAkB7M,mBAAlB,CAAsC+D,CAAC,CAACqW,IAAxC,EAA8CT,SAA9C,CAAwD,CAAC,CAACnZ,KAAD,CAAD,KAAa;QAC3E;QACA,IAAIA,KAAK,CAAC6hB,OAAN,IAAiB,CAAC,KAAKjD,qBAA3B,EAAkD;UAC9C5e,KAAK,CAAC8hB,IAAN;QACH;;QACDve,CAAC,CAACqe,OAAF,CAAUxI,IAAV,CAAepZ,KAAf;MACH,CANS,CAAV;;MAOA,KAAK+e,wBAAL,CAA8BhN,IAA9B,CAAmCsH,CAAnC;IACH,CATD;EAUH;;EACDsH,oBAAoB,GAAG;IACnB,KAAKoB,YAAL;;IACA,KAAKC,WAAL,CAAiBpJ,OAAjB,CAAyBO,SAAzB,CAAmC,MAAM,KAAK4I,YAAL,EAAzC;EACH;;EACDA,YAAY,GAAG;IACX,MAAME,cAAc,GAAG;MACnB3F,iBAAiB,EAAE,CAAC,KAAKgC,gBADN;MAEnBzB,cAAc,EAAE,KAFG;MAGnBO,UAAU,EAAE,KAHO;MAInBG,aAAa,EAAE,KAJI;MAKnBG,YAAY,EAAE,KALK;MAMnBE,iBAAiB,EAAE,CAAC,KAAKU,gBANN;MAOnBP,WAAW,EAAE,CAAC,KAAKO;IAPA,CAAvB;;IASA,KAAKjS,YAAL,CAAkBhO,YAAlB,GAAiClB,IAAjC,CAAsC,MAAM;MACxC,KAAK6kB,WAAL,CAAiB1d,OAAjB,CAAyB4d,OAAO,IAAI1W,MAAM,CAAC2W,MAAP,CAAcF,cAAd,EAA8BC,OAAO,CAAC7F,UAAR,EAA9B,CAApC;;MACA,KAAKhQ,YAAL,CAAkB9O,aAAlB,CAAgC0kB,cAAhC;IACH,CAHD;EAIH;;AA1XQ;AA4Xb;AACA;AACA;;;AACA/D,MAAM,CAAC6C,qBAAP,GAA+B,CAC3B,wBAD2B,EACD,aADC,EACc,WADd,EAC2B,iBAD3B,EAC8C,gBAD9C,EAE3B,mBAF2B,EAEN,QAFM,EAEI,MAFJ,EAEY,SAFZ,EAEuB,SAFvB,EAEkC,WAFlC,EAE+C,gBAF/C,EAG3B,iBAH2B,EAGR,MAHQ,EAGA,aAHA,CAA/B;AAKA7C,MAAM,CAAC9hB,UAAP,GAAoB,CAChB;EAAEC,IAAI,EAAE/B,SAAR;EAAmB6N,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE,SADI;IAEdiF,SAAS,EAAE,CACPvb,aADO,EAEPuC,gBAFO,EAGPA,gBAHO,EAIP8B,gBAJO,EAKPjJ,oBALO,EAMPmS,iBANO,EAOPc,eAPO,EAQPQ,YARO,EASP3D,aATO,EAUPoG,cAVO,EAWPyB,eAXO,EAYPkC,gBAZO,CAFG;IAgBdyF,QAAQ,EAAG;AAC3B;AACA;AACA;AACA;AACA,GArB8B;IAsBd6C,MAAM,EAAE,CAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GARwB;EAtBM,CAAD;AAAzB,CADgB,CAApB;;AAkCAP,MAAM,CAACjd,cAAP,GAAwB,MAAM,CAC1B;EAAE5E,IAAI,EAAE9B;AAAR,CAD0B,EAE1B;EAAE8B,IAAI,EAAEC;AAAR,CAF0B,EAG1B;EAAED,IAAI,EAAEmP,MAAR;EAAgBpP,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEtC,MAAR;IAAgBoO,IAAI,EAAE,CAAC3N,WAAD;EAAtB,CAAD;AAA5B,CAH0B,EAI1B;EAAE6B,IAAI,EAAEkJ;AAAR,CAJ0B,EAK1B;EAAElJ,IAAI,EAAE3C;AAAR,CAL0B,CAA9B;;AAOAwkB,MAAM,CAACzG,cAAP,GAAwB;EACpB7V,SAAS,EAAE,CAAC;IAAEvF,IAAI,EAAEnC;EAAR,CAAD,CADS;EAEpBwH,QAAQ,EAAE,CAAC;IAAErF,IAAI,EAAEnC;EAAR,CAAD,CAFU;EAGpBoG,IAAI,EAAE,CAAC;IAAEjE,IAAI,EAAEnC;EAAR,CAAD,CAHc;EAIpB0lB,OAAO,EAAE,CAAC;IAAEvjB,IAAI,EAAEnC;EAAR,CAAD,CAJW;EAKpB2lB,OAAO,EAAE,CAAC;IAAExjB,IAAI,EAAEnC;EAAR,CAAD,CALW;EAMpB4lB,WAAW,EAAE,CAAC;IAAEzjB,IAAI,EAAEnC;EAAR,CAAD,CANO;EAOpB4H,SAAS,EAAE,CAAC;IAAEzF,IAAI,EAAEnC,KAAR;IAAeiO,IAAI,EAAE,CAAC,cAAD;EAArB,CAAD,CAPS;EAQpBkW,sBAAsB,EAAE,CAAC;IAAEhiB,IAAI,EAAEnC;EAAR,CAAD,CARJ;EASpBokB,gBAAgB,EAAE,CAAC;IAAEjiB,IAAI,EAAEnC;EAAR,CAAD,CATE;EAUpBqkB,WAAW,EAAE,CAAC;IAAEliB,IAAI,EAAEnC;EAAR,CAAD,CAVO;EAWpB6lB,eAAe,EAAE,CAAC;IAAE1jB,IAAI,EAAEnC;EAAR,CAAD,CAXG;EAYpB8lB,eAAe,EAAE,CAAC;IAAE3jB,IAAI,EAAEnC;EAAR,CAAD,CAZG;EAapB+lB,cAAc,EAAE,CAAC;IAAE5jB,IAAI,EAAEnC;EAAR,CAAD,CAbI;EAcpBskB,iBAAiB,EAAE,CAAC;IAAEniB,IAAI,EAAEnC;EAAR,CAAD,CAdC;EAepBukB,MAAM,EAAE,CAAC;IAAEpiB,IAAI,EAAEnC;EAAR,CAAD,CAfY;EAgBpBwkB,UAAU,EAAE,CAAC;IAAEriB,IAAI,EAAEnC;EAAR,CAAD,CAhBQ;EAiBpB0G,SAAS,EAAE,CAAC;IAAEvE,IAAI,EAAEnC;EAAR,CAAD,CAjBS;EAkBpBqnB,gBAAgB,EAAE,CAAC;IAAEllB,IAAI,EAAEnC;EAAR,CAAD,CAlBE;EAmBpB+iB,SAAS,EAAE,CAAC;IAAE5gB,IAAI,EAAEnC;EAAR,CAAD,CAnBS;EAoBpBykB,cAAc,EAAE,CAAC;IAAEtiB,IAAI,EAAEnC;EAAR,CAAD,CApBI;EAqBpB0kB,qBAAqB,EAAE,CAAC;IAAEviB,IAAI,EAAEnC;EAAR,CAAD,CArBH;EAsBpB2kB,eAAe,EAAE,CAAC;IAAExiB,IAAI,EAAEnC;EAAR,CAAD,CAtBG;EAuBpB4kB,IAAI,EAAE,CAAC;IAAEziB,IAAI,EAAEnC;EAAR,CAAD,CAvBc;EAwBpBimB,WAAW,EAAE,CAAC;IAAE9jB,IAAI,EAAEnC;EAAR,CAAD,CAxBO;EAyBpB8kB,QAAQ,EAAE,CAAC;IAAE3iB,IAAI,EAAEjC;EAAR,CAAD,CAzBU;EA0BpB6kB,aAAa,EAAE,CAAC;IAAE5iB,IAAI,EAAEjC;EAAR,CAAD,CA1BK;EA2BpB8kB,WAAW,EAAE,CAAC;IAAE7iB,IAAI,EAAEjC;EAAR,CAAD,CA3BO;EA4BpBud,YAAY,EAAE,CAAC;IAAEtb,IAAI,EAAEjC;EAAR,CAAD,CA5BM;EA6BpB+kB,YAAY,EAAE,CAAC;IAAE9iB,IAAI,EAAEjC;EAAR,CAAD,CA7BM;EA8BpBglB,eAAe,EAAE,CAAC;IAAE/iB,IAAI,EAAEjC;EAAR,CAAD,CA9BG;EA+BpBilB,IAAI,EAAE,CAAC;IAAEhjB,IAAI,EAAEjC;EAAR,CAAD,CA/Bc;EAgCpBklB,UAAU,EAAE,CAAC;IAAEjjB,IAAI,EAAEjC;EAAR,CAAD,CAhCQ;EAiCpBmlB,QAAQ,EAAE,CAAC;IAAEljB,IAAI,EAAEjC;EAAR,CAAD,CAjCU;EAkCpBolB,WAAW,EAAE,CAAC;IAAEnjB,IAAI,EAAEjC;EAAR,CAAD,CAlCO;EAmCpB4nB,WAAW,EAAE,CAAC;IAAE3lB,IAAI,EAAE5B,eAAR;IAAyB0N,IAAI,EAAE,CAACgU,aAAD;EAA/B,CAAD;AAnCO,CAAxB;AAsCA,IAAIiG,QAAQ,GAAG,CAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAN,CAAgB;EACZ9lB,WAAW,CAACmS,cAAD,EAAiB;IACxB,KAAKA,cAAL,GAAsBA,cAAtB;IACA;AACR;AACA;IACQ;;IACA,KAAK5M,SAAL,GAAiB,KAAjB;IACA;AACR;AACA;;IACQ,KAAKU,OAAL,GAAe,IAAf;IACA;AACR;AACA;;IACQ,KAAK8f,cAAL,GAAsB,IAAtB;IACA;AACR;AACA;;IACQ,KAAK1U,OAAL,GAAe,CAAf;IACA;AACR;AACA;AACA;AACA;AACA;;IACQ,KAAKnL,MAAL,GAAc,CAAd;IACA;AACR;AACA;IACQ;;IACA,KAAKZ,SAAL,GAAiB,IAAjB;IACA;AACR;AACA;;IACQ,KAAK0gB,eAAL,GAAuB,IAAIpoB,YAAJ,EAAvB;IACA;AACR;AACA;;IACQ,KAAKqoB,WAAL,GAAmB,IAAIroB,YAAJ,EAAnB;IACA;AACR;AACA;;IACQ,KAAKsoB,cAAL,GAAsB,IAAItoB,YAAJ,EAAtB;IACA;AACR;AACA;;IACQ,KAAKuoB,gBAAL,GAAwB,IAAIvoB,YAAJ,EAAxB;IACA;AACR;AACA;;IACQ,KAAK6d,SAAL,GAAiB,IAAI7d,YAAJ,EAAjB;IACA;AACR;AACA;IACQ;;IACA,KAAK2d,IAAL,GAAY,IAAI3d,YAAJ,EAAZ;IACA;AACR;AACA;;IACQ,KAAK4d,OAAL,GAAe,IAAI5d,YAAJ,EAAf;IACA;AACR;AACA;;IACQ,KAAKie,SAAL,GAAiB,IAAIje,YAAJ,EAAjB;IACA;AACR;AACA;;IACQ,KAAKge,QAAL,GAAgB,IAAIhe,YAAJ,EAAhB;IACA;;IACA,KAAK0U,UAAL,GAAkB,IAAInU,SAAJ,EAAlB;IACA,KAAKioB,oBAAL,GAA4B,KAA5B;IACA,KAAK5D,wBAAL,GAAgC,EAAhC;IACA,KAAK6D,kBAAL,GAA0B,IAAI3nB,aAAJ,CAAkB,CAAlB,CAA1B;IACA,KAAKmc,GAAL,GAAW,CAACgL,QAAQ,EAAT,EAAa/K,QAAb,EAAX;EACH;EACD;;;EACAoI,kBAAkB,GAAG;IACjB,KAAKoD,sBAAL;IACA,KAAKhU,UAAL,CAAgB+J,OAAhB,CAAwBO,SAAxB,CAAkC,MAAM,KAAK0J,sBAAL,EAAxC;EACH;;EACDA,sBAAsB,GAAG;IACrB,IAAI,KAAKhU,UAAL,CAAgB/C,MAAhB,GAAyB,CAA7B,EAAgC;MAC5B,MAAM,IAAIuE,KAAJ,CAAU,wCAAV,CAAN;IACH;;IACD,KAAKxB,UAAL,CAAgBvK,OAAhB,CAAwBuI,MAAM,IAAI;MAC9BA,MAAM,CAACoC,UAAP,GAAoB,IAApB;IACH,CAFD;EAGH;EACD;;;EACA0J,WAAW,CAACC,OAAD,EAAU;IACjB,IAAI,OAAO,KAAKlX,QAAZ,KAAyB,QAA7B,EAAuC;MACnC,KAAKA,QAAL,GAAgBohB,MAAM,CAAC,KAAKphB,QAAN,CAAtB;IACH;;IACD,IAAI,OAAO,KAAKE,SAAZ,KAA0B,QAA9B,EAAwC;MACpC,KAAKA,SAAL,GAAiBkhB,MAAM,CAAC,KAAKlhB,SAAN,CAAvB;IACH;;IACD,IAAI,OAAO,KAAKF,QAAZ,KAAyB,QAAzB,IAAqC,OAAO,KAAKE,SAAZ,KAA0B,QAAnE,EAA6E;MACzE;IACH;;IACD,IAAI,CAAC,KAAK+gB,oBAAV,EAAgC;MAC5B,KAAKjU,cAAL,CAAoBL,SAApB,CAA8B,IAA9B;;MACA,KAAK0U,uBAAL;;MACA,KAAKJ,oBAAL,GAA4B,IAA5B;;MACA,KAAKhJ,kBAAL;;MACA;IACH,CAhBgB,CAiBjB;;;IACA,IAAIf,OAAO,CAAC,UAAD,CAAP,IAAuBA,OAAO,CAAC,WAAD,CAAlC,EAAiD;MAC7C,KAAKlK,cAAL,CAAoB5B,oBAApB,CAAyC,IAAzC;;MACA,KAAKiW,uBAAL;IACH;;IACD,IAAInK,OAAO,CAAC,OAAD,CAAX,EAAsB;MAClB,KAAKlK,cAAL,CAAoB1B,WAApB,CAAgC,IAAhC;IACH;;IACD,IAAI4L,OAAO,CAAC,OAAD,CAAX,EAAsB;MAClB,KAAKlK,cAAL,CAAoBvB,WAApB,CAAgC,IAAhC;IACH;;IACD,IAAIyL,OAAO,CAAC,WAAD,CAAX,EAA0B;MACtB,KAAKlK,cAAL,CAAoBpB,eAApB,CAAoC,IAApC;IACH;;IACD,IAAIsL,OAAO,CAAC,SAAD,CAAX,EAAwB;MACpB,KAAKlK,cAAL,CAAoBnB,UAApB,CAA+B,IAA/B;IACH;;IACD,IAAIqL,OAAO,CAAC,SAAD,CAAX,EAAwB;MACpB,KAAKlK,cAAL,CAAoBhB,aAApB,CAAkC,IAAlC;IACH;;IACD,IAAIkL,OAAO,CAAC,SAAD,CAAX,EAAwB;MACpB,KAAKlK,cAAL,CAAoBb,aAApB,CAAkC,IAAlC;IACH;;IACD,IAAI+K,OAAO,CAAC,QAAD,CAAX,EAAuB;MACnB,KAAKlK,cAAL,CAAoBZ,YAApB,CAAiC,IAAjC;IACH;;IACD,IAAI8K,OAAO,CAAC,WAAD,CAAX,EAA0B;MACtB,KAAKlK,cAAL,CAAoBV,eAApB,CAAoC,IAApC;IACH;;IACD,IAAI4K,OAAO,CAAC,WAAD,CAAX,EAA0B;MACtB,KAAKlK,cAAL,CAAoBR,eAApB,CAAoC,IAApC;IACH,CAhDgB,CAiDjB;;EACH;EACD;;;EACA0M,oBAAoB,GAAG;IACnB,OAAO,KAAKgI,kBAAL,CAAwBI,YAAxB,EAAP;EACH;;EACDD,uBAAuB,GAAG;IACtB,KAAKH,kBAAL,CAAwB/iB,IAAxB,CAA6B;MAAER,MAAM,EAAE;QAAEoC,GAAG,EAAE,KAAKC,QAAZ;QAAsBC,GAAG,EAAE,KAAKC;MAAhC;IAAV,CAA7B;EACH;;EACD+X,kBAAkB,GAAG;IACjB,MAAMsJ,EAAE,GAAG,KAAKvU,cAAL,CAAoBrL,qBAApB,CAA0C,OAA1C,EAAmD,IAAnD,EAAyD8V,SAAzD,CAAmE,MAAM;MAChF,IAAI,KAAKmJ,cAAT,EAAyB;QACrB,KAAKzT,UAAL,CAAgBvK,OAAhB,CAAwBuK,UAAU,IAAIA,UAAU,CAACG,IAAX,EAAtC;MACH;;MACD,KAAKwT,WAAL,CAAiBpJ,IAAjB,CAAsB,IAAtB;IACH,CALU,CAAX;;IAMA,KAAK2F,wBAAL,CAA8BhN,IAA9B,CAAmCkR,EAAnC;;IACA,MAAMC,GAAG,GAAG,KAAKxU,cAAL,CAAoBrL,qBAApB,CAA0C,UAA1C,EAAsD,IAAtD,EAA4D8V,SAA5D,CAAsE,MAAM;MACpF,KAAKsJ,cAAL,CAAoBrJ,IAApB,CAAyB,IAAzB;IACH,CAFW,CAAZ;;IAGA,KAAK2F,wBAAL,CAA8BhN,IAA9B,CAAmCmR,GAAnC;;IACA,MAAMC,EAAE,GAAG,KAAKzU,cAAL,CAAoBrL,qBAApB,CAA0C,YAA1C,EAAwD,IAAxD,EAA8D8V,SAA9D,CAAwE,MAAM;MACrF,KAAKuJ,gBAAL,CAAsBtJ,IAAtB,CAA2B,IAA3B;IACH,CAFU,CAAX;;IAGA,KAAK2F,wBAAL,CAA8BhN,IAA9B,CAAmCoR,EAAnC;;IACA,MAAMC,EAAE,GAAG,KAAK1U,cAAL,CAAoBrL,qBAApB,CAA0C,WAA1C,EAAuD,IAAvD,EACN8V,SADM,CACI5V,CAAC,IAAI,KAAKyU,SAAL,CAAeoB,IAAf,CAAoB7V,CAApB,CADT,CAAX;;IAEA,KAAKwb,wBAAL,CAA8BhN,IAA9B,CAAmCqR,EAAnC;;IACA,MAAMrf,CAAC,GAAG,KAAK2K,cAAL,CAAoBrL,qBAApB,CAA0C,MAA1C,EAAkD,IAAlD,EACL8V,SADK,CACK5V,CAAC,IAAI,KAAKuU,IAAL,CAAUsB,IAAV,CAAe7V,CAAf,CADV,CAAV;;IAEA,KAAKwb,wBAAL,CAA8BhN,IAA9B,CAAmChO,CAAnC;;IACA,MAAMsf,EAAE,GAAG,KAAK3U,cAAL,CAAoBrL,qBAApB,CAA0C,SAA1C,EAAqD,IAArD,EACN8V,SADM,CACI5V,CAAC,IAAI,KAAKwU,OAAL,CAAaqB,IAAb,CAAkB7V,CAAlB,CADT,CAAX;;IAEA,KAAKwb,wBAAL,CAA8BhN,IAA9B,CAAmCsR,EAAnC;;IACA,MAAMC,KAAK,GAAG,KAAK5U,cAAL,CAAoBrL,qBAApB,CAA0C,WAA1C,EAAuD,IAAvD,EACT8V,SADS,CACC5V,CAAC,IAAI,KAAK6U,SAAL,CAAegB,IAAf,CAAoB7V,CAApB,CADN,CAAd;;IAEA,KAAKwb,wBAAL,CAA8BhN,IAA9B,CAAmCuR,KAAnC;;IACA,MAAMC,IAAI,GAAG,KAAK7U,cAAL,CAAoBrL,qBAApB,CAA0C,UAA1C,EAAsD,IAAtD,EACR8V,SADQ,CACE5V,CAAC,IAAI,KAAK4U,QAAL,CAAciB,IAAd,CAAmB7V,CAAnB,CADP,CAAb;;IAEA,KAAKwb,wBAAL,CAA8BhN,IAA9B,CAAmCwR,IAAnC;;IACA,MAAMC,MAAM,GAAG,KAAK9U,cAAL,CAAoBrL,qBAApB,CAA0C,mBAA1C,EAA+D,IAA/D,EACV8V,SADU,CACA,MAAM;MACjB,KAAKoJ,eAAL,CAAqBnJ,IAArB,CAA0B,KAAKhL,SAA/B;IACH,CAHc,CAAf;;IAIA,KAAK2Q,wBAAL,CAA8BhN,IAA9B,CAAmCyR,MAAnC;EACH;EACD;;;EACAnd,EAAE,GAAG;IAAE,OAAO,KAAK+Q,GAAZ;EAAkB;EACzB;;;EACAC,QAAQ,GAAG;IAAE,OAAO,eAAe,KAAKD,GAAL,CAASC,QAAT,EAAtB;EAA4C;EACzD;;;EACAE,WAAW,GAAG;IACV,KAAK7I,cAAL,CAAoBhC,YAApB,CAAiC,IAAjC,EADU,CAEV;;;IACA,KAAKqS,wBAAL,CAA8Bza,OAA9B,CAAuC+U,CAAD,IAAOA,CAAC,CAACC,WAAF,EAA7C;EACH;;AAlMW;;AAoMhB+I,SAAS,CAACjmB,UAAV,GAAuB,CACnB;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE,YADI;IAEdiF,SAAS,EAAE,CACP;MAAEC,OAAO,EAAEpX,iBAAX;MAA8BqX,WAAW,EAAEhiB,UAAU,CAAC,MAAM0nB,SAAP;IAArD,CADO;EAFG,CAAD;AAAzB,CADmB,CAAvB;;AAQAA,SAAS,CAACphB,cAAV,GAA2B,MAAM,CAC7B;EAAE5E,IAAI,EAAE+P;AAAR,CAD6B,CAAjC;;AAGAiW,SAAS,CAAC5K,cAAV,GAA2B;EACvB/V,QAAQ,EAAE,CAAC;IAAErF,IAAI,EAAEnC;EAAR,CAAD,CADa;EAEvB0H,SAAS,EAAE,CAAC;IAAEvF,IAAI,EAAEnC;EAAR,CAAD,CAFY;EAGvBgT,KAAK,EAAE,CAAC;IAAE7Q,IAAI,EAAEnC;EAAR,CAAD,CAHgB;EAIvBmT,KAAK,EAAE,CAAC;IAAEhR,IAAI,EAAEnC;EAAR,CAAD,CAJgB;EAKvB4H,SAAS,EAAE,CAAC;IAAEzF,IAAI,EAAEnC,KAAR;IAAeiO,IAAI,EAAE,CAAC,iBAAD;EAArB,CAAD,CALY;EAMvBsF,OAAO,EAAE,CAAC;IAAEpR,IAAI,EAAEnC;EAAR,CAAD,CANc;EAOvBsI,OAAO,EAAE,CAAC;IAAEnG,IAAI,EAAEnC;EAAR,CAAD,CAPc;EAQvBooB,cAAc,EAAE,CAAC;IAAEjmB,IAAI,EAAEnC;EAAR,CAAD,CARO;EASvB0T,OAAO,EAAE,CAAC;IAAEvR,IAAI,EAAEnC;EAAR,CAAD,CATc;EAUvBuI,MAAM,EAAE,CAAC;IAAEpG,IAAI,EAAEnC;EAAR,CAAD,CAVe;EAWvB2H,SAAS,EAAE,CAAC;IAAExF,IAAI,EAAEnC,KAAR;IAAeiO,IAAI,EAAE,CAAC,iBAAD;EAArB,CAAD,CAXY;EAYvBiG,SAAS,EAAE,CAAC;IAAE/R,IAAI,EAAEnC;EAAR,CAAD,CAZY;EAavBqoB,eAAe,EAAE,CAAC;IAAElmB,IAAI,EAAEjC;EAAR,CAAD,CAbM;EAcvBooB,WAAW,EAAE,CAAC;IAAEnmB,IAAI,EAAEjC;EAAR,CAAD,CAdU;EAevBqoB,cAAc,EAAE,CAAC;IAAEpmB,IAAI,EAAEjC;EAAR,CAAD,CAfO;EAgBvBsoB,gBAAgB,EAAE,CAAC;IAAErmB,IAAI,EAAEjC;EAAR,CAAD,CAhBK;EAiBvB4d,SAAS,EAAE,CAAC;IAAE3b,IAAI,EAAEjC;EAAR,CAAD,CAjBY;EAkBvB0d,IAAI,EAAE,CAAC;IAAEzb,IAAI,EAAEjC;EAAR,CAAD,CAlBiB;EAmBvB2d,OAAO,EAAE,CAAC;IAAE1b,IAAI,EAAEjC;EAAR,CAAD,CAnBc;EAoBvBge,SAAS,EAAE,CAAC;IAAE/b,IAAI,EAAEjC;EAAR,CAAD,CApBY;EAqBvB+d,QAAQ,EAAE,CAAC;IAAE9b,IAAI,EAAEjC;EAAR,CAAD,CArBa;EAsBvByU,UAAU,EAAE,CAAC;IAAExS,IAAI,EAAE5B,eAAR;IAAyB0N,IAAI,EAAE,CAAC8S,aAAD;EAA/B,CAAD;AAtBW,CAA3B;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMwI,UAAN,CAAiB;EACblnB,WAAW,CAACmnB,eAAD,EAAkB;IACzB,KAAKA,eAAL,GAAuBA,eAAvB;IACA;AACR;AACA;;IACQ,KAAK7hB,SAAL,GAAiB,IAAjB;IACA;AACR;AACA;AACA;IACQ;;IACA,KAAKC,SAAL,GAAiB,KAAjB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,QAAL,GAAgB,KAAhB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAK8Q,QAAL,GAAgB,KAAhB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKC,KAAL,GAAa,EAAb;IACA;AACR;AACA;;IACQ,KAAK6Q,SAAL,GAAiB,IAAIxpB,YAAJ,EAAjB;IACA;AACR;AACA;;IACQ,KAAKypB,YAAL,GAAoB,IAAIzpB,YAAJ,EAApB;IACA;AACR;AACA;;IACQ,KAAK0pB,QAAL,GAAgB,IAAI1pB,YAAJ,EAAhB;IACA;AACR;AACA;;IACQ,KAAK2pB,WAAL,GAAmB,IAAI3pB,YAAJ,EAAnB;IACA;AACR;AACA;;IACQ,KAAK4pB,aAAL,GAAqB,IAAI5pB,YAAJ,EAArB;IACA;AACR;AACA;;IACQ,KAAK6pB,aAAL,GAAqB,IAAI7pB,YAAJ,EAArB;IACA;AACR;AACA;;IACQ,KAAK8pB,aAAL,GAAqB,IAAI9pB,YAAJ,EAArB;IACA;AACR;AACA;;IACQ,KAAK+pB,YAAL,GAAoB,IAAI/pB,YAAJ,EAApB;IACA;AACR;AACA;;IACQ,KAAKgqB,aAAL,GAAqB,IAAIhqB,YAAJ,EAArB;IACA;AACR;AACA;;IACQ,KAAKiqB,WAAL,GAAmB,IAAIjqB,YAAJ,EAAnB;IACA;AACR;AACA;;IACQ,KAAKkqB,cAAL,GAAsB,IAAIlqB,YAAJ,EAAtB;IACA;AACR;AACA;;IACQ,KAAKmqB,eAAL,GAAuB,IAAInqB,YAAJ,EAAvB;IACA,KAAKoqB,sBAAL,GAA8B,KAA9B;IACA,KAAK9K,cAAL,GAAsB,EAAtB;EACH;EACD;;;EACAgG,kBAAkB,GAAG;IACjB,IAAI,CAAC,KAAK8E,sBAAV,EAAkC;MAC9B,KAAKC,KAAL;IACH;EACJ;;EACD7L,WAAW,CAACC,OAAD,EAAU;IACjB,IAAI,CAAC,KAAK2L,sBAAV,EAAkC;MAC9B,KAAKC,KAAL;;MACA;IACH;;IACD,KAAKd,eAAL,CAAqBzQ,iBAArB,CAAuC,IAAvC,EAA6C,KAAKgJ,qBAAL,CAA2BrD,OAA3B,CAA7C;EACH;;EACD4L,KAAK,GAAG;IACJ,KAAKd,eAAL,CAAqBhR,UAArB,CAAgC,IAAhC;;IACA,KAAK6R,sBAAL,GAA8B,IAA9B;;IACA,KAAK5K,kBAAL;EACH;;EACDA,kBAAkB,GAAG;IACjB,MAAM8K,QAAQ,GAAG,CACb;MAAE7K,IAAI,EAAE,OAAR;MAAiBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAK8J,SAAL,CAAevK,IAAf,CAAoBS,EAApB;IAAlC,CADa,EAEb;MAAED,IAAI,EAAE,UAAR;MAAoBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAK+J,YAAL,CAAkBxK,IAAlB,CAAuBS,EAAvB;IAArC,CAFa,EAGb;MAAED,IAAI,EAAE,MAAR;MAAgBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKgK,QAAL,CAAczK,IAAd,CAAmBS,EAAnB;IAAjC,CAHa,EAIb;MAAED,IAAI,EAAE,SAAR;MAAmBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKiK,WAAL,CAAiB1K,IAAjB,CAAsBS,EAAtB;IAApC,CAJa,EAKb;MAAED,IAAI,EAAE,WAAR;MAAqBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKkK,aAAL,CAAmB3K,IAAnB,CAAwBS,EAAxB;IAAtC,CALa,EAMb;MAAED,IAAI,EAAE,WAAR;MAAqBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKmK,aAAL,CAAmB5K,IAAnB,CAAwBS,EAAxB;IAAtC,CANa,EAOb;MAAED,IAAI,EAAE,WAAR;MAAqBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKoK,aAAL,CAAmB7K,IAAnB,CAAwBS,EAAxB;IAAtC,CAPa,EAQb;MAAED,IAAI,EAAE,UAAR;MAAoBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKqK,YAAL,CAAkB9K,IAAlB,CAAuBS,EAAvB;IAArC,CARa,EASb;MAAED,IAAI,EAAE,WAAR;MAAqBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKsK,aAAL,CAAmB/K,IAAnB,CAAwBS,EAAxB;IAAtC,CATa,EAUb;MAAED,IAAI,EAAE,SAAR;MAAmBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKuK,WAAL,CAAiBhL,IAAjB,CAAsBS,EAAtB;IAApC,CAVa,EAWb;MAAED,IAAI,EAAE,YAAR;MAAsBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKwK,cAAL,CAAoBjL,IAApB,CAAyBS,EAAzB;IAAvC,CAXa,CAAjB;IAaA4K,QAAQ,CAACngB,OAAT,CAAkBwV,GAAD,IAAS;MACtB,MAAMC,EAAE,GAAG,KAAK2J,eAAL,CAAqBrgB,qBAArB,CAA2CyW,GAAG,CAACF,IAA/C,EAAqD,IAArD,EAA2DT,SAA3D,CAAqEW,GAAG,CAACrJ,OAAzE,CAAX;;MACA,KAAKgJ,cAAL,CAAoB1H,IAApB,CAAyBgI,EAAzB;IACH,CAHD;;IAIA,KAAK2J,eAAL,CAAqBnQ,yBAArB,CAA+C,IAA/C,EACKpW,IADL,CACUunB,MAAM,IAAI;MAChB,MAAM3K,EAAE,GAAG2K,MAAM,CAACvL,SAAP,CAAiBwL,SAAS,IAAI,KAAKL,eAAL,CAAqBlL,IAArB,CAA0BuL,SAA1B,CAA9B,CAAX;;MACA,KAAKlL,cAAL,CAAoB1H,IAApB,CAAyBgI,EAAzB;IACH,CAJD;EAKH;;EACDkC,qBAAqB,CAACrD,OAAD,EAAU;IAC3B,OAAOpN,MAAM,CAACC,IAAP,CAAYmN,OAAZ,EACFlN,MADE,CACKC,CAAC,IAAI8X,UAAU,CAACmB,yBAAX,CAAqCngB,OAArC,CAA6CkH,CAA7C,MAAoD,CAAC,CAD/D,EAEFwO,MAFE,CAEK,CAACL,GAAD,EAAMnO,CAAN,KAAY;MACpBmO,GAAG,CAACnO,CAAD,CAAH,GAASiN,OAAO,CAACjN,CAAD,CAAP,CAAWqN,YAApB;MACA,OAAOc,GAAP;IACH,CALM,EAKJ,EALI,CAAP;EAMH;EACD;;;EACAzT,EAAE,GAAG;IAAE,OAAO,KAAK+Q,GAAZ;EAAkB;EACzB;;;EACAG,WAAW,GAAG;IACV,KAAKmM,eAAL,CAAqBxQ,aAArB,CAAmC,IAAnC,EADU,CAEV;;;IACA,KAAKuG,cAAL,CAAoBnV,OAApB,CAA6B+U,CAAD,IAAOA,CAAC,CAACC,WAAF,EAAnC;EACH;;EACDnG,OAAO,GAAG;IACN,OAAO,KAAKuQ,eAAL,CAAqBvQ,OAArB,CAA6B,IAA7B,CAAP;EACH;;EACDE,QAAQ,GAAG;IACP,OAAO,KAAKqQ,eAAL,CAAqBrQ,QAArB,CAA8B,IAA9B,CAAP;EACH;;AAxJY;;AA0JjBoQ,UAAU,CAACmB,yBAAX,GAAuC,CACnC,WADmC,EACtB,WADsB,EACT,UADS,EACG,WADH,EACgB,aADhB,EAC+B,UAD/B,EAC2C,MAD3C,EACmD,KADnD,EAEnC,OAFmC,EAE1B,aAF0B,EAEX,eAFW,EAEM,cAFN,EAEsB,SAFtB,EAEiC,QAFjC,EAE2C,WAF3C,EAGnC,UAHmC,EAGvB,SAHuB,CAAvC;AAKAnB,UAAU,CAACrnB,UAAX,GAAwB,CACpB;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE;EADI,CAAD;AAAzB,CADoB,CAAxB;;AAKAiM,UAAU,CAACxiB,cAAX,GAA4B,MAAM,CAC9B;EAAE5E,IAAI,EAAEmW;AAAR,CAD8B,CAAlC;;AAGAiR,UAAU,CAAChM,cAAX,GAA4B;EACxB5V,SAAS,EAAE,CAAC;IAAExF,IAAI,EAAEnC;EAAR,CAAD,CADa;EAExB4H,SAAS,EAAE,CAAC;IAAEzF,IAAI,EAAEnC,KAAR;IAAeiO,IAAI,EAAE,CAAC,eAAD;EAArB,CAAD,CAFa;EAGxBpG,QAAQ,EAAE,CAAC;IAAE1F,IAAI,EAAEnC;EAAR,CAAD,CAHc;EAIxB8H,SAAS,EAAE,CAAC;IAAE3F,IAAI,EAAEnC;EAAR,CAAD,CAJa;EAKxB+H,WAAW,EAAE,CAAC;IAAE5F,IAAI,EAAEnC;EAAR,CAAD,CALW;EAMxB2Y,QAAQ,EAAE,CAAC;IAAExW,IAAI,EAAEnC;EAAR,CAAD,CANc;EAOxB4Y,KAAK,EAAE,CAAC;IAAEzW,IAAI,EAAEnC;EAAR,CAAD,CAPiB;EAQxBiI,WAAW,EAAE,CAAC;IAAE9F,IAAI,EAAEnC;EAAR,CAAD,CARW;EASxBkI,aAAa,EAAE,CAAC;IAAE/F,IAAI,EAAEnC;EAAR,CAAD,CATS;EAUxBqI,YAAY,EAAE,CAAC;IAAElG,IAAI,EAAEnC;EAAR,CAAD,CAVU;EAWxBsI,OAAO,EAAE,CAAC;IAAEnG,IAAI,EAAEnC;EAAR,CAAD,CAXe;EAYxBuI,MAAM,EAAE,CAAC;IAAEpG,IAAI,EAAEnC;EAAR,CAAD,CAZgB;EAaxBypB,SAAS,EAAE,CAAC;IAAEtnB,IAAI,EAAEjC;EAAR,CAAD,CAba;EAcxBwpB,YAAY,EAAE,CAAC;IAAEvnB,IAAI,EAAEjC;EAAR,CAAD,CAdU;EAexBypB,QAAQ,EAAE,CAAC;IAAExnB,IAAI,EAAEjC;EAAR,CAAD,CAfc;EAgBxB0pB,WAAW,EAAE,CAAC;IAAEznB,IAAI,EAAEjC;EAAR,CAAD,CAhBW;EAiBxB2pB,aAAa,EAAE,CAAC;IAAE1nB,IAAI,EAAEjC;EAAR,CAAD,CAjBS;EAkBxB4pB,aAAa,EAAE,CAAC;IAAE3nB,IAAI,EAAEjC;EAAR,CAAD,CAlBS;EAmBxB6pB,aAAa,EAAE,CAAC;IAAE5nB,IAAI,EAAEjC;EAAR,CAAD,CAnBS;EAoBxB8pB,YAAY,EAAE,CAAC;IAAE7nB,IAAI,EAAEjC;EAAR,CAAD,CApBU;EAqBxB+pB,aAAa,EAAE,CAAC;IAAE9nB,IAAI,EAAEjC;EAAR,CAAD,CArBS;EAsBxBgqB,WAAW,EAAE,CAAC;IAAE/nB,IAAI,EAAEjC;EAAR,CAAD,CAtBW;EAuBxBiqB,cAAc,EAAE,CAAC;IAAEhoB,IAAI,EAAEjC;EAAR,CAAD,CAvBQ;EAwBxBkqB,eAAe,EAAE,CAAC;IAAEjoB,IAAI,EAAEjC;EAAR,CAAD;AAxBO,CAA5B;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMyqB,eAAN,CAAsB;EAClBvN,QAAQ,GAAG;IACP,IAAI,KAAK3E,IAAL,IAAa,IAAjB,EAAuB;MACnB,MAAM,IAAItC,KAAJ,CAAU,gCAAV,CAAN;IACH;EACJ;;AALiB;;AAOtBwU,eAAe,CAACzoB,UAAhB,GAA6B,CACzB;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IAAEqP,QAAQ,EAAE;EAAZ,CAAD;AAAzB,CADyB,CAA7B;AAGAqN,eAAe,CAACpN,cAAhB,GAAiC;EAC7B5C,aAAa,EAAE,CAAC;IAAExY,IAAI,EAAEnC;EAAR,CAAD,CADc;EAE7B4a,MAAM,EAAE,CAAC;IAAEzY,IAAI,EAAEnC;EAAR,CAAD,CAFqB;EAG7B6a,MAAM,EAAE,CAAC;IAAE1Y,IAAI,EAAEnC;EAAR,CAAD,CAHqB;EAI7Bgb,OAAO,EAAE,CAAC;IAAE7Y,IAAI,EAAEnC;EAAR,CAAD,CAJoB;EAK7Bib,OAAO,EAAE,CAAC;IAAE9Y,IAAI,EAAEnC;EAAR,CAAD,CALoB;EAM7B8H,SAAS,EAAE,CAAC;IAAE3F,IAAI,EAAEnC;EAAR,CAAD,CANkB;EAO7B+H,WAAW,EAAE,CAAC;IAAE5F,IAAI,EAAEnC;EAAR,CAAD,CAPgB;EAQ7ByY,IAAI,EAAE,CAAC;IAAEtW,IAAI,EAAEnC;EAAR,CAAD,CARuB;EAS7Bkb,QAAQ,EAAE,CAAC;IAAE/Y,IAAI,EAAEnC;EAAR,CAAD,CATmB;EAU7Bmb,KAAK,EAAE,CAAC;IAAEhZ,IAAI,EAAEnC;EAAR,CAAD,CAVsB;EAW7BiI,WAAW,EAAE,CAAC;IAAE9F,IAAI,EAAEnC;EAAR,CAAD,CAXgB;EAY7BkI,aAAa,EAAE,CAAC;IAAE/F,IAAI,EAAEnC;EAAR,CAAD,CAZc;EAa7BqI,YAAY,EAAE,CAAC;IAAElG,IAAI,EAAEnC;EAAR,CAAD;AAbe,CAAjC;AAgBA;AACA;AACA;AACA;;AACA,MAAM4qB,gBAAN,CAAuB;EACnBvoB,WAAW,GAAG;IACV;AACR;AACA;IACQ,KAAKwoB,eAAL,GAAuB,IAAI5qB,YAAJ,EAAvB;EACH;;EACDwe,WAAW,CAACC,OAAD,EAAU;IACjB;IACA,IAAIA,OAAO,CAAC,UAAD,CAAP,IAAuBA,OAAO,CAAC,WAAD,CAAlC,EAAiD;MAC7C,KAAKmM,eAAL,CAAqB3L,IAArB,CAA0B;QACtB3X,GAAG,EAAEmX,OAAO,CAAC,UAAD,CAAP,GAAsBA,OAAO,CAAC,UAAD,CAAP,CAAoBI,YAA1C,GAAyD,KAAKtX,QAD7C;QAEtBC,GAAG,EAAEiX,OAAO,CAAC,WAAD,CAAP,GAAuBA,OAAO,CAAC,WAAD,CAAP,CAAqBI,YAA5C,GAA2D,KAAKpX;MAF/C,CAA1B;IAIH,CAPgB,CAQjB;;EACH;EACD;;;EACAgZ,oBAAoB,GAAG;IACnB,OAAO,KAAKmK,eAAL,CAAqBnf,IAArB,CAA0B9J,SAAS,CAAC;MAAE2F,GAAG,EAAE,KAAKC,QAAZ;MAAsBC,GAAG,EAAE,KAAKC;IAAhC,CAAD,CAAnC,EAAkFjG,GAAG,CAAC2S,QAAQ,KAAK;MAAEjP,MAAM,EAAEiP;IAAV,CAAL,CAAT,CAArF,CAAP;EACH;;AApBkB;;AAsBvBwW,gBAAgB,CAAC1oB,UAAjB,GAA8B,CAC1B;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE,oBADI;IAEdiF,SAAS,EAAE,CACP;MAAEC,OAAO,EAAEpX,iBAAX;MAA8BqX,WAAW,EAAEhiB,UAAU,CAAC,MAAMmqB,gBAAP;IAArD,CADO;EAFG,CAAD;AAAzB,CAD0B,CAA9B;;AAQAA,gBAAgB,CAAC7jB,cAAjB,GAAkC,MAAM,EAAxC;;AACA6jB,gBAAgB,CAACrN,cAAjB,GAAkC;EAC9B/V,QAAQ,EAAE,CAAC;IAAErF,IAAI,EAAEnC;EAAR,CAAD,CADoB;EAE9B0H,SAAS,EAAE,CAAC;IAAEvF,IAAI,EAAEnC;EAAR,CAAD,CAFmB;EAG9B6qB,eAAe,EAAE,CAAC;IAAE1oB,IAAI,EAAEjC;EAAR,CAAD;AAHa,CAAlC;AAMA,IAAI4qB,UAAU,GAAG,CAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAN,CAAkB;EACd1oB,WAAW,CAAC2oB,gBAAD,EAAmB;IAC1B,KAAKA,gBAAL,GAAwBA,gBAAxB;IACA;AACR;AACA;;IACQ,KAAKrjB,SAAL,GAAiB,IAAjB;IACA;AACR;AACA;AACA;IACQ;;IACA,KAAKC,SAAL,GAAiB,KAAjB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,QAAL,GAAgB,KAAhB;IACA;AACR;AACA;AACA;AACA;AACA;;IACQ,KAAK8Q,QAAL,GAAgB,KAAhB;IACA;AACR;AACA;;IACQ,KAAKrQ,OAAL,GAAe,IAAf;IACA;AACR;AACA;;IACQ,KAAK2iB,SAAL,GAAiB,IAAIhrB,YAAJ,EAAjB;IACA;AACR;AACA;;IACQ,KAAKirB,YAAL,GAAoB,IAAIjrB,YAAJ,EAApB;IACA;AACR;AACA;;IACQ,KAAKkrB,QAAL,GAAgB,IAAIlrB,YAAJ,EAAhB;IACA;AACR;AACA;;IACQ,KAAKmrB,WAAL,GAAmB,IAAInrB,YAAJ,EAAnB;IACA;AACR;AACA;;IACQ,KAAKorB,aAAL,GAAqB,IAAIprB,YAAJ,EAArB;IACA;AACR;AACA;;IACQ,KAAKqrB,aAAL,GAAqB,IAAIrrB,YAAJ,EAArB;IACA;AACR;AACA;;IACQ,KAAKsrB,aAAL,GAAqB,IAAItrB,YAAJ,EAArB;IACA;AACR;AACA;;IACQ,KAAKurB,YAAL,GAAoB,IAAIvrB,YAAJ,EAApB;IACA;AACR;AACA;;IACQ,KAAKwrB,aAAL,GAAqB,IAAIxrB,YAAJ,EAArB;IACA;AACR;AACA;;IACQ,KAAKyrB,WAAL,GAAmB,IAAIzrB,YAAJ,EAAnB;IACA;AACR;AACA;;IACQ,KAAK0rB,cAAL,GAAsB,IAAI1rB,YAAJ,EAAtB;IACA;AACR;AACA;;IACQ,KAAK2rB,cAAL,GAAsB,IAAI3rB,YAAJ,EAAtB;IACA,KAAK4rB,uBAAL,GAA+B,KAA/B;IACA,KAAKtM,cAAL,GAAsB,EAAtB;IACA,KAAKrC,GAAL,GAAW,CAAC4N,UAAU,EAAX,EAAe3N,QAAf,EAAX;EACH;EACD;;;EACAoI,kBAAkB,GAAG;IACjB,IAAI,KAAKuG,MAAL,CAAYla,MAAhB,EAAwB;MACpB,KAAKka,MAAL,CAAY1hB,OAAZ,CAAqB+P,KAAD,IAAW;QAC3B,MAAMgF,CAAC,GAAGhF,KAAK,CAAC0Q,eAAN,CAAsB5L,SAAtB,CAAgC,MAAM;UAAE,KAAK+L,gBAAL,CAAsBxP,oBAAtB,CAA2C,IAA3C;QAAmD,CAA3F,CAAV;;QACA,KAAK+D,cAAL,CAAoB1H,IAApB,CAAyBsH,CAAzB;MACH,CAHD;IAIH;;IACD,IAAI,CAAC,KAAK0M,uBAAV,EAAmC;MAC/B,KAAKvB,KAAL;IACH;;IACD,MAAMyB,QAAQ,GAAG,KAAKD,MAAL,CAAYpN,OAAZ,CAAoBO,SAApB,CAA8B,MAAM,KAAK+L,gBAAL,CAAsBxP,oBAAtB,CAA2C,IAA3C,CAApC,CAAjB;;IACA,KAAK+D,cAAL,CAAoB1H,IAApB,CAAyBkU,QAAzB;;IACA,KAAKf,gBAAL,CAAsBxP,oBAAtB,CAA2C,IAA3C;;IACA,MAAMwQ,OAAO,GAAG,KAAKC,aAAL,CAAmBvN,OAAnB,CAA2BO,SAA3B,CAAqC,MAAM,KAAK+L,gBAAL,CAAsBtP,mBAAtB,CAA0C,IAA1C,CAA3C,CAAhB;;IACA,KAAK6D,cAAL,CAAoB1H,IAApB,CAAyBmU,OAAzB;EACH;;EACDvN,WAAW,CAACC,OAAD,EAAU;IACjB,IAAI,CAAC,KAAKmN,uBAAV,EAAmC;MAC/B,KAAKvB,KAAL;;MACA;IACH;;IACD,MAAMhnB,OAAO,GAAG,EAAhB;IACA,MAAMsb,UAAU,GAAGtN,MAAM,CAACC,IAAP,CAAYmN,OAAZ,EAAqBlN,MAArB,CAA4BC,CAAC,IAAIsZ,WAAW,CAACmB,0BAAZ,CAAuC3hB,OAAvC,CAA+CkH,CAA/C,MAAsD,CAAC,CAAxF,CAAnB;IACAmN,UAAU,CAACxU,OAAX,CAAmBqH,CAAC,IAAInO,OAAO,CAACmO,CAAD,CAAP,GAAaiN,OAAO,CAACjN,CAAD,CAAP,CAAWqN,YAAhD;;IACA,KAAKkM,gBAAL,CAAsBrP,kBAAtB,CAAyC,IAAzC,EAA+CrY,OAA/C;EACH;;EACD2V,OAAO,GAAG;IACN,OAAO,KAAK+R,gBAAL,CAAsB/R,OAAtB,CAA8B,IAA9B,CAAP;EACH;;EACDqR,KAAK,GAAG;IACJ,KAAKU,gBAAL,CAAsB1P,WAAtB,CAAkC,IAAlC;;IACA,KAAKuQ,uBAAL,GAA+B,IAA/B;;IACA,KAAKpM,kBAAL;EACH;;EACDA,kBAAkB,GAAG;IACjB,MAAM8K,QAAQ,GAAG,CACb;MAAE7K,IAAI,EAAE,OAAR;MAAiBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKsL,SAAL,CAAe/L,IAAf,CAAoBS,EAApB;IAAlC,CADa,EAEb;MAAED,IAAI,EAAE,UAAR;MAAoBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKuL,YAAL,CAAkBhM,IAAlB,CAAuBS,EAAvB;IAArC,CAFa,EAGb;MAAED,IAAI,EAAE,MAAR;MAAgBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKwL,QAAL,CAAcjM,IAAd,CAAmBS,EAAnB;IAAjC,CAHa,EAIb;MAAED,IAAI,EAAE,SAAR;MAAmBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKyL,WAAL,CAAiBlM,IAAjB,CAAsBS,EAAtB;IAApC,CAJa,EAKb;MAAED,IAAI,EAAE,WAAR;MAAqBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAK0L,aAAL,CAAmBnM,IAAnB,CAAwBS,EAAxB;IAAtC,CALa,EAMb;MAAED,IAAI,EAAE,WAAR;MAAqBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAK2L,aAAL,CAAmBpM,IAAnB,CAAwBS,EAAxB;IAAtC,CANa,EAOb;MAAED,IAAI,EAAE,WAAR;MAAqBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAK4L,aAAL,CAAmBrM,IAAnB,CAAwBS,EAAxB;IAAtC,CAPa,EAQb;MAAED,IAAI,EAAE,UAAR;MAAoBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAK6L,YAAL,CAAkBtM,IAAlB,CAAuBS,EAAvB;IAArC,CARa,EASb;MAAED,IAAI,EAAE,WAAR;MAAqBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAK8L,aAAL,CAAmBvM,IAAnB,CAAwBS,EAAxB;IAAtC,CATa,EAUb;MAAED,IAAI,EAAE,SAAR;MAAmBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAK+L,WAAL,CAAiBxM,IAAjB,CAAsBS,EAAtB;IAApC,CAVa,EAWb;MAAED,IAAI,EAAE,YAAR;MAAsBnJ,OAAO,EAAGoJ,EAAD,IAAQ,KAAKgM,cAAL,CAAoBzM,IAApB,CAAyBS,EAAzB;IAAvC,CAXa,CAAjB;IAaA4K,QAAQ,CAACngB,OAAT,CAAkBwV,GAAD,IAAS;MACtB,MAAMC,EAAE,GAAG,KAAKmL,gBAAL,CAAsB7hB,qBAAtB,CAA4CyW,GAAG,CAACF,IAAhD,EAAsD,IAAtD,EAA4DT,SAA5D,CAAsEW,GAAG,CAACrJ,OAA1E,CAAX;;MACA,KAAKgJ,cAAL,CAAoB1H,IAApB,CAAyBgI,EAAzB;IACH,CAHD;;IAIA,KAAKmL,gBAAL,CAAsB3R,yBAAtB,CAAgD,IAAhD,EAAsDpW,IAAtD,CAA4DkpB,GAAD,IAAS;MAChE,MAAMtM,EAAE,GAAGsM,GAAG,CAAClN,SAAJ,CAAcwL,SAAS,IAAI,KAAKmB,cAAL,CAAoB1M,IAApB,CAAyBuL,SAAzB,CAA3B,CAAX;;MACA,KAAKlL,cAAL,CAAoB1H,IAApB,CAAyBgI,EAAzB;IACH,CAHD;EAIH;EACD;;;EACA3F,UAAU,GAAG;IACT,IAAI,KAAK4R,MAAT,EAAiB;MACb,OAAO,KAAKA,MAAL,CAAYM,OAAZ,EAAP;IACH;;IACD,OAAO,EAAP;EACH;;EACD3R,SAAS,GAAG;IACR,IAAI,KAAKwR,aAAT,EAAwB;MACpB,OAAO,KAAKA,aAAL,CAAmBG,OAAnB,EAAP;IACH;;IACD,OAAO,EAAP;EACH;EACD;;;EACAjgB,EAAE,GAAG;IAAE,OAAO,KAAK+Q,GAAZ;EAAkB;EACzB;;;EACAG,WAAW,GAAG;IACV,KAAK2N,gBAAL,CAAsBpP,cAAtB,CAAqC,IAArC,EADU,CAEV;;;IACA,KAAK2D,cAAL,CAAoBnV,OAApB,CAA6B+U,CAAD,IAAOA,CAAC,CAACC,WAAF,EAAnC;EACH;;AA/Ja;;AAiKlB2L,WAAW,CAACmB,0BAAZ,GAAyC,CACrC,WADqC,EACxB,UADwB,EACZ,SADY,EACD,UADC,EACW,aADX,EAC0B,eAD1B,EAC2C,cAD3C,EAErC,QAFqC,CAAzC;AAIAnB,WAAW,CAAC7oB,UAAZ,GAAyB,CACrB;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE;EADI,CAAD;AAAzB,CADqB,CAAzB;;AAKAyN,WAAW,CAAChkB,cAAZ,GAA6B,MAAM,CAC/B;EAAE5E,IAAI,EAAE4X;AAAR,CAD+B,CAAnC;;AAGAgR,WAAW,CAACxN,cAAZ,GAA6B;EACzB5V,SAAS,EAAE,CAAC;IAAExF,IAAI,EAAEnC;EAAR,CAAD,CADc;EAEzB4H,SAAS,EAAE,CAAC;IAAEzF,IAAI,EAAEnC,KAAR;IAAeiO,IAAI,EAAE,CAAC,mBAAD;EAArB,CAAD,CAFc;EAGzBpG,QAAQ,EAAE,CAAC;IAAE1F,IAAI,EAAEnC;EAAR,CAAD,CAHe;EAIzB2Y,QAAQ,EAAE,CAAC;IAAExW,IAAI,EAAEnC;EAAR,CAAD,CAJe;EAKzBiI,WAAW,EAAE,CAAC;IAAE9F,IAAI,EAAEnC;EAAR,CAAD,CALY;EAMzBkI,aAAa,EAAE,CAAC;IAAE/F,IAAI,EAAEnC;EAAR,CAAD,CANU;EAOzBqI,YAAY,EAAE,CAAC;IAAElG,IAAI,EAAEnC;EAAR,CAAD,CAPW;EAQzBsI,OAAO,EAAE,CAAC;IAAEnG,IAAI,EAAEnC;EAAR,CAAD,CARgB;EASzBuI,MAAM,EAAE,CAAC;IAAEpG,IAAI,EAAEnC;EAAR,CAAD,CATiB;EAUzBirB,SAAS,EAAE,CAAC;IAAE9oB,IAAI,EAAEjC;EAAR,CAAD,CAVc;EAWzBgrB,YAAY,EAAE,CAAC;IAAE/oB,IAAI,EAAEjC;EAAR,CAAD,CAXW;EAYzBirB,QAAQ,EAAE,CAAC;IAAEhpB,IAAI,EAAEjC;EAAR,CAAD,CAZe;EAazBkrB,WAAW,EAAE,CAAC;IAAEjpB,IAAI,EAAEjC;EAAR,CAAD,CAbY;EAczBmrB,aAAa,EAAE,CAAC;IAAElpB,IAAI,EAAEjC;EAAR,CAAD,CAdU;EAezBorB,aAAa,EAAE,CAAC;IAAEnpB,IAAI,EAAEjC;EAAR,CAAD,CAfU;EAgBzBqrB,aAAa,EAAE,CAAC;IAAEppB,IAAI,EAAEjC;EAAR,CAAD,CAhBU;EAiBzBsrB,YAAY,EAAE,CAAC;IAAErpB,IAAI,EAAEjC;EAAR,CAAD,CAjBW;EAkBzBurB,aAAa,EAAE,CAAC;IAAEtpB,IAAI,EAAEjC;EAAR,CAAD,CAlBU;EAmBzBwrB,WAAW,EAAE,CAAC;IAAEvpB,IAAI,EAAEjC;EAAR,CAAD,CAnBY;EAoBzByrB,cAAc,EAAE,CAAC;IAAExpB,IAAI,EAAEjC;EAAR,CAAD,CApBS;EAqBzB0rB,cAAc,EAAE,CAAC;IAAEzpB,IAAI,EAAEjC;EAAR,CAAD,CArBS;EAsBzB4rB,MAAM,EAAE,CAAC;IAAE3pB,IAAI,EAAE5B,eAAR;IAAyB0N,IAAI,EAAE,CAAC2c,gBAAD;EAA/B,CAAD,CAtBiB;EAuBzBqB,aAAa,EAAE,CAAC;IAAE9pB,IAAI,EAAE5B,eAAR;IAAyB0N,IAAI,EAAE,CAAC0c,eAAD;EAA/B,CAAD;AAvBU,CAA7B;;AA0BA,MAAM0B,YAAN,CAAmB;EACfhqB,WAAW,CAAC2a,QAAD,EAAW;IAClB,KAAKA,QAAL,GAAgBA,QAAhB;IACA;AACR;AACA;;IACQ,KAAKrV,SAAL,GAAiB,IAAjB;IACA;AACR;AACA;IACQ;;IACA,KAAKC,SAAL,GAAiB,KAAjB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,QAAL,GAAgB,KAAhB;IACA;AACR;AACA;AACA;;IACQ,KAAKM,cAAL,GAAsB,QAAtB;IACA;AACR;AACA;;IACQ,KAAKE,YAAL,GAAoB,CAApB;IACA;AACR;AACA;;IACQ,KAAKC,OAAL,GAAe,IAAf;IACA;AACR;AACA;;IACQ,KAAK2c,YAAL,GAAoB,IAAIhlB,YAAJ,EAApB;IACA;AACR;AACA;;IACQ,KAAKqsB,cAAL,GAAsB,IAAIrsB,YAAJ,EAAtB;IACA;AACR;AACA;;IACQ,KAAKssB,iBAAL,GAAyB,IAAItsB,YAAJ,EAAzB;IACA;AACR;AACA;IACQ;;IACA,KAAK2d,IAAL,GAAY,IAAI3d,YAAJ,EAAZ;IACA;AACR;AACA;;IACQ,KAAK4d,OAAL,GAAe,IAAI5d,YAAJ,EAAf;IACA;AACR;AACA;;IACQ,KAAK6d,SAAL,GAAiB,IAAI7d,YAAJ,EAAjB;IACA;AACR;AACA;;IACQ,KAAK8d,SAAL,GAAiB,IAAI9d,YAAJ,EAAjB;IACA;AACR;AACA;;IACQ,KAAK+d,SAAL,GAAiB,IAAI/d,YAAJ,EAAjB;IACA;AACR;AACA;;IACQ,KAAKge,QAAL,GAAgB,IAAIhe,YAAJ,EAAhB;IACA;AACR;AACA;;IACQ,KAAKie,SAAL,GAAiB,IAAIje,YAAJ,EAAjB;IACA;AACR;AACA;;IACQ,KAAKke,OAAL,GAAe,IAAIle,YAAJ,EAAf;IACA;AACR;AACA;;IACQ,KAAKoe,UAAL,GAAkB,IAAIpe,YAAJ,EAAlB;IACA,KAAKusB,wBAAL,GAAgC,KAAhC;IACA,KAAKjO,mBAAL,GAA2B,EAA3B;EACH;EACD;;;EACAnB,QAAQ,GAAG;IACP,KAAKJ,QAAL,CAAcb,YAAd,CAA2B,IAA3B;;IACA,KAAKqQ,wBAAL,GAAgC,IAAhC;;IACA,KAAKhO,uBAAL;EACH;EACD;;;EACAC,WAAW,CAACC,OAAD,EAAU;IACjB,IAAI,CAAC,KAAK8N,wBAAV,EAAoC;MAChC;IACH,CAHgB,CAIjB;;;IACA,IAAI9N,OAAO,CAAC,OAAD,CAAP,IACAA,OAAO,CAAC,MAAD,CADP,IAEAA,OAAO,CAAC,OAAD,CAFP,IAGAA,OAAO,CAAC,MAAD,CAHX,EAGqB;MACjB,KAAK1B,QAAL,CAAcJ,SAAd,CAAwB,IAAxB;IACH;;IACD,IAAI8B,OAAO,CAAC,UAAD,CAAX,EAAyB;MACrB,KAAK1B,QAAL,CAAclU,WAAd,CAA0B,IAA1B;IACH;;IACD,IAAI4V,OAAO,CAAC,WAAD,CAAX,EAA0B;MACtB,KAAK1B,QAAL,CAAcjU,YAAd,CAA2B,IAA3B;IACH;;IACD,IAAI2V,OAAO,CAAC,SAAD,CAAX,EAAwB;MACpB,KAAK1B,QAAL,CAAchU,UAAd,CAAyB,IAAzB;IACH,CAnBgB,CAoBjB;;;IACA,KAAKyjB,8BAAL,CAAoC/N,OAApC;EACH;;EACD+N,8BAA8B,CAAC/N,OAAD,EAAU;IACpC,MAAMpb,OAAO,GAAG,EAAhB;IACA,MAAMsb,UAAU,GAAGtN,MAAM,CAACC,IAAP,CAAYmN,OAAZ,EAAqBlN,MAArB,CAA4BC,CAAC,IAAI4a,YAAY,CAACxN,WAAb,CAAyBtU,OAAzB,CAAiCkH,CAAjC,MAAwC,CAAC,CAA1E,CAAnB;IACAmN,UAAU,CAACxU,OAAX,CAAmBqH,CAAC,IAAI;MACpBnO,OAAO,CAACmO,CAAD,CAAP,GAAaiN,OAAO,CAACjN,CAAD,CAAP,CAAWqN,YAAxB;IACH,CAFD;;IAGA,IAAIF,UAAU,CAAChN,MAAX,GAAoB,CAAxB,EAA2B;MACvB,KAAKoL,QAAL,CAAcxZ,UAAd,CAAyB,IAAzB,EAA+BF,OAA/B;IACH;EACJ;;EACDkb,uBAAuB,GAAG;IACtB,MAAMO,MAAM,GAAG,IAAI3b,GAAJ,EAAf;IACA2b,MAAM,CAAC1X,GAAP,CAAW,gBAAX,EAA6B,KAAK4d,YAAlC;IACAlG,MAAM,CAAC1X,GAAP,CAAW,OAAX,EAAoB,KAAKilB,cAAzB;IACAvN,MAAM,CAAC1X,GAAP,CAAW,UAAX,EAAuB,KAAKklB,iBAA5B;IACAxN,MAAM,CAAC1X,GAAP,CAAW,MAAX,EAAmB,KAAKuW,IAAxB;IACAmB,MAAM,CAAC1X,GAAP,CAAW,SAAX,EAAsB,KAAKwW,OAA3B;IACAkB,MAAM,CAAC1X,GAAP,CAAW,WAAX,EAAwB,KAAKyW,SAA7B;IACAiB,MAAM,CAAC1X,GAAP,CAAW,WAAX,EAAwB,KAAK0W,SAA7B;IACAgB,MAAM,CAAC1X,GAAP,CAAW,WAAX,EAAwB,KAAK2W,SAA7B;IACAe,MAAM,CAAC1X,GAAP,CAAW,UAAX,EAAuB,KAAK4W,QAA5B;IACAc,MAAM,CAAC1X,GAAP,CAAW,WAAX,EAAwB,KAAK6W,SAA7B;IACAa,MAAM,CAAC1X,GAAP,CAAW,SAAX,EAAsB,KAAK8W,OAA3B;IACAY,MAAM,CAAC1X,GAAP,CAAW,YAAX,EAAyB,KAAKgX,UAA9B;IACAU,MAAM,CAAC3U,OAAP,CAAe,CAAC4U,YAAD,EAAezZ,SAAf,KAA6B;MACxC,KAAKgZ,mBAAL,CAAyB1G,IAAzB,CAA8B,KAAKmF,QAAL,CACzB7T,qBADyB,CACH5D,SADG,EACQ,IADR,EAEzB0Z,SAFyB,CAEf5S,KAAK,IAAI;QACpB,QAAQ9G,SAAR;UACI,KAAK,gBAAL;YACI,KAAKyX,QAAL,CAAc/W,SAAd,CAAwB,IAAxB,EAA8BhD,IAA9B,CAAmC6I,MAAM,IAAIkT,YAAY,CAACE,IAAb,CAAkB;cAC3D7C,KAAK,EAAEvQ,MAAM,CAAC4gB,YAAP,GAAsBnlB,GAAtB,EADoD;cAE3D+U,IAAI,EAAExQ,MAAM,CAAC4gB,YAAP,GAAsBjlB,GAAtB,EAFqD;cAG3D8U,KAAK,EAAEzQ,MAAM,CAAC6gB,YAAP,GAAsBplB,GAAtB,EAHoD;cAI3DiV,IAAI,EAAE1Q,MAAM,CAAC6gB,YAAP,GAAsBllB,GAAtB;YAJqD,CAAlB,CAA7C;;YAMA;;UACJ;YACIuX,YAAY,CAACE,IAAb,CAAkB7S,KAAlB;QAVR;MAYH,CAf6B,CAA9B;IAgBH,CAjBD;EAkBH;EACD;;;EACAgR,WAAW,GAAG;IACV,KAAKkB,mBAAL,CAAyBnU,OAAzB,CAAiC+U,CAAC,IAAIA,CAAC,CAACC,WAAF,EAAtC;;IACA,KAAKb,mBAAL,GAA2B,IAA3B;;IACA,KAAKvB,QAAL,CAAcP,eAAd,CAA8B,IAA9B;EACH;EACD;AACJ;AACA;;;EACIxW,SAAS,GAAG;IACR,OAAO,KAAK+W,QAAL,CAAc/W,SAAd,CAAwB,IAAxB,CAAP;EACH;;AAtKc;;AAwKnBomB,YAAY,CAACxN,WAAb,GAA2B,CACvB,WADuB,EAEvB,aAFuB,EAGvB,aAHuB,EAIvB,eAJuB,EAKvB,gBALuB,EAMvB,cANuB,EAOvB,SAPuB,EAQvB,QARuB,EASvB,WATuB,CAA3B;AAWAwN,YAAY,CAACnqB,UAAb,GAA0B,CACtB;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE;EADI,CAAD;AAAzB,CADsB,CAA1B;;AAKA+O,YAAY,CAACtlB,cAAb,GAA8B,MAAM,CAChC;EAAE5E,IAAI,EAAE8Z;AAAR,CADgC,CAApC;;AAGAoQ,YAAY,CAAC9O,cAAb,GAA8B;EAC1BlB,KAAK,EAAE,CAAC;IAAEla,IAAI,EAAEnC;EAAR,CAAD,CADmB;EAE1Bsc,IAAI,EAAE,CAAC;IAAEna,IAAI,EAAEnC;EAAR,CAAD,CAFoB;EAG1Buc,KAAK,EAAE,CAAC;IAAEpa,IAAI,EAAEnC;EAAR,CAAD,CAHmB;EAI1Bwc,IAAI,EAAE,CAAC;IAAEra,IAAI,EAAEnC;EAAR,CAAD,CAJoB;EAK1B2H,SAAS,EAAE,CAAC;IAAExF,IAAI,EAAEnC;EAAR,CAAD,CALe;EAM1B4H,SAAS,EAAE,CAAC;IAAEzF,IAAI,EAAEnC,KAAR;IAAeiO,IAAI,EAAE,CAAC,oBAAD;EAArB,CAAD,CANe;EAO1BpG,QAAQ,EAAE,CAAC;IAAE1F,IAAI,EAAEnC;EAAR,CAAD,CAPgB;EAQ1B8H,SAAS,EAAE,CAAC;IAAE3F,IAAI,EAAEnC;EAAR,CAAD,CARe;EAS1B+H,WAAW,EAAE,CAAC;IAAE5F,IAAI,EAAEnC;EAAR,CAAD,CATa;EAU1BiI,WAAW,EAAE,CAAC;IAAE9F,IAAI,EAAEnC;EAAR,CAAD,CAVa;EAW1BkI,aAAa,EAAE,CAAC;IAAE/F,IAAI,EAAEnC;EAAR,CAAD,CAXW;EAY1BmI,cAAc,EAAE,CAAC;IAAEhG,IAAI,EAAEnC;EAAR,CAAD,CAZU;EAa1BqI,YAAY,EAAE,CAAC;IAAElG,IAAI,EAAEnC;EAAR,CAAD,CAbY;EAc1BsI,OAAO,EAAE,CAAC;IAAEnG,IAAI,EAAEnC;EAAR,CAAD,CAdiB;EAe1BuI,MAAM,EAAE,CAAC;IAAEpG,IAAI,EAAEnC;EAAR,CAAD,CAfkB;EAgB1BilB,YAAY,EAAE,CAAC;IAAE9iB,IAAI,EAAEjC;EAAR,CAAD,CAhBY;EAiB1BosB,cAAc,EAAE,CAAC;IAAEnqB,IAAI,EAAEjC;EAAR,CAAD,CAjBU;EAkB1BqsB,iBAAiB,EAAE,CAAC;IAAEpqB,IAAI,EAAEjC;EAAR,CAAD,CAlBO;EAmB1B0d,IAAI,EAAE,CAAC;IAAEzb,IAAI,EAAEjC;EAAR,CAAD,CAnBoB;EAoB1B2d,OAAO,EAAE,CAAC;IAAE1b,IAAI,EAAEjC;EAAR,CAAD,CApBiB;EAqB1B4d,SAAS,EAAE,CAAC;IAAE3b,IAAI,EAAEjC;EAAR,CAAD,CArBe;EAsB1B6d,SAAS,EAAE,CAAC;IAAE5b,IAAI,EAAEjC;EAAR,CAAD,CAtBe;EAuB1B8d,SAAS,EAAE,CAAC;IAAE7b,IAAI,EAAEjC;EAAR,CAAD,CAvBe;EAwB1B+d,QAAQ,EAAE,CAAC;IAAE9b,IAAI,EAAEjC;EAAR,CAAD,CAxBgB;EAyB1Bge,SAAS,EAAE,CAAC;IAAE/b,IAAI,EAAEjC;EAAR,CAAD,CAzBe;EA0B1Bie,OAAO,EAAE,CAAC;IAAEhc,IAAI,EAAEjC;EAAR,CAAD,CA1BiB;EA2B1Bme,UAAU,EAAE,CAAC;IAAElc,IAAI,EAAEjC;EAAR,CAAD;AA3Bc,CAA9B;AA8BA,IAAI0sB,SAAS,GAAG,CAAhB;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAN,CAAsB;EAClBxqB,WAAW,CAAC2a,QAAD,EAAW;IAClB,KAAKA,QAAL,GAAgBA,QAAhB;IACA,KAAKC,eAAL,GAAuB,KAAvB;IACA,KAAKC,GAAL,GAAW,CAAC0P,SAAS,EAAV,EAAczP,QAAd,EAAX;IACA;AACR;AACA;;IACQ,KAAK7U,OAAL,GAAe,IAAf;EACH;;EACD8U,QAAQ,GAAG;IACP,IAAI,KAAKH,eAAT,EAA0B;MACtB;IACH;;IACD,KAAKD,QAAL,CAAclH,eAAd,CAA8B,IAA9B;;IACA,KAAKmH,eAAL,GAAuB,IAAvB;EACH;EACD;;;EACA9Q,EAAE,GAAG;IAAE,OAAO,KAAK+Q,GAAZ;EAAkB;EACzB;;;EACAC,QAAQ,GAAG;IAAE,OAAQ,mBAAkB,KAAKD,GAAL,CAASC,QAAT,EAAoB,EAA9C;EAAkD;EAC/D;;;EACAE,WAAW,GAAG;IACV,KAAKL,QAAL,CAAchH,WAAd,CAA0B,IAA1B;EACH;;AAxBiB;;AA0BtB6W,eAAe,CAAC3qB,UAAhB,GAA6B,CACzB;EAAEC,IAAI,EAAEpC,SAAR;EAAmBkO,IAAI,EAAE,CAAC;IACdqP,QAAQ,EAAE;EADI,CAAD;AAAzB,CADyB,CAA7B;;AAKAuP,eAAe,CAAC9lB,cAAhB,GAAiC,MAAM,CACnC;EAAE5E,IAAI,EAAE0T;AAAR,CADmC,CAAvC;;AAGAgX,eAAe,CAACtP,cAAhB,GAAiC;EAC7BjV,OAAO,EAAE,CAAC;IAAEnG,IAAI,EAAEnC;EAAR,CAAD;AADoB,CAAjC;AAIA;AACA;AACA;;AACA,SAAS8sB,cAAT,GAA0B;EACtB,OAAO,CACH/P,iBADG,EAEHS,SAFG,EAGH8B,YAHG,EAIHa,YAJG,EAKH+B,oBALG,EAMHnB,aANG,EAOHa,WAPG,EAQHoC,MARG,EASHtB,iBATG,EAUHyF,SAVG,EAWHlF,aAXG,EAYHsG,UAZG,EAaHwB,WAbG,EAcHJ,eAdG,EAeHC,gBAfG,EAgBHyB,YAhBG,EAiBHjJ,gBAjBG,EAkBHG,eAlBG,EAmBHE,oBAnBG,EAoBHoJ,eApBG,EAqBHjJ,cArBG,CAAP;AAuBH;AACD;AACA;AACA;AACA;;;AACA,MAAMmJ,aAAN,CAAoB;EAChB;AACJ;AACA;EACkB,OAAPC,OAAO,CAACC,uBAAD,EAA0B;IACpC,OAAO;MACHC,QAAQ,EAAEH,aADP;MAEHxK,SAAS,EAAE,CACP,GAAG/T,yBADI,EACuB;QAAEgU,OAAO,EAAEvgB,aAAX;QAA0BkrB,QAAQ,EAAExe;MAApC,CADvB,EAEP;QAAE6T,OAAO,EAAE9T,oBAAX;QAAiC0e,QAAQ,EAAEH;MAA3C,CAFO;IAFR,CAAP;EAOH;;AAZe;;AAcpBF,aAAa,CAAC7qB,UAAd,GAA2B,CACvB;EAAEC,IAAI,EAAEzB,QAAR;EAAkBuN,IAAI,EAAE,CAAC;IAAEof,YAAY,EAAEP,cAAc,EAA9B;IAAkCQ,OAAO,EAAER,cAAc;EAAzD,CAAD;AAAxB,CADuB,CAA3B;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAAS/P,iBAAT,EAA4BS,SAA5B,EAAuCuP,aAAvC,EAAsDzN,YAAtD,EAAoEa,YAApE,EAAkF+B,oBAAlF,EAAwGtV,WAAxG,EAAqHmU,aAArH,EAAoIa,WAApI,EAAiJoC,MAAjJ,EAAyJtB,iBAAzJ,EAA4KyF,SAA5K,EAAuLlF,aAAvL,EAAsMsG,UAAtM,EAAkNwB,WAAlN,EAA+NJ,eAA/N,EAAgPC,gBAAhP,EAAkQyB,YAAlQ,EAAgRjJ,gBAAhR,EAAkSG,eAAlS,EAAmTE,oBAAnT,EAAyUoJ,eAAzU,EAA0VjJ,cAA1V,EAA0W5c,aAA1W,EAAyXuC,gBAAzX,EAA2Y6B,iBAA3Y,EAA8ZhJ,oBAA9Z,EAAobqM,wBAApb,EAA8c8F,iBAA9c,EAAiec,eAAje,EAAkf3G,oBAAlf,EAAwgBmH,YAAxgB,EAAshBlH,iBAAthB,EAAyiB1M,aAAziB,EAAwjBiQ,aAAxjB,EAAukBgE,iBAAvkB,EAA0lBoC,cAA1lB,EAA0mByB,eAA1mB,EAA2nBkC,gBAA3nB,EAA6oB6Q,cAA7oB,EAA6pBzhB,gBAAgB,IAAIkiB,EAAjrB,EAAqrBtL,aAAa,IAAIuL,EAAtsB,EAA0sBtf,SAAS,IAAIuf,EAAvtB,EAA2tBpf,WAAW,IAAIqf,EAA1uB,EAA8uBlf,yBAAyB,IAAImf,EAA3wB"},"metadata":{},"sourceType":"module"}